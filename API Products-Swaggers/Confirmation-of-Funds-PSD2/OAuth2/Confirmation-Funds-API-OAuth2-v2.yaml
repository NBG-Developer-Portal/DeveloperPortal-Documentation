openapi: 3.0.0
info:
  version: v2.0
  title: Confirmation Funds API OAuth2
  contact:
    email: developer@nbg.gr
  description: >
    Start integrating your application with our Bank and give your clients the
    options to check the availability of their funds. 


    The availability of funds is determined by providing the account's details
    and the corresponding amount in question. 


    This Sandbox API optionally simulates the user consent flow required for the
    Confirmation of Funds. Please refer to the Quick Getting Started guide
    below, that provides the necessary steps to start playing with the API.


    ## How To Get Started 


    1. **Login/Register** to the NBG Technology HUB

    2. Go to **"APPS"**

    3. Select your Organization and go to step 4. If you want to create a new Organization click **\"CREATE AN ORGANIZATION\"** and follow the steps below:
        1. Enter the title of your Organization
        2. Enter a short description of your Organization (optional)
        3. Click **"SUBMIT"**
        
     4. Select the Organization of choice and click **"ADD AN APPLICATION"**
          1. Fill in the forms (title and short description)
          2. Check **\"Authorization Code\" and \"Client Credentials\"** 
          3. Enter the **OAuth Redirect and Post Logout URIs** (these are the URIs that we will redirect the user upon logging in and logging out respectively)    

            You can use the following redirect URL to easily test the API through the portal: *https://developer.nbg.gr/oauth2/redoc-callback*
          4. **Submit** your new APP
          5. Store the APPs **"Client ID"** and **"Client Secret"**
      5. Go to **"API PRODUCTS"** and select the **Confirmation of Funds API**

      6. Click **\"START USING THIS API\"**, choose your app and click
      **"SUBSCRIBE"**

      ### Sandbox Flow

      1. Get an **Access Token** using the **Authorization Code Flow** (with the credentials that you used to sign in as a developer) and the **API scopes** provided in the Authentication and Authorization (OAuth2) section below
      2. Create a **Sandbox**.
      3. **Optional** – **Signature validation**
      If you have already obtained an eIDAS certificate (Qualified Certificate for Seals - QSeal) that you would like to use, please set in all HTTP headers the following:
        1. **X-Certificate-Check: true**
        2. **TPP-Signature-Certificate** (X.509 certificate in .pem format)
        3. **Signature** (Detached JWS signature)
        
      For more information check the QSeal Certificates section below.

      4. **Optional** – Get the **customer’s consent**
      If you want to **enable the user consent validation** you must follow the consent flow as described below:
        1. Set the **X-Consent-Check HTTP** header to **true**
        2. Get an **Access Token** using the Client Credentials flow and the API scopes provided in the Authentication and Authorization (OAuth2) section below
        3. Generate a **consent_id** using the **generate consent endpoint** with access token from the previous step. 

        **Please note**: In the **/consents/request-access payload** the parameter **application** equals your **client-id** and the parameter **applicationId** equals the **consent application ID**. The **applicationId** can be obtained when **exporting the sandbox** subscribed for this API under the parameter name **consentApplicationIds**
        4. Request a user consent by visiting the Consent UI:
          1. **Replace** the necessary parameters: **consent_id, sandbox_id, redirect_uri** and visit the following URL: https://my.nbg.gr/sandbox.psd2.consent/confirmation.funds/authorize?consent_id=CONSENT_ID_FROM_STEP_4&sandbox_id=SANDBOX_ID_FROM_STEP_6&redirect_uri=YOUR_HTTPS_REDIRECT_URI
          2. Use the credentials you signed in as a developer to give your consent
      5. Play with the API

      ### Production flow

      1. **Contact us** to provide your **production client keys**.
      2. Get an **Access Token** using the **Client Credentials** flow and the API scopes provided in the Authentication and Authorization (OAuth2) section below.
      3. Generate a **consent_id** using the generate **consent endpoint with access token** from the previous step. 

      **Please note**: In the **/consents/request-access payload** the parameter **application** equals your **client-id** and the parameter **applicationId** equals the **consent application ID**.

      4. Get an **Access Token** using the Authorization Code Flow (PSU should login with the NBG i-bank internet banking credentials) and the API scopes provided in the Authentication and Authorization (OAuth2) section below.
        1. You can skip the following step by passing in the authorization endpoint your **consent_id from Step 3** as https://my.nbg.gr/identity/connect/authorize?client_id=YOUR_CLIENT_ID&response_type=code&scope=YOUR_SCOPES&redirect_uri=YOUR_REDIRECT_URI&consent_id=CONSENT_ID_FROM_STEP_3
      5. Redirect the PSU to the following URL - https://my.nbg.gr/psd2.consent/confirmation.funds/authorize?consent_id=YOUR_CONSENT_ID&redirect_uri=YOUR_HTTPS_REDIRECT_URI 
      6. You are **ready** to use your application in **production** mode!




    ## Authentication and Authorization (OAuth2) 


    This API version uses the OAuth2 protocol for redirection based on
    **authentication** and **authorization**, which means that a Bearer (access
    token) should be acquired. 


    An **access token** can be retrieved using the **client_id** and
    **client_secret** of the APP that you created and subscribed in this API,
    and your **own credentials** (username, password) that you use to sign in
    the NBG Technology HUB. 


    The scopes and endpoints are defined below:


    ### *SCOPES*


    For the ***Authorization*** Code:


    **Sandbox Scopes**: 
            
            openid profile role sandbox-funds-confirmation-api-v2

    **Production Scopes**: 
            
            openid profile ibank_profile role funds-confirmation-api-v2

    For the ***Client Credentials***:


    **Sandbox Scopes**: 
            
            sandbox-funds-confirmation-api-v2

    **Production Scopes**: 
            
            funds-confirmation-api-v2



    ### *ENDPOINTS*


    **Authorization Endpoint**: https://my.nbg.gr/identity/connect/authorize


    **Token  Endpoint**: https://my.nbg.gr/identity/connect/token




    See more [here](https://developer.nbg.gr/oauth-document)


    ## QSeal Certificates 


    This section provides an overview of the message signing process that TPPs
    should implement to consume the NBG PSD2 APIs that support QSeal
    certificates.


    You can download the NBG certificate to validate the API responses using
    the following link:
    
      - [NBG QSeal Certificate](https://files.nbg.gr/certificates/NBG%20QSeal%20production.cer)
      
    **Signing flow**



    QSeal Certificates provide a solution for non-repudiation that does not rely
    on TLS. NBG PSD2 APIs employ a JWS (JSON Web Signature) with detached
    content (as defined in [RFC 7515 - Appendix
    F](https://tools.ietf.org/html/rfc7515)) in the HTTP header \"Signature\". A
    TPP's private key should be used to sign the requests, while the NBG's
    private key is used to sign the response. Signers must sign the message
    using the RS256 algorithm.


    **JWS Construction**


    The TPP must construct the JWS using a private key with a corresponding
    QSeal certificate. The JWS is a string consisting of three base64URL encoded
    parts separated with dots in the form of \"Header.Payload.Signature\". Note
    that we accept detached JWSs, meaning that the Payload part should be
    ommited so that the \"Signature\" header should be in the form
    \"Header..Signature\".


    Below we describe how to construct the three parts.


    **Header (JOSE)**


    The JOSE Header (Javascript Object Signing and Encryption) is essentially
    the digital signature of the payload. An example with the only mandatory
    JOSE Header field \"alg\", which identifies the cryptographic algorithm you
    should use to secure the JWS, is shown below:


    {
      \"alg\": \"RS256\" 
    }


    **Payload**


    The payload is the body of your request in JSON format.


    **Signature** 


    The signature is constructed using the serialized payload, the defined
    algorithm (RS256 in our case) and the TPP's private key. Please refer to
    OpenID for all libraries implementing the JWS spec depending on your
    programming environment: https://openid.net/developers/jwt/.

      
    **Please note:** 


    1. To help you, we have uploaded **postman collections** that **calculate
    the signature and certificate headers** in a pre-request script. 


    You can find the postman collections for the Account Information API
    [here](https://github.com/NBG-Developer-Portal/Account-Information-API).


    2. Furthermore, we created a **windows form application** that constructs
    the **headers** as needed. It is implemented in C# and we published it on
    our Github account. Check out the code and the executable 
      [here](https://github.com/myNBGcode/NBG-request-signer).    


    ## Create your Sandbox


    Sandboxes are self - contained testing environments that provide a simple
    way of testing the API without any real impact, meaning that no personal or
    financial data is used.


    You can create **your Sandbox** by invoking the **POST** /api/sandbox call
    by simply providing an \"id\" as your sandbox id and naming it almost
    anything you like. 

    A sandbox with pre-populated data will be created, with a ready-to-go user
    with 'userId' the username that you use to log in.


    **_Important!_** Don't lose your sandbox_id, since you will need it for all
    the API calls. Sandbox endpoints are not included in the production version
    API.




    ## Important notes


    Request headers

    1. Each request **_MUST_** have a new GUID passed to request.header.ID

    2. Pass your client_id to request.header.application


    ## SMS Challenge (One Time Password)


    To successfully complete the transaction use the **2-step SMS OTP flow**:


    **Step 1:** Pass the key-value pair **"tanNumber":"smsotp"** to the request.


    => If the request is valid, the response will be **SMSOTP.500** and an **SMS
    with the OTP** will be **sent** to the provided phone number. 



    **Step 2:** To complete the transaction, repeat the request by replacing the
    value of **"tanNumber"** with the OTP you received.  


    => You have **3** attempts to complete the transaction by using a wrong OTP
    and each time you will receive the **SMSOTP.800 error** code. 


    In addition there are the following **error codes**: 


    **SMSOTP.202**: The smsotp code **isn't correctly matched** or if the smsotp
    has been **consumed before the request**.


    **SMSOTP.402**: Something is **changed** in the request between the time of
    the request and the time of the consumption of the smsotp or when the
    **smsotp hasn't been sent** to the user.


    **SMSOTP.400**: The threshold of unsuccessful attempts is surpassed and the
    user is locked out and is not able to request OTPs until the account is
    unlocked by NBG.



    **Please note:** 


    * In the sandbox environment, you can **change the mobile phone number**
    that receives the SMS OTP by updating the sandbox field
    **'mobilePhoneNumber'** which you will find in the "users" object. 

    * The default mobile phone number is the one that you submitted when you
    signed up in the NBG Technology HUB. 



    The default mobile phone number is the one that you submitted when you
    signed up in the NBG Technology HUB.


    ## Generic Error Codes:

    **Format**


    ```json

    {
      "Message": "Error 1.1.3"
    }

    ```

    **Error List**   


    1. Error 1.1.0 - Only POST method is allowed

    2. Error 1.1.1, 2.1.2 - Header Error : Header is NULL

    3. Error 1.1.3 - Header Error : Application is NULL

    4. Error 1.2 - Model state is invalid

    5. Error C.0.0, C.0.1 - Action not allowed for CORPORATE users

    6. Error 2.1.1 - Request body is null

    7. Error 2.2.1 - UserId is null

    8. Error 2.2.3 - Inconsistent User ID

    9. Error 3.1.1 - header.ID/header.application must be valid GUIDs


    ## Feedback and Questions


    We would love to hear your feedback and answer your questions. Send us at
    [developer@nbg.gr](developer@nbg.gr)



    Check out our [Sandbox Postman
    Collection](https://github.com/NBG-Developer-Portal/Confirmation-of-Funds-API)!


    ------------------------------------------------------------------------------------------ 


    Created by [**NBG**](https://www.nbg.gr/).


    ------------------------------------------------------------------------------------------ 

    ------------------------------------------------------------------------------------------




     # Entities 

     Below, the main entities are documented.
     <a name=RequestHeader></a> 
    ## RequestHeader 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | ID| -| string|

    | application| -| string|

     <a name=RequestEmptyPayload></a> 
    ## RequestEmptyPayload 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

     <a name=ResponseMessage></a> 
    ## ResponseMessage 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | id| -| string|

    | code| -| string|

    | desc| -| string|

    | sev| -| string|

    | cat| -| string|

     <a name=Transaction></a> 
    ## Transaction 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | serialNum| Just the serial number of this entry| string|

    | date| Date of this transaction| string|

    | branch| Branch| string|

    | trans| Code for transaction type, e.g. <code>"10"</code> for "Κατάθεση"|
    string|

    | amount| Amount of this transaction in the currency of the transaction|
    number|

    | currency| The currency of the transaction| string|

    | amountEquivalent| Amount of this transaction in the currency of the
    Account| number|

    | creditDebit| <code>"Credit"</code> or <code>"Debit"</code>| string|

    | valeur| Date when transaction amount debited or credited| string|

    | description| Description of this transaction| string|

    | accountingBalance| Accounting balance| number|

    | reference| Transaction reference number (with the "externalSystem"
    combination is unique)| string|

    | externalSystem| If equals to "RNB" then the remittance is to NBG.If equals
    to "ROT" then the remittance is to other bank| string|

    | relatedAccount| If it is a debit transaction then it is the credit account
    number. If it is a credit transaction then it is the debit account number.|
    string|

    | relatedName| Name of the counterparty| string|

    | timestamp| Full date of this transaction (up to milliseconds)| string|

     <a name=AccountFull></a> 
    ## AccountFull 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | accountType| Code for account type, e.g. <code>10</code> for
    "Ταμιευτήριο"| string|

    | overdraftLimit| Overdraft limit| number|

    | numberOfMandates| Number of mandates| integer|

    | serialNo| Just the serial number of this entry| string|

    | account| The NBG account number (e.g. 11 digits)| string|

    | iban| Nicely formatted IBAN.| string|

    | currency| Currency, 3-letter code , e.g. <code>EUR</code>| string|

    | alias| Friendly name| string|

    | product| Account product code| string|

    | ledgerBalance| Ledger balance| number|

    | availableBalance| Available balance| number|

    | newMoneyBalance| Available balance for transfer abroad| number|

    | flag| TBD| string|

    | allowConnect| Connection indicator| string|

    | allowDebit| Account debit indicator| string|

    | allowCredit| Account credit indicator| string|

    | indicators| Account other indicators| string|

    | ledgerAccount| Special account| string|

    | isOwnAccount| Whether the account belongs to the user| boolean|

    | features | Entity |
    <details><summary>[Feature](#Feature)</summary><ul><li>statement
    [boolean]</li> <li>otherInfo [boolean]</li> <li>mandates [boolean]</li>
    <li>cheques [boolean]</li> <li>transfer [boolean]</li> <li>rates
    [boolean]</li> <li>beneficiaries [boolean]</li> </ul></details> | 

     <a name=Feature></a> 
    ## Feature 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | statement| Statements| boolean|

    | otherInfo| Other information| boolean|

    | mandates| Mandates| boolean|

    | cheques| Cheques| boolean|

    | transfer| Transfer| boolean|

    | rates| Rates| boolean|

    | beneficiaries| Cobeneficiaries| boolean|

     <a name=BalanceDetails></a> 
    ## BalanceDetails 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | account| The NBG account number (e.g. 11 digits).| string|

    | iban| Nicely formatted IBAN.| string|

    | accountType| Code for account type, e.g. <code>10</code> for
    "Ταμιευτήριο"| string|

    | currency| Currency, 3-letter code , e.g. <code>EUR</code>| string|

    | alias| Friendly name| string|

    | product| Account product code| string|

    | ledgerBalance| Ledger balance| number|

    | availableBalance| Available balance| number|

    | createDate| Creation date| string|

    | lastTransactionDate| Last transaction date| string|

    | interestRate| Interest rate| number|

    | interestAccrued| Accrued interest| number|

    | interestPeriod| Interest period| string|

    | chequeReservation| Reservation from cheques| number|

    | deptReservation| Other reservation| number|

    | overdraftLimit| Overdraft limit| number|

    | excessLimitAmount| Overdraft limit amount exceeded| number|

    | availableLimitAmount| Available overdraft amount| number|

    | freeChequeAmnt| Amount free from cheques| number|

    | expirationDate| Expiration date| string|

    | interestScale| Interest rate scale| string|

    | irisAccount| IRIS account number (e.g. 4370140994)| string|

    | irisBalance| IRIS account balance| number|

    | accType| Account type code (e.g."3003")| string|

    | allowConnect| Connection indicator| string|

    | allowDebit| Account debit indicator(if 1 debit is allowed)| string|

    | allowCredit| Account credit indicator (A two digits string XY where if X=1
    then credit is allowed from the user  and if Υ=1 then credit is allowed from
    a third user)| string|

    | indicators| Other indicators| string|

    | ledgerAccount| Special account| string|

    | isOwnAccount| Whether the account belongs to the user| boolean|

    | features | Entity |
    <details><summary>[Feature](#Feature)</summary><ul><li>statement
    [boolean]</li> <li>otherInfo [boolean]</li> <li>mandates [boolean]</li>
    <li>cheques [boolean]</li> <li>transfer [boolean]</li> <li>rates
    [boolean]</li> <li>beneficiaries [boolean]</li> </ul></details> | 

    | newMoneyBalance| Available balance for transfer abroad| number|

    | mandatesNumber| Number of mandates| integer|

     <a name=AccountBeneficiary></a> 
    ## AccountBeneficiary 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | name| Cobeneficiary name| string|

    | order| Cobeneficiary order in the list| string|

     <a name=InterestScale></a> 
    ## InterestScale 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | from| Amount from (lower bound).| number|

    | to| Amount to (upper bound).| number|

    | rate| Relevant interest rate.| number|

     <a name=RequestOfCheckFundAvailability></a> 
    ## RequestOfCheckFundAvailability 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

    | payload | Entity |
    <details><summary>[CheckFundAvailabilityRequest](#CheckFundAvailabilityRequest)</summary><ul><li>iban
    [string]</li> <li><details><summary>amount
    [[Amount](#Amount)]</summary><ul><li>amount [number]</li> <li>currency
    [string]</li> </ul></details></li><li>userId [string]</li>
    <li>useOverdraftLimit [boolean]</li> </ul></details> | 

     <a name=CheckFundAvailabilityRequest></a> 
    ## CheckFundAvailabilityRequest 

    Check funds availability request type 


    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | iban| Account's IBAN| string|

    | amount | Entity |
    <details><summary>[Amount](#Amount)</summary><ul><li>amount [number]</li>
    <li>currency [string]</li> </ul></details> | 

    | userId| The username of the logged in user| string|

    | useOverdraftLimit| Whether overdraft limit will be included in the funds
    availability calculation| boolean|

     <a name=Amount></a> 
    ## Amount 

    Amount 


    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | amount| The amount given with fractional digits, where fractions must be
    compliant to the currency definition. Up to 14 significant figures.The
    decimal separator is a dot| number|

    | currency| ISO 4217 Alpha 3 currency code| string|

     <a name=ConsentModel></a> 
    ## ConsentModel 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | consentId | Entity |
    <details><summary>[ConsentId](#ConsentId)</summary><ul></ul></details> | 

    | name | Entity |
    <details><summary>[ConsentName](#ConsentName)</summary><ul></ul></details>
    | 

    | startDate | Entity |
    <details><summary>[StartDate](#StartDate)</summary><ul></ul></details> | 

    | endDate | Entity |
    <details><summary>[EndDate](#EndDate)</summary><ul></ul></details> | 

    | created| Created date| string|

    | updated| Updated date| string|

    | uses| Number of uses| integer|

    | status | Entity |
    <details><summary>[ConsentStatus](#ConsentStatus)</summary><ul></ul></details>
    | 

    | statusDate| Status date| string|

    | applicationId | Entity |
    <details><summary>[ApplicationId](#ApplicationId)</summary><ul></ul></details>
    | 

    | sub| User's unique sub| string|

    | preferredUsername| Preferred username| string|

    | providerId| Provider id| string|

     <a name=SandboxConsentModel></a> 
    ## SandboxConsentModel 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | consentId | Entity |
    <details><summary>[ConsentId](#ConsentId)</summary><ul></ul></details> | 

    | name | Entity |
    <details><summary>[ConsentName](#ConsentName)</summary><ul></ul></details>
    | 

    | consentData | Entity |
    <details><summary>[ConsentData](#ConsentData)</summary><ul><li><details><summary>consentId
    [[ConsentId](#ConsentId)]</summary><ul></ul></details></li><li>permissions
    [array[[Permission](#Permission)]]</li> </ul></details> | 

    | startDate | Entity |
    <details><summary>[StartDate](#StartDate)</summary><ul></ul></details> | 

    | endDate | Entity |
    <details><summary>[EndDate](#EndDate)</summary><ul></ul></details> | 

    | created| Created date| string|

    | updated| Updated date| string|

    | uses| Number of uses| integer|

    | status | Entity |
    <details><summary>[ConsentStatus](#ConsentStatus)</summary><ul></ul></details>
    | 

    | statusDate| Status date| string|

    | applicationId | Entity |
    <details><summary>[ApplicationId](#ApplicationId)</summary><ul></ul></details>
    | 

    | sub| User's unique sub| string|

    | preferredUsername| Preferred username| string|

    | providerId| Provider id| string|

     <a name=ConsentId></a> 
    ## ConsentId 

    ### Attributes 


    | Type| Description| Example|

    | -----| -----| -----|

    | string| Consent Id| 03D3A4F2-D26E-4365-B389-1AD5EE73A5B5|

     <a name=ApplicationId></a> 
    ## ApplicationId 

    ### Attributes 


    | Type| Description| Example|

    | -----| -----| -----|

    | string| Application Id| 72F01708-BE1E-4567-926E-8C87D03CA551|

     <a name=ConsentName></a> 
    ## ConsentName 

    ### Attributes 


    | Type| Description| Example|

    | -----| -----| -----|

    | string| Consent name| My Consent|

     <a name=ConsentData></a> 
    ## ConsentData 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | consentId | Entity |
    <details><summary>[ConsentId](#ConsentId)</summary><ul></ul></details> | 

    | permissions| Consent Permissions| array[[Permission](#Permission)]|

     <a name=StartDate></a> 
    ## StartDate 

    ### Attributes 


    | Type| Description| Example|

    | -----| -----| -----|

    | string| Start date| 2019-01-01T09:12:18.362Z|

     <a name=EndDate></a> 
    ## EndDate 

    ### Attributes 


    | Type| Description| Example|

    | -----| -----| -----|

    | string| End date| 2019-12-12T09:12:18.362Z|

     <a name=Permission></a> 
    ## Permission 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | startDate | Entity |
    <details><summary>[StartDate](#StartDate)</summary><ul></ul></details> | 

    | endDate | Entity |
    <details><summary>[EndDate](#EndDate)</summary><ul></ul></details> | 

    | type | Entity |
    <details><summary>[ConsentType](#ConsentType)</summary><ul></ul></details>
    | 

    | typeInfo | Entity |
    <details><summary>[ConsentTypeInfo](#ConsentTypeInfo)</summary><ul><li>iban
    [string]</li> <li>accountNumber [string]</li> <li><details><summary>name
    [[ConsentName](#ConsentName)]</summary><ul></ul></details></li></ul></details>
    | 

    | actions | Entity |
    <details><summary>[Actions](#Actions)</summary><ul></ul></details> | 

     <a name=ConsentType></a> 
    ## ConsentType 

    ### Attributes 


    | Type| Description| Example| Values|

    | -----| -----| -----| -----|

    | enum| Consent type| Balances| <ul style="padding-left:
    0"><li>Balances</li></ul>|

     <a name=ConsentTypeInfo></a> 
    ## ConsentTypeInfo 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | iban| Account IBAN| string|

    | accountNumber| Account Number| string|

    | name | Entity |
    <details><summary>[ConsentName](#ConsentName)</summary><ul></ul></details>
    | 

     <a name=Actions></a> 
    ## Actions 

    Permission action allowed 


    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

     <a name=ConsentStatus></a> 
    ## ConsentStatus 

    ### Attributes 


    | Type| Description| Example| Values|

    | -----| -----| -----| -----|

    | enum| Consent status| Payments| <ul style="padding-left:
    0"><li>AwaitingAuthorization</li><li>Authorized</li><li>Rejected</li><li>Expired</li><li>Revoked</li><li>RevokedByAdmin</li><li>Unspecified</li></ul>|

     <a name=RequestOfRequestAccess></a> 
    ## RequestOfRequestAccess 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

    | payload| -| object|

     <a name=ResponseOfRequestAccess></a> 
    ## ResponseOfRequestAccess 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload| -| object|

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=RequestOfInfo></a> 
    ## RequestOfInfo 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

    | payload| -| object|

     <a name=ResponseOfInfo></a> 
    ## ResponseOfInfo 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload| -| object|

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=RequestOfConsentDelete></a> 
    ## RequestOfConsentDelete 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

    | payload| -| object|

     <a name=ResponseOfCheckFundAvailability></a> 
    ## ResponseOfCheckFundAvailability 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload | Entity |
    <details><summary>[CheckFundAvailabilityResponse](#CheckFundAvailabilityResponse)</summary><ul><li>isAvailable
    [boolean]</li> </ul></details> | 

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=CheckFundAvailabilityResponse></a> 
    ## CheckFundAvailabilityResponse 

    Returns a boolean indicating whether one account has the available balance 


    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | isAvailable| availability flag| boolean|

     <a name=RequestOfSandbox></a> 
    ## RequestOfSandbox 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

    | payload | Entity |
    <details><summary>[SandboxRequest](#SandboxRequest)</summary><ul><li>sandboxId
    [string]</li> </ul></details> | 

     <a name=SandboxRequest></a> 
    ## SandboxRequest 

    Sandbox Request Type 


    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | sandboxId| The unique name of your Sandbox| string|

     <a name=ResponseOfSandbox></a> 
    ## ResponseOfSandbox 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload | Entity |
    <details><summary>[Sandbox](#Sandbox)</summary><ul><li>sanboxId
    [string]</li> <li>version [integer]</li> <li>users
    [array[[User](#User)]]</li> <li>consentApplicationIds
    [array[[ApplicationId](#ApplicationId)]]</li> <li>consents
    [array[[SandboxConsentModel](#SandboxConsentModel)]]</li> </ul></details> | 

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=Sandbox></a> 
    ## Sandbox 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | sanboxId| -| string|

    | version| Sandbox's version| integer|

    | users| Sandbox's list of users| array[[User](#User)]|

    | consentApplicationIds| List of applications|
    array[[ApplicationId](#ApplicationId)]|

    | consents| List of consents|
    array[[SandboxConsentModel](#SandboxConsentModel)]|

     <a name=User></a> 
    ## User 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | accounts| -| array[[BankAccount](#BankAccount)]|

    | userId| The username of the logged in user| string|

    | mobilePhoneNumber| Mobile phone number for SmsOtp| string|

     <a name=BankAccount></a> 
    ## BankAccount 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | account | Entity |
    <details><summary>[AccountFull](#AccountFull)</summary><ul><li>accountType
    [string]</li> <li>overdraftLimit [number]</li> <li>numberOfMandates
    [integer]</li> <li>serialNo [string]</li> <li>account [string]</li> <li>iban
    [string]</li> <li>currency [string]</li> <li>alias [string]</li> <li>product
    [string]</li> <li>ledgerBalance [number]</li> <li>availableBalance
    [number]</li> <li>newMoneyBalance [number]</li> <li>flag [string]</li>
    <li>allowConnect [string]</li> <li>allowDebit [string]</li> <li>allowCredit
    [string]</li> <li>indicators [string]</li> <li>ledgerAccount [string]</li>
    <li>isOwnAccount [boolean]</li> <li><details><summary>features
    [[Feature](#Feature)]</summary><ul><li>statement [boolean]</li>
    <li>otherInfo [boolean]</li> <li>mandates [boolean]</li> <li>cheques
    [boolean]</li> <li>transfer [boolean]</li> <li>rates [boolean]</li>
    <li>beneficiaries [boolean]</li> </ul></details></li></ul></details> | 

    | transactions| -| array[[Transaction](#Transaction)]|

    | deferred| -| array[[DeferredTransactionInfo](#DeferredTransactionInfo)]|

    | pending| -| array[[DeferredItem](#DeferredItem)]|

    | beneficiaries| -| array[[AccountBeneficiary](#AccountBeneficiary)]|

    | details | Entity |
    <details><summary>[BalanceDetails](#BalanceDetails)</summary><ul><li>account
    [string]</li> <li>iban [string]</li> <li>accountType [string]</li>
    <li>currency [string]</li> <li>alias [string]</li> <li>product [string]</li>
    <li>ledgerBalance [number]</li> <li>availableBalance [number]</li>
    <li>createDate [string]</li> <li>lastTransactionDate [string]</li>
    <li>interestRate [number]</li> <li>interestAccrued [number]</li>
    <li>interestPeriod [string]</li> <li>chequeReservation [number]</li>
    <li>deptReservation [number]</li> <li>overdraftLimit [number]</li>
    <li>excessLimitAmount [number]</li> <li>availableLimitAmount [number]</li>
    <li>freeChequeAmnt [number]</li> <li>expirationDate [string]</li>
    <li>interestScale [string]</li> <li>irisAccount [string]</li>
    <li>irisBalance [number]</li> <li>accType [string]</li> <li>allowConnect
    [string]</li> <li>allowDebit [string]</li> <li>allowCredit [string]</li>
    <li>indicators [string]</li> <li>ledgerAccount [string]</li>
    <li>isOwnAccount [boolean]</li> <li><details><summary>features
    [[Feature](#Feature)]</summary><ul><li>statement [boolean]</li>
    <li>otherInfo [boolean]</li> <li>mandates [boolean]</li> <li>cheques
    [boolean]</li> <li>transfer [boolean]</li> <li>rates [boolean]</li>
    <li>beneficiaries [boolean]</li> </ul></details></li><li>newMoneyBalance
    [number]</li> <li>mandatesNumber [integer]</li> </ul></details> | 

    | rates| -| array[[InterestScale](#InterestScale)]|

     <a name=DeferredTransactionInfo></a> 
    ## DeferredTransactionInfo 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | trnNo| -| string|

    | trnId| -| string|

    | name| -| string|

    | description| -| string|

    | createdDate| -| string|

    | executionDate| -| string|

    | cancellationDate| -| string|

    | frequency| -| integer|

    | totalPayments| -| integer|

    | amount| -| number|

    | status| -| string|

    | transId| -| string|

    | channel| -| string|

    | rowsNum| -| integer|

    | debitAccount| -| string|

    | totalAmount| -| number|

    | creditAccount| -| string|

    | details| -| array[[DeferredDetails](#DeferredDetails)]|

    | historical| -|
    array[[DeferredHistoryExecution](#DeferredHistoryExecution)]|

    | history | Entity |
    <details><summary>[DeferredHistory](#DeferredHistory)</summary><ul><li><details><summary>master
    [[DeferredHistoryMaster](#DeferredHistoryMaster)]</summary><ul><li>originalTotalPayments
    [string]</li> <li>transactionName [string]</li> <li>deletionUserId
    [string]</li> <li>frequency [string]</li> <li>originalExecutionDate
    [string]</li> <li>name [string]</li> <li>deletionDate [string]</li>
    <li>totalPayments [string]</li> <li>status [string]</li> <li>executionDate
    [string]</li> </ul></details></li><li>execution
    [array[[DeferredHistoryExecution](#DeferredHistoryExecution)]]</li>
    </ul></details> | 

    | future| -| array[[DeferredFutureExecution](#DeferredFutureExecution)]|

    | master | Entity |
    <details><summary>[DeferredHistoryMaster](#DeferredHistoryMaster)</summary><ul><li>originalTotalPayments
    [string]</li> <li>transactionName [string]</li> <li>deletionUserId
    [string]</li> <li>frequency [string]</li> <li>originalExecutionDate
    [string]</li> <li>name [string]</li> <li>deletionDate [string]</li>
    <li>totalPayments [string]</li> <li>status [string]</li> <li>executionDate
    [string]</li> </ul></details> | 

     <a name=DeferredItem></a> 
    ## DeferredItem 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | userId| -| string|

    | rowNumber| -| integer|

    | counter| -| integer|

    | pendingCounter| -| integer|

    | approvedCounter| -| integer|

    | rejectedCounter| -| integer|

    | cancelledCounter| -| integer|

    | id| -| string|

    | serviceAudit| -| string|

    | initialTimestamp| -| string|

    | actionUserId| -| string|

    | initialUserId| -| string|

    | initialUserAuthorizationLevel| -| string|

    | initialUserNumberOfApprovals| -| integer|

    | currentAuthorizationLevel| -| string|

    | currentNumberOfApprovals| -| integer|

    | serviceAction| -| string|

    | debitIBAN| -| string|

    | amount| -| number|

    | summary| -| string|

    | status| -| string|

    | statusTimestamp| -| string|

    | statusUserId| -| string|

    | statusVersion| -| integer|

    | isUserInvolved| -| boolean|

    | creditIBAN| -| string|

    | refNo| -| string|

    | tanNumber| -| string|

    | executionResult | Entity |
    <details><summary>[Response](#Response)</summary><ul><li><details><summary>exception
    [[ResponseMessage](#ResponseMessage)]</summary><ul><li>id [string]</li>
    <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat
    [string]</li> </ul></details></li><li>messages
    [array[[ResponseMessage](#ResponseMessage)]]</li> <li>executionTime
    [number]</li> </ul></details> | 

    | isSmsOtp| -| boolean|

    | rejectReason| -| string|

     <a name=DeferredDetails></a> 
    ## DeferredDetails 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | id| -| string|

    | field| -| string|

    | value| -| string|

     <a name=DeferredHistoryExecution></a> 
    ## DeferredHistoryExecution 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | errorMessage| -| string|

    | executionTime| -| string|

    | executionStatus| -| string|

    | externalId| -| string|

     <a name=DeferredHistory></a> 
    ## DeferredHistory 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | master | Entity |
    <details><summary>[DeferredHistoryMaster](#DeferredHistoryMaster)</summary><ul><li>originalTotalPayments
    [string]</li> <li>transactionName [string]</li> <li>deletionUserId
    [string]</li> <li>frequency [string]</li> <li>originalExecutionDate
    [string]</li> <li>name [string]</li> <li>deletionDate [string]</li>
    <li>totalPayments [string]</li> <li>status [string]</li> <li>executionDate
    [string]</li> </ul></details> | 

    | execution| -|
    array[[DeferredHistoryExecution](#DeferredHistoryExecution)]|

     <a name=DeferredFutureExecution></a> 
    ## DeferredFutureExecution 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | executionTime| -| string|

    | executionStatus| -| string|

    | id| -| string|

    | scheduleId| -| string|

    | externalId| -| string|

    | errorMessage| -| string|

     <a name=DeferredHistoryMaster></a> 
    ## DeferredHistoryMaster 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | originalTotalPayments| -| string|

    | transactionName| -| string|

    | deletionUserId| -| string|

    | frequency| -| string|

    | originalExecutionDate| -| string|

    | name| -| string|

    | deletionDate| -| string|

    | totalPayments| -| string|

    | status| -| string|

    | executionDate| -| string|

     <a name=Response></a> 
    ## Response 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=RequestOfUpdateSandbox></a> 
    ## RequestOfUpdateSandbox 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | header | Entity |
    <details><summary>[RequestHeader](#RequestHeader)</summary><ul><li>ID
    [string]</li> <li>application [string]</li> </ul></details> | 

    | payload | Entity |
    <details><summary>[Sandbox](#Sandbox)</summary><ul><li>sanboxId
    [string]</li> <li>version [integer]</li> <li>users
    [array[[User](#User)]]</li> <li>consentApplicationIds
    [array[[ApplicationId](#ApplicationId)]]</li> <li>consents
    [array[[SandboxConsentModel](#SandboxConsentModel)]]</li> </ul></details> | 

     <a name=ResponseOfGetCurrentUser></a> 
    ## ResponseOfGetCurrentUser 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload | Entity |
    <details><summary>[GetCurrentUserResponse](#GetCurrentUserResponse)</summary><ul><li>userId
    [string]</li> <li>smsOtpMobile [string]</li> </ul></details> | 

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=GetCurrentUserResponse></a> 
    ## GetCurrentUserResponse 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | userId| The username of the logged in user| string|

    | smsOtpMobile| The masked smsotp phone number of the logged in user (ie.
    693****234)| string|

     <a name=Response-of-Boolean></a> 
    ## Response-of-Boolean 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload| -| boolean|

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|

     <a name=ErrorResponse></a> 
    ## ErrorResponse 



    ### Attributes 


    | Name| Description| Values|

    | -----| -----| -----|

    | payload| -| object|

    | exception | Entity |
    <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id
    [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev
    [string]</li> <li>cat [string]</li> </ul></details> | 

    | messages| -| array[[ResponseMessage](#ResponseMessage)]|

    | executionTime| -| number|
paths:
  /consents/request-access:
    post:
      tags:
        - Consent
      summary: Generate consent.
      description: >
        Generates a consentId that must be used when the user visits the Consent
        UI to give his/her consent, using client credential authorisation flow.
        A default application is created at the sandbox default data (field
        'consentApplicationIds').
         
         **Error List**   


         **Code**: 102 - **Description**: You must fill all the required fields in the request body.
         
         
         **Code**: CME-30004 - **Description**: Active consent template not found.
         
         
         **Sandbox Specific Error List**   
         
         
         **Code**: 001 - **Description**: Invalid sandboxId.
         
         
         **Code**: 004 - **Description**: Cannot Update Sandbox.
         
         
         **Code**: 006 - **Description**: Sandbox Not Found
         
         
         **Code**: 007 - **Description**: Logged in User Not Found.
      operationId: Consents_ConsentsRequestAccess
      parameters:
        - name: sandbox_id
          in: header
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
            default: ''
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the client credentials flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: Request-Id
          in: header
          description: A guid that uniquely identifies your request
          required: true
          schema:
            type: string
            default: 6E6079FA-F66F-42FF-82B9-17A8C97B7BA9
        - name: Signature
          in: header
          description: Signature (Detached JWS signature)
          required: true
          schema:
            type: string
            default: ''
        - name: TPP-Signature-Certificate
          in: header
          description: TPP-Signature-Certificate (X.509 certificate in .pem format)
          required: true
          schema:
            type: string
            default: ''
        - name: X-Certificate-Check
          in: header
          description: A Boolean to enable or disable the certificate validation
          required: true
          schema:
            type: string
            default: false
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfRequestAccess'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestOfRequestAccess'
        description: ConsentsRequestAccessRequest
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "x-certificate-check:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "tpp-signature-certificate:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "signature:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"applicationId\":\"<ADD STRING
            VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("x-certificate-check", "SOME_STRING_VALUE");

            request.AddHeader("tpp-signature-certificate", "SOME_STRING_VALUE");

            request.AddHeader("signature", "SOME_STRING_VALUE");

            request.AddHeader("request-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"applicationId\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"applicationId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"signature\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"tpp-signature-certificate\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-certificate-check\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"applicationId\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("request-id", "SOME_STRING_VALUE")
              .addHeader("signature", "SOME_STRING_VALUE")
              .addHeader("tpp-signature-certificate", "SOME_STRING_VALUE")
              .addHeader("x-certificate-check", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'x-certificate-check': 'SOME_STRING_VALUE',
                 'tpp-signature-certificate': 'SOME_STRING_VALUE',
                 signature: 'SOME_STRING_VALUE',
                 'request-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' },
                 payload: { applicationId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"},\"payload\":{\"applicationId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "request-id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "signature: SOME_STRING_VALUE",
                "tpp-signature-certificate: SOME_STRING_VALUE",
                "x-certificate-check: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"applicationId\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'request-id': "SOME_STRING_VALUE",
                'signature': "SOME_STRING_VALUE",
                'tpp-signature-certificate': "SOME_STRING_VALUE",
                'x-certificate-check': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/confirmation.funds/oauth2/v2/consents/request-access",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["request-id"] = 'SOME_STRING_VALUE'

            request["signature"] = 'SOME_STRING_VALUE'

            request["tpp-signature-certificate"] = 'SOME_STRING_VALUE'

            request["x-certificate-check"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"applicationId\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/request-access \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'request-id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'signature: SOME_STRING_VALUE' \
              --header 'tpp-signature-certificate: SOME_STRING_VALUE' \
              --header 'x-certificate-check: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"},"payload":{"applicationId":"<ADD STRING VALUE>"}}'
  /consents/info:
    post:
      tags:
        - Consent
      summary: Get consent information.
      description: >
        Retrieves the consent information of a user's consent.


        **Error List**   



        **Code**: 102 - **Description**: You must fill all the required fields
        in the request body.  


        **Code**: CE-30000 - **Description**: Consent Not Found.



        **Sandbox Specific Error List**   



        **Code**: 001 - **Description**: Invalid sandboxId.



        **Code**: 006 - **Description**: Sandbox Not Found



        **Code**: 007 - **Description**: Logged in User Not Found. 
      operationId: Consents_ConsentsInfo
      parameters:
        - name: sandbox_id
          in: header
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
            default: ''
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: Request-Id
          in: header
          description: A guid that uniquely identifies your request
          required: true
          schema:
            type: string
            default: 6E6079FA-F66F-42FF-82B9-17A8C97B7BA9
        - name: Signature
          in: header
          description: Signature (Detached JWS signature)
          required: true
          schema:
            type: string
            default: ''
        - name: TPP-Signature-Certificate
          in: header
          description: TPP-Signature-Certificate (X.509 certificate in .pem format)
          required: true
          schema:
            type: string
            default: ''
        - name: X-Certificate-Check
          in: header
          description: A Boolean to enable or disable the certificate validation
          required: true
          schema:
            type: string
            default: false
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfInfo'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestOfInfo'
        description: ConsentsInfoRequest
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "x-certificate-check:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "tpp-signature-certificate:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "signature:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING
            VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("x-certificate-check", "SOME_STRING_VALUE");

            request.AddHeader("tpp-signature-certificate", "SOME_STRING_VALUE");

            request.AddHeader("signature", "SOME_STRING_VALUE");

            request.AddHeader("request-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING
            VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"consentId\\\":\\\"<ADD STRING VALUE>\\\",\\\"applicationId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"signature\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"tpp-signature-certificate\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-certificate-check\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING
            VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("request-id", "SOME_STRING_VALUE")
              .addHeader("signature", "SOME_STRING_VALUE")
              .addHeader("tpp-signature-certificate", "SOME_STRING_VALUE")
              .addHeader("x-certificate-check", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'x-certificate-check': 'SOME_STRING_VALUE',
                 'tpp-signature-certificate': 'SOME_STRING_VALUE',
                 signature: 'SOME_STRING_VALUE',
                 'request-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' },
                 payload:
                  { userId: '<ADD STRING VALUE>',
                    consentId: '<ADD STRING VALUE>',
                    applicationId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "request-id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "signature: SOME_STRING_VALUE",
                "tpp-signature-certificate: SOME_STRING_VALUE",
                "x-certificate-check: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING
            VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'request-id': "SOME_STRING_VALUE",
                'signature': "SOME_STRING_VALUE",
                'tpp-signature-certificate': "SOME_STRING_VALUE",
                'x-certificate-check': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/confirmation.funds/oauth2/v2/consents/info", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["request-id"] = 'SOME_STRING_VALUE'

            request["signature"] = 'SOME_STRING_VALUE'

            request["tpp-signature-certificate"] = 'SOME_STRING_VALUE'

            request["x-certificate-check"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING
            VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/info \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'request-id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'signature: SOME_STRING_VALUE' \
              --header 'tpp-signature-certificate: SOME_STRING_VALUE' \
              --header 'x-certificate-check: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"},"payload":{"userId":"<ADD STRING VALUE>","consentId":"<ADD STRING VALUE>","applicationId":"<ADD STRING VALUE>"}}'
  /consents/delete:
    post:
      tags:
        - Consent
      summary: Delete consent.
      description: >
        Deletes a user's consent.


        **Error List**   



        **Code**: 102 - **Description**: You must fill all the required fields
        in the request body.       


        **Code**: CE-30000 - **Description**: Consent Not Found.



        **Sandbox Specific Error List**   



        **Code**: 001 - **Description**: Invalid sandboxId.



        **Code**: 004 - **Description**: Cannot Update Sandbox.



        **Code**: 006 - **Description**: Sandbox Not Found



        **Code**: 007 - **Description**: Logged in User Not Found.  
      operationId: Consents_ConsentsDelete
      parameters:
        - name: sandbox_id
          in: header
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
            default: ''
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: Request-Id
          in: header
          description: A guid that uniquely identifies your request
          required: true
          schema:
            type: string
            default: 6E6079FA-F66F-42FF-82B9-17A8C97B7BA9
        - name: Signature
          in: header
          description: Signature (Detached JWS signature)
          required: true
          schema:
            type: string
            default: ''
        - name: TPP-Signature-Certificate
          in: header
          description: TPP-Signature-Certificate (X.509 certificate in .pem format)
          required: true
          schema:
            type: string
            default: ''
        - name: X-Certificate-Check
          in: header
          description: A Boolean to enable or disable the certificate validation
          required: true
          schema:
            type: string
            default: false
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response-of-Boolean'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestOfConsentDelete'
        description: ConsentsDeleteRequest
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "x-certificate-check:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "tpp-signature-certificate:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "signature:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD
            STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("x-certificate-check", "SOME_STRING_VALUE");

            request.AddHeader("tpp-signature-certificate", "SOME_STRING_VALUE");

            request.AddHeader("signature", "SOME_STRING_VALUE");

            request.AddHeader("request-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD
            STRING VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"consentId\\\":\\\"<ADD STRING VALUE>\\\",\\\"tanNumber\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"signature\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"tpp-signature-certificate\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-certificate-check\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD
            STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("request-id", "SOME_STRING_VALUE")
              .addHeader("signature", "SOME_STRING_VALUE")
              .addHeader("tpp-signature-certificate", "SOME_STRING_VALUE")
              .addHeader("x-certificate-check", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'x-certificate-check': 'SOME_STRING_VALUE',
                 'tpp-signature-certificate': 'SOME_STRING_VALUE',
                 signature: 'SOME_STRING_VALUE',
                 'request-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' },
                 payload:
                  { userId: '<ADD STRING VALUE>',
                    consentId: '<ADD STRING VALUE>',
                    tanNumber: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "request-id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "signature: SOME_STRING_VALUE",
                "tpp-signature-certificate: SOME_STRING_VALUE",
                "x-certificate-check: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD
            STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'request-id': "SOME_STRING_VALUE",
                'signature': "SOME_STRING_VALUE",
                'tpp-signature-certificate': "SOME_STRING_VALUE",
                'x-certificate-check': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/confirmation.funds/oauth2/v2/consents/delete", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["request-id"] = 'SOME_STRING_VALUE'

            request["signature"] = 'SOME_STRING_VALUE'

            request["tpp-signature-certificate"] = 'SOME_STRING_VALUE'

            request["x-certificate-check"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"consentId\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD
            STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/consents/delete \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'request-id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'signature: SOME_STRING_VALUE' \
              --header 'tpp-signature-certificate: SOME_STRING_VALUE' \
              --header 'x-certificate-check: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"},"payload":{"userId":"<ADD STRING VALUE>","consentId":"<ADD STRING VALUE>","tanNumber":"<ADD STRING VALUE>"}}'
  /funds-confirmations/check-availability:
    post:
      tags:
        - Confirmation of Funds Service
      summary: Check funds availability.
      description: >
        The availability of funds is determined by providing the account's
        details and the corresponding amount in question.


        **Error List**   



        **Code**: 102 - **Description**: You must fill all the required fields
        in the request body. 



        **Code**: 103 - **Description**: The amount should be a positive number.



        **Code**: 105 - **Description**: Error invalid_request: Header
        'Consent-Id' is missing.



        **Code**: 106 - **Description**: Error access_denied: User does not have
        the specified Consent-Id



        **Code**: 107 - **Description**: Error access_denied: Consent has
        expired.



        **Code**: 108 - **Description**: Error server_error: Unknown Error



        **Code**: 109 - **Description**: Error access_denied: Not valid consent
        status, only 'Authorized' is allowed



        **Code**: 110 - **Description**: User has not given consent for this
        action



        **Code**: 300 - **Description**: Account not found.



        **Sandbox Specific Error List**   



        **Code**: 001 - **Description**: Invalid sandboxId.



        **Code**: 006 - **Description**: Sandbox Not Found



        **Code**: 007 - **Description**: Logged in User Not Found.       
      operationId: Funds_AccountFundsAvailability
      parameters:
        - name: sandbox_id
          in: header
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
            default: ''
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: Request-Id
          in: header
          description: A guid that uniquely identifies your request
          required: true
          schema:
            type: string
            default: A579644C-C273-4EE3-B43A-EEC9C9EB2CE4
        - name: Signature
          in: header
          description: Signature (Detached JWS signature)
          required: true
          schema:
            type: string
            default: ''
        - name: TPP-Signature-Certificate
          in: header
          description: TPP-Signature-Certificate (X.509 certificate in .pem format)
          required: true
          schema:
            type: string
            default: ''
        - name: X-Certificate-Check
          in: header
          description: A Boolean to enable or disable the certificate validation
          required: true
          schema:
            type: string
            default: false
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
        - $ref: '#/components/parameters/Consent-Id-Header-Param'
        - $ref: '#/components/parameters/X-Consent-Check-Header-Param'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfCheckFundAvailability'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestOfCheckFundAvailability'
        description: CheckFundAvailabilityRequest
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "x-consent-check:
            SOME_BOOLEAN_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-certificate-check:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "tpp-signature-certificate:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "signature:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"iban\":\"<ADD STRING
            VALUE>\",\"amount\":{\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\"},\"userId\":\"<ADD STRING
            VALUE>\",\"useOverdraftLimit\":false}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("x-consent-check", "SOME_BOOLEAN_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-certificate-check", "SOME_STRING_VALUE");

            request.AddHeader("tpp-signature-certificate", "SOME_STRING_VALUE");

            request.AddHeader("signature", "SOME_STRING_VALUE");

            request.AddHeader("request-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"iban\":\"<ADD STRING
            VALUE>\",\"amount\":{\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\"},\"userId\":\"<ADD STRING
            VALUE>\",\"useOverdraftLimit\":false}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"amount\\\":{\\\"amount\\\":0,\\\"currency\\\":\\\"<ADD STRING VALUE>\\\"},\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"useOverdraftLimit\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"signature\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"tpp-signature-certificate\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-certificate-check\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-consent-check\", \"SOME_BOOLEAN_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"iban\":\"<ADD STRING
            VALUE>\",\"amount\":{\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\"},\"userId\":\"<ADD STRING
            VALUE>\",\"useOverdraftLimit\":false}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("request-id", "SOME_STRING_VALUE")
              .addHeader("signature", "SOME_STRING_VALUE")
              .addHeader("tpp-signature-certificate", "SOME_STRING_VALUE")
              .addHeader("x-certificate-check", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("x-consent-check", "SOME_BOOLEAN_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'x-consent-check': 'SOME_BOOLEAN_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-certificate-check': 'SOME_STRING_VALUE',
                 'tpp-signature-certificate': 'SOME_STRING_VALUE',
                 signature: 'SOME_STRING_VALUE',
                 'request-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' },
                 payload:
                  { iban: '<ADD STRING VALUE>',
                    amount: { amount: 0, currency: '<ADD STRING VALUE>' },
                    userId: '<ADD STRING VALUE>',
                    useOverdraftLimit: false } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"},\"payload\":{\"iban\":\"<ADD STRING VALUE>\",\"amount\":{\"amount\":0,\"currency\":\"<ADD STRING VALUE>\"},\"userId\":\"<ADD STRING VALUE>\",\"useOverdraftLimit\":false}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "request-id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "signature: SOME_STRING_VALUE",
                "tpp-signature-certificate: SOME_STRING_VALUE",
                "x-certificate-check: SOME_STRING_VALUE",
                "x-consent-check: SOME_BOOLEAN_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"iban\":\"<ADD STRING
            VALUE>\",\"amount\":{\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\"},\"userId\":\"<ADD STRING
            VALUE>\",\"useOverdraftLimit\":false}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'request-id': "SOME_STRING_VALUE",
                'signature': "SOME_STRING_VALUE",
                'tpp-signature-certificate': "SOME_STRING_VALUE",
                'x-certificate-check': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'x-consent-check': "SOME_BOOLEAN_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["request-id"] = 'SOME_STRING_VALUE'

            request["signature"] = 'SOME_STRING_VALUE'

            request["tpp-signature-certificate"] = 'SOME_STRING_VALUE'

            request["x-certificate-check"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["x-consent-check"] = 'SOME_BOOLEAN_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"iban\":\"<ADD STRING
            VALUE>\",\"amount\":{\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\"},\"userId\":\"<ADD STRING
            VALUE>\",\"useOverdraftLimit\":false}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/funds-confirmations/check-availability \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'request-id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'signature: SOME_STRING_VALUE' \
              --header 'tpp-signature-certificate: SOME_STRING_VALUE' \
              --header 'x-certificate-check: SOME_STRING_VALUE' \
              --header 'x-consent-check: SOME_BOOLEAN_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"},"payload":{"iban":"<ADD STRING VALUE>","amount":{"amount":0,"currency":"<ADD STRING VALUE>"},"userId":"<ADD STRING VALUE>","useOverdraftLimit":false}}'
  /sandbox:
    post:
      tags:
        - Sandbox
      summary: Create a sandbox.
      description: >
        A Sandbox with default data is created. Simply call by providing an
        \"id\" as your sandbox id and naming it almost anything you like. 


        **Error List**



        **Code**: 001 - **Description**: Invalid sandboxId.



        **Code**: 002 - **Description**: Sandbox with the same sandboxId already
        exists!
            
            
        **Code**: 003 - **Description**: Cannot Create Sandbox.         
      operationId: Sandbox_CreateSandboxPsd2
      parameters:
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSandbox'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestOfSandbox'
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"sandboxId\":\"<ADD STRING
            VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"sandboxId\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"sandboxId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"sandboxId\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' },
                 payload: { sandboxId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"},\"payload\":{\"sandboxId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"sandboxId\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/confirmation.funds/oauth2/v2/sandbox", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"sandboxId\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"},"payload":{"sandboxId":"<ADD STRING VALUE>"}}'
  '/sandbox/{sandbox_id}':
    get:
      tags:
        - Sandbox
      summary: Export a sandbox.
      description: |
        Export a sandbox

        **Error List**


        **Code**: 001 - **Description**: Invalid sandboxId.


        **Code**: 006 - **Description**: Sandbox Not Found
      operationId: Sandbox_DownloadSandboxPsd2
      parameters:
        - name: sandbox_id
          in: path
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSandbox'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
    put:
      tags:
        - Sandbox
      summary: Import a sandbox.
      description: |
        Import a sandbox      

        **Error List**


        **Code**: 001 - **Description**: Invalid sandboxId.


        **Code**: 004 - **Description**: Cannot Update Sandbox.


        **Code**: 006 - **Description**: Sandbox Not Found
      operationId: Sandbox_UpdateSandboxPsd2
      parameters:
        - name: sandbox_id
          in: path
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfSandbox'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestOfUpdateSandbox'
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"sanboxId\":\"<ADD STRING
            VALUE>\",\"version\":0,\"users\":[{\"accounts\":[{\"account\":{\"accountType\":\"<ADD
            STRING
            VALUE>\",\"overdraftLimit\":0,\"numberOfMandates\":0,\"serialNo\":\"<ADD
            STRING VALUE>\",\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"newMoneyBalance\":0,\"flag\":\"<ADD
            STRING VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false}},\"transactions\":[{\"serialNum\":\"<ADD
            STRING VALUE>\",\"date\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD
            STRING VALUE>\",\"trans\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"amountEquivalent\":0,\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"accountingBalance\":0,\"reference\":\"<ADD STRING
            VALUE>\",\"externalSystem\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"timestamp\":\"<ADD
            STRING VALUE>\"}],\"deferred\":[{\"trnNo\":\"<ADD STRING
            VALUE>\",\"trnId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"cancellationDate\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"totalPayments\":0,\"amount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"transId\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"rowsNum\":0,\"debitAccount\":\"<ADD STRING
            VALUE>\",\"totalAmount\":0,\"creditAccount\":\"<ADD STRING
            VALUE>\",\"details\":[{\"id\":\"<ADD STRING
            VALUE>\",\"field\":\"<ADD STRING VALUE>\",\"value\":\"<ADD STRING
            VALUE>\"}],\"historical\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}],\"history\":{\"master\":{\"originalTotalPayments\":\"<ADD
            STRING VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"},\"execution\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}]},\"future\":[{\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"id\":\"<ADD
            STRING VALUE>\",\"scheduleId\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\",\"errorMessage\":\"<ADD STRING
            VALUE>\"}],\"master\":{\"originalTotalPayments\":\"<ADD STRING
            VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"}}],\"pending\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"rowNumber\":0,\"counter\":0,\"pendingCounter\":0,\"approvedCounter\":0,\"rejectedCounter\":0,\"cancelledCounter\":0,\"id\":\"<ADD
            STRING VALUE>\",\"serviceAudit\":\"<ADD STRING
            VALUE>\",\"initialTimestamp\":\"<ADD STRING
            VALUE>\",\"actionUserId\":\"<ADD STRING
            VALUE>\",\"initialUserId\":\"<ADD STRING
            VALUE>\",\"initialUserAuthorizationLevel\":\"<ADD STRING
            VALUE>\",\"initialUserNumberOfApprovals\":0,\"currentAuthorizationLevel\":\"<ADD
            STRING
            VALUE>\",\"currentNumberOfApprovals\":0,\"serviceAction\":\"<ADD
            STRING VALUE>\",\"debitIBAN\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"summary\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"statusTimestamp\":\"<ADD STRING
            VALUE>\",\"statusUserId\":\"<ADD STRING
            VALUE>\",\"statusVersion\":0,\"isUserInvolved\":false,\"creditIBAN\":\"<ADD
            STRING VALUE>\",\"refNo\":\"<ADD STRING
            VALUE>\",\"tanNumber\":\"<ADD STRING
            VALUE>\",\"executionResult\":{\"exception\":{\"id\":\"<ADD STRING
            VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"},\"messages\":[{\"id\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD
            STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"}],\"executionTime\":0},\"isSmsOtp\":false,\"rejectReason\":\"<ADD
            STRING VALUE>\"}],\"beneficiaries\":[{\"name\":\"<ADD STRING
            VALUE>\",\"order\":\"<ADD STRING
            VALUE>\"}],\"details\":{\"account\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"createDate\":\"<ADD
            STRING VALUE>\",\"lastTransactionDate\":\"<ADD STRING
            VALUE>\",\"interestRate\":0,\"interestAccrued\":0,\"interestPeriod\":\"<ADD
            STRING
            VALUE>\",\"chequeReservation\":0,\"deptReservation\":0,\"overdraftLimit\":0,\"excessLimitAmount\":0,\"availableLimitAmount\":0,\"freeChequeAmnt\":0,\"expirationDate\":\"<ADD
            STRING VALUE>\",\"interestScale\":\"<ADD STRING
            VALUE>\",\"irisAccount\":\"<ADD STRING
            VALUE>\",\"irisBalance\":0,\"accType\":\"<ADD STRING
            VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false},\"newMoneyBalance\":0,\"mandatesNumber\":0},\"rates\":[{\"from\":0,\"to\":0,\"rate\":0}]}],\"userId\":\"<ADD
            STRING VALUE>\",\"mobilePhoneNumber\":\"<ADD STRING
            VALUE>\"}],\"consentApplicationIds\":[\"<ADD STRING
            VALUE>\"],\"consents\":[{\"consentId\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"consentData\":{\"consentId\":\"<ADD STRING
            VALUE>\",\"permissions\":[{\"startDate\":\"<ADD STRING
            VALUE>\",\"endDate\":\"<ADD STRING
            VALUE>\",\"type\":\"Balances\",\"typeInfo\":{\"iban\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"name\":\"<ADD
            STRING VALUE>\"},\"actions\":[\"<ADD STRING
            VALUE>\"]}]},\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD
            STRING VALUE>\",\"created\":\"<ADD STRING
            VALUE>\",\"updated\":\"<ADD STRING
            VALUE>\",\"uses\":0,\"status\":\"AwaitingAuthorization\",\"statusDate\":\"<ADD
            STRING VALUE>\",\"applicationId\":\"<ADD STRING
            VALUE>\",\"sub\":\"<ADD STRING VALUE>\",\"preferredUsername\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\"}]}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"sanboxId\":\"<ADD STRING
            VALUE>\",\"version\":0,\"users\":[{\"accounts\":[{\"account\":{\"accountType\":\"<ADD
            STRING
            VALUE>\",\"overdraftLimit\":0,\"numberOfMandates\":0,\"serialNo\":\"<ADD
            STRING VALUE>\",\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"newMoneyBalance\":0,\"flag\":\"<ADD
            STRING VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false}},\"transactions\":[{\"serialNum\":\"<ADD
            STRING VALUE>\",\"date\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD
            STRING VALUE>\",\"trans\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"amountEquivalent\":0,\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"accountingBalance\":0,\"reference\":\"<ADD STRING
            VALUE>\",\"externalSystem\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"timestamp\":\"<ADD
            STRING VALUE>\"}],\"deferred\":[{\"trnNo\":\"<ADD STRING
            VALUE>\",\"trnId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"cancellationDate\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"totalPayments\":0,\"amount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"transId\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"rowsNum\":0,\"debitAccount\":\"<ADD STRING
            VALUE>\",\"totalAmount\":0,\"creditAccount\":\"<ADD STRING
            VALUE>\",\"details\":[{\"id\":\"<ADD STRING
            VALUE>\",\"field\":\"<ADD STRING VALUE>\",\"value\":\"<ADD STRING
            VALUE>\"}],\"historical\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}],\"history\":{\"master\":{\"originalTotalPayments\":\"<ADD
            STRING VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"},\"execution\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}]},\"future\":[{\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"id\":\"<ADD
            STRING VALUE>\",\"scheduleId\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\",\"errorMessage\":\"<ADD STRING
            VALUE>\"}],\"master\":{\"originalTotalPayments\":\"<ADD STRING
            VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"}}],\"pending\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"rowNumber\":0,\"counter\":0,\"pendingCounter\":0,\"approvedCounter\":0,\"rejectedCounter\":0,\"cancelledCounter\":0,\"id\":\"<ADD
            STRING VALUE>\",\"serviceAudit\":\"<ADD STRING
            VALUE>\",\"initialTimestamp\":\"<ADD STRING
            VALUE>\",\"actionUserId\":\"<ADD STRING
            VALUE>\",\"initialUserId\":\"<ADD STRING
            VALUE>\",\"initialUserAuthorizationLevel\":\"<ADD STRING
            VALUE>\",\"initialUserNumberOfApprovals\":0,\"currentAuthorizationLevel\":\"<ADD
            STRING
            VALUE>\",\"currentNumberOfApprovals\":0,\"serviceAction\":\"<ADD
            STRING VALUE>\",\"debitIBAN\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"summary\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"statusTimestamp\":\"<ADD STRING
            VALUE>\",\"statusUserId\":\"<ADD STRING
            VALUE>\",\"statusVersion\":0,\"isUserInvolved\":false,\"creditIBAN\":\"<ADD
            STRING VALUE>\",\"refNo\":\"<ADD STRING
            VALUE>\",\"tanNumber\":\"<ADD STRING
            VALUE>\",\"executionResult\":{\"exception\":{\"id\":\"<ADD STRING
            VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"},\"messages\":[{\"id\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD
            STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"}],\"executionTime\":0},\"isSmsOtp\":false,\"rejectReason\":\"<ADD
            STRING VALUE>\"}],\"beneficiaries\":[{\"name\":\"<ADD STRING
            VALUE>\",\"order\":\"<ADD STRING
            VALUE>\"}],\"details\":{\"account\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"createDate\":\"<ADD
            STRING VALUE>\",\"lastTransactionDate\":\"<ADD STRING
            VALUE>\",\"interestRate\":0,\"interestAccrued\":0,\"interestPeriod\":\"<ADD
            STRING
            VALUE>\",\"chequeReservation\":0,\"deptReservation\":0,\"overdraftLimit\":0,\"excessLimitAmount\":0,\"availableLimitAmount\":0,\"freeChequeAmnt\":0,\"expirationDate\":\"<ADD
            STRING VALUE>\",\"interestScale\":\"<ADD STRING
            VALUE>\",\"irisAccount\":\"<ADD STRING
            VALUE>\",\"irisBalance\":0,\"accType\":\"<ADD STRING
            VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false},\"newMoneyBalance\":0,\"mandatesNumber\":0},\"rates\":[{\"from\":0,\"to\":0,\"rate\":0}]}],\"userId\":\"<ADD
            STRING VALUE>\",\"mobilePhoneNumber\":\"<ADD STRING
            VALUE>\"}],\"consentApplicationIds\":[\"<ADD STRING
            VALUE>\"],\"consents\":[{\"consentId\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"consentData\":{\"consentId\":\"<ADD STRING
            VALUE>\",\"permissions\":[{\"startDate\":\"<ADD STRING
            VALUE>\",\"endDate\":\"<ADD STRING
            VALUE>\",\"type\":\"Balances\",\"typeInfo\":{\"iban\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"name\":\"<ADD
            STRING VALUE>\"},\"actions\":[\"<ADD STRING
            VALUE>\"]}]},\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD
            STRING VALUE>\",\"created\":\"<ADD STRING
            VALUE>\",\"updated\":\"<ADD STRING
            VALUE>\",\"uses\":0,\"status\":\"AwaitingAuthorization\",\"statusDate\":\"<ADD
            STRING VALUE>\",\"applicationId\":\"<ADD STRING
            VALUE>\",\"sub\":\"<ADD STRING VALUE>\",\"preferredUsername\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\"}]}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"sanboxId\\\":\\\"<ADD STRING VALUE>\\\",\\\"version\\\":0,\\\"users\\\":[{\\\"accounts\\\":[{\\\"account\\\":{\\\"accountType\\\":\\\"<ADD STRING VALUE>\\\",\\\"overdraftLimit\\\":0,\\\"numberOfMandates\\\":0,\\\"serialNo\\\":\\\"<ADD STRING VALUE>\\\",\\\"account\\\":\\\"<ADD STRING VALUE>\\\",\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"currency\\\":\\\"<ADD STRING VALUE>\\\",\\\"alias\\\":\\\"<ADD STRING VALUE>\\\",\\\"product\\\":\\\"<ADD STRING VALUE>\\\",\\\"ledgerBalance\\\":0,\\\"availableBalance\\\":0,\\\"newMoneyBalance\\\":0,\\\"flag\\\":\\\"<ADD STRING VALUE>\\\",\\\"allowConnect\\\":\\\"<ADD STRING VALUE>\\\",\\\"allowDebit\\\":\\\"<ADD STRING VALUE>\\\",\\\"allowCredit\\\":\\\"<ADD STRING VALUE>\\\",\\\"indicators\\\":\\\"<ADD STRING VALUE>\\\",\\\"ledgerAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"isOwnAccount\\\":false,\\\"features\\\":{\\\"statement\\\":false,\\\"otherInfo\\\":false,\\\"mandates\\\":false,\\\"cheques\\\":false,\\\"transfer\\\":false,\\\"rates\\\":false,\\\"beneficiaries\\\":false}},\\\"transactions\\\":[{\\\"serialNum\\\":\\\"<ADD STRING VALUE>\\\",\\\"date\\\":\\\"<ADD STRING VALUE>\\\",\\\"branch\\\":\\\"<ADD STRING VALUE>\\\",\\\"trans\\\":\\\"<ADD STRING VALUE>\\\",\\\"amount\\\":0,\\\"currency\\\":\\\"<ADD STRING VALUE>\\\",\\\"amountEquivalent\\\":0,\\\"creditDebit\\\":\\\"<ADD STRING VALUE>\\\",\\\"valeur\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountingBalance\\\":0,\\\"reference\\\":\\\"<ADD STRING VALUE>\\\",\\\"externalSystem\\\":\\\"<ADD STRING VALUE>\\\",\\\"relatedAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"relatedName\\\":\\\"<ADD STRING VALUE>\\\",\\\"timestamp\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"deferred\\\":[{\\\"trnNo\\\":\\\"<ADD STRING VALUE>\\\",\\\"trnId\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"createdDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"cancellationDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"frequency\\\":0,\\\"totalPayments\\\":0,\\\"amount\\\":0,\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"transId\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"rowsNum\\\":0,\\\"debitAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"totalAmount\\\":0,\\\"creditAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"details\\\":[{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"field\\\":\\\"<ADD STRING VALUE>\\\",\\\"value\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"historical\\\":[{\\\"errorMessage\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionStatus\\\":\\\"<ADD STRING VALUE>\\\",\\\"externalId\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"history\\\":{\\\"master\\\":{\\\"originalTotalPayments\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionName\\\":\\\"<ADD STRING VALUE>\\\",\\\"deletionUserId\\\":\\\"<ADD STRING VALUE>\\\",\\\"frequency\\\":\\\"<ADD STRING VALUE>\\\",\\\"originalExecutionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"deletionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"totalPayments\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionDate\\\":\\\"<ADD STRING VALUE>\\\"},\\\"execution\\\":[{\\\"errorMessage\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionStatus\\\":\\\"<ADD STRING VALUE>\\\",\\\"externalId\\\":\\\"<ADD STRING VALUE>\\\"}]},\\\"future\\\":[{\\\"executionTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionStatus\\\":\\\"<ADD STRING VALUE>\\\",\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"scheduleId\\\":\\\"<ADD STRING VALUE>\\\",\\\"externalId\\\":\\\"<ADD STRING VALUE>\\\",\\\"errorMessage\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"master\\\":{\\\"originalTotalPayments\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionName\\\":\\\"<ADD STRING VALUE>\\\",\\\"deletionUserId\\\":\\\"<ADD STRING VALUE>\\\",\\\"frequency\\\":\\\"<ADD STRING VALUE>\\\",\\\"originalExecutionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"deletionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"totalPayments\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionDate\\\":\\\"<ADD STRING VALUE>\\\"}}],\\\"pending\\\":[{\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"rowNumber\\\":0,\\\"counter\\\":0,\\\"pendingCounter\\\":0,\\\"approvedCounter\\\":0,\\\"rejectedCounter\\\":0,\\\"cancelledCounter\\\":0,\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"serviceAudit\\\":\\\"<ADD STRING VALUE>\\\",\\\"initialTimestamp\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionUserId\\\":\\\"<ADD STRING VALUE>\\\",\\\"initialUserId\\\":\\\"<ADD STRING VALUE>\\\",\\\"initialUserAuthorizationLevel\\\":\\\"<ADD STRING VALUE>\\\",\\\"initialUserNumberOfApprovals\\\":0,\\\"currentAuthorizationLevel\\\":\\\"<ADD STRING VALUE>\\\",\\\"currentNumberOfApprovals\\\":0,\\\"serviceAction\\\":\\\"<ADD STRING VALUE>\\\",\\\"debitIBAN\\\":\\\"<ADD STRING VALUE>\\\",\\\"amount\\\":0,\\\"summary\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"statusTimestamp\\\":\\\"<ADD STRING VALUE>\\\",\\\"statusUserId\\\":\\\"<ADD STRING VALUE>\\\",\\\"statusVersion\\\":0,\\\"isUserInvolved\\\":false,\\\"creditIBAN\\\":\\\"<ADD STRING VALUE>\\\",\\\"refNo\\\":\\\"<ADD STRING VALUE>\\\",\\\"tanNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionResult\\\":{\\\"exception\\\":{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"desc\\\":\\\"<ADD STRING VALUE>\\\",\\\"sev\\\":\\\"Warning\\\",\\\"cat\\\":\\\"Business\\\"},\\\"messages\\\":[{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"desc\\\":\\\"<ADD STRING VALUE>\\\",\\\"sev\\\":\\\"Warning\\\",\\\"cat\\\":\\\"Business\\\"}],\\\"executionTime\\\":0},\\\"isSmsOtp\\\":false,\\\"rejectReason\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"beneficiaries\\\":[{\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"order\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"details\\\":{\\\"account\\\":\\\"<ADD STRING VALUE>\\\",\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountType\\\":\\\"<ADD STRING VALUE>\\\",\\\"currency\\\":\\\"<ADD STRING VALUE>\\\",\\\"alias\\\":\\\"<ADD STRING VALUE>\\\",\\\"product\\\":\\\"<ADD STRING VALUE>\\\",\\\"ledgerBalance\\\":0,\\\"availableBalance\\\":0,\\\"createDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"lastTransactionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"interestRate\\\":0,\\\"interestAccrued\\\":0,\\\"interestPeriod\\\":\\\"<ADD STRING VALUE>\\\",\\\"chequeReservation\\\":0,\\\"deptReservation\\\":0,\\\"overdraftLimit\\\":0,\\\"excessLimitAmount\\\":0,\\\"availableLimitAmount\\\":0,\\\"freeChequeAmnt\\\":0,\\\"expirationDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"interestScale\\\":\\\"<ADD STRING VALUE>\\\",\\\"irisAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"irisBalance\\\":0,\\\"accType\\\":\\\"<ADD STRING VALUE>\\\",\\\"allowConnect\\\":\\\"<ADD STRING VALUE>\\\",\\\"allowDebit\\\":\\\"<ADD STRING VALUE>\\\",\\\"allowCredit\\\":\\\"<ADD STRING VALUE>\\\",\\\"indicators\\\":\\\"<ADD STRING VALUE>\\\",\\\"ledgerAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"isOwnAccount\\\":false,\\\"features\\\":{\\\"statement\\\":false,\\\"otherInfo\\\":false,\\\"mandates\\\":false,\\\"cheques\\\":false,\\\"transfer\\\":false,\\\"rates\\\":false,\\\"beneficiaries\\\":false},\\\"newMoneyBalance\\\":0,\\\"mandatesNumber\\\":0},\\\"rates\\\":[{\\\"from\\\":0,\\\"to\\\":0,\\\"rate\\\":0}]}],\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"mobilePhoneNumber\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"consentApplicationIds\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"consents\\\":[{\\\"consentId\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"consentData\\\":{\\\"consentId\\\":\\\"<ADD STRING VALUE>\\\",\\\"permissions\\\":[{\\\"startDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"endDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"type\\\":\\\"Balances\\\",\\\"typeInfo\\\":{\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\"},\\\"actions\\\":[\\\"<ADD STRING VALUE>\\\"]}]},\\\"startDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"endDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"created\\\":\\\"<ADD STRING VALUE>\\\",\\\"updated\\\":\\\"<ADD STRING VALUE>\\\",\\\"uses\\\":0,\\\"status\\\":\\\"AwaitingAuthorization\\\",\\\"statusDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"applicationId\\\":\\\"<ADD STRING VALUE>\\\",\\\"sub\\\":\\\"<ADD STRING VALUE>\\\",\\\"preferredUsername\\\":\\\"<ADD STRING VALUE>\\\",\\\"providerId\\\":\\\"<ADD STRING VALUE>\\\"}]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"sanboxId\":\"<ADD STRING
            VALUE>\",\"version\":0,\"users\":[{\"accounts\":[{\"account\":{\"accountType\":\"<ADD
            STRING
            VALUE>\",\"overdraftLimit\":0,\"numberOfMandates\":0,\"serialNo\":\"<ADD
            STRING VALUE>\",\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"newMoneyBalance\":0,\"flag\":\"<ADD
            STRING VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false}},\"transactions\":[{\"serialNum\":\"<ADD
            STRING VALUE>\",\"date\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD
            STRING VALUE>\",\"trans\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"amountEquivalent\":0,\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"accountingBalance\":0,\"reference\":\"<ADD STRING
            VALUE>\",\"externalSystem\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"timestamp\":\"<ADD
            STRING VALUE>\"}],\"deferred\":[{\"trnNo\":\"<ADD STRING
            VALUE>\",\"trnId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"cancellationDate\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"totalPayments\":0,\"amount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"transId\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"rowsNum\":0,\"debitAccount\":\"<ADD STRING
            VALUE>\",\"totalAmount\":0,\"creditAccount\":\"<ADD STRING
            VALUE>\",\"details\":[{\"id\":\"<ADD STRING
            VALUE>\",\"field\":\"<ADD STRING VALUE>\",\"value\":\"<ADD STRING
            VALUE>\"}],\"historical\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}],\"history\":{\"master\":{\"originalTotalPayments\":\"<ADD
            STRING VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"},\"execution\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}]},\"future\":[{\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"id\":\"<ADD
            STRING VALUE>\",\"scheduleId\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\",\"errorMessage\":\"<ADD STRING
            VALUE>\"}],\"master\":{\"originalTotalPayments\":\"<ADD STRING
            VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"}}],\"pending\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"rowNumber\":0,\"counter\":0,\"pendingCounter\":0,\"approvedCounter\":0,\"rejectedCounter\":0,\"cancelledCounter\":0,\"id\":\"<ADD
            STRING VALUE>\",\"serviceAudit\":\"<ADD STRING
            VALUE>\",\"initialTimestamp\":\"<ADD STRING
            VALUE>\",\"actionUserId\":\"<ADD STRING
            VALUE>\",\"initialUserId\":\"<ADD STRING
            VALUE>\",\"initialUserAuthorizationLevel\":\"<ADD STRING
            VALUE>\",\"initialUserNumberOfApprovals\":0,\"currentAuthorizationLevel\":\"<ADD
            STRING
            VALUE>\",\"currentNumberOfApprovals\":0,\"serviceAction\":\"<ADD
            STRING VALUE>\",\"debitIBAN\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"summary\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"statusTimestamp\":\"<ADD STRING
            VALUE>\",\"statusUserId\":\"<ADD STRING
            VALUE>\",\"statusVersion\":0,\"isUserInvolved\":false,\"creditIBAN\":\"<ADD
            STRING VALUE>\",\"refNo\":\"<ADD STRING
            VALUE>\",\"tanNumber\":\"<ADD STRING
            VALUE>\",\"executionResult\":{\"exception\":{\"id\":\"<ADD STRING
            VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"},\"messages\":[{\"id\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD
            STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"}],\"executionTime\":0},\"isSmsOtp\":false,\"rejectReason\":\"<ADD
            STRING VALUE>\"}],\"beneficiaries\":[{\"name\":\"<ADD STRING
            VALUE>\",\"order\":\"<ADD STRING
            VALUE>\"}],\"details\":{\"account\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"createDate\":\"<ADD
            STRING VALUE>\",\"lastTransactionDate\":\"<ADD STRING
            VALUE>\",\"interestRate\":0,\"interestAccrued\":0,\"interestPeriod\":\"<ADD
            STRING
            VALUE>\",\"chequeReservation\":0,\"deptReservation\":0,\"overdraftLimit\":0,\"excessLimitAmount\":0,\"availableLimitAmount\":0,\"freeChequeAmnt\":0,\"expirationDate\":\"<ADD
            STRING VALUE>\",\"interestScale\":\"<ADD STRING
            VALUE>\",\"irisAccount\":\"<ADD STRING
            VALUE>\",\"irisBalance\":0,\"accType\":\"<ADD STRING
            VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false},\"newMoneyBalance\":0,\"mandatesNumber\":0},\"rates\":[{\"from\":0,\"to\":0,\"rate\":0}]}],\"userId\":\"<ADD
            STRING VALUE>\",\"mobilePhoneNumber\":\"<ADD STRING
            VALUE>\"}],\"consentApplicationIds\":[\"<ADD STRING
            VALUE>\"],\"consents\":[{\"consentId\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"consentData\":{\"consentId\":\"<ADD STRING
            VALUE>\",\"permissions\":[{\"startDate\":\"<ADD STRING
            VALUE>\",\"endDate\":\"<ADD STRING
            VALUE>\",\"type\":\"Balances\",\"typeInfo\":{\"iban\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"name\":\"<ADD
            STRING VALUE>\"},\"actions\":[\"<ADD STRING
            VALUE>\"]}]},\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD
            STRING VALUE>\",\"created\":\"<ADD STRING
            VALUE>\",\"updated\":\"<ADD STRING
            VALUE>\",\"uses\":0,\"status\":\"AwaitingAuthorization\",\"statusDate\":\"<ADD
            STRING VALUE>\",\"applicationId\":\"<ADD STRING
            VALUE>\",\"sub\":\"<ADD STRING VALUE>\",\"preferredUsername\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\"}]}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' },
                 payload:
                  { sanboxId: '<ADD STRING VALUE>',
                    version: 0,
                    users:
                     [ { accounts:
                          [ { account:
                               { accountType: '<ADD STRING VALUE>',
                                 overdraftLimit: 0,
                                 numberOfMandates: 0,
                                 serialNo: '<ADD STRING VALUE>',
                                 account: '<ADD STRING VALUE>',
                                 iban: '<ADD STRING VALUE>',
                                 currency: '<ADD STRING VALUE>',
                                 alias: '<ADD STRING VALUE>',
                                 product: '<ADD STRING VALUE>',
                                 ledgerBalance: 0,
                                 availableBalance: 0,
                                 newMoneyBalance: 0,
                                 flag: '<ADD STRING VALUE>',
                                 allowConnect: '<ADD STRING VALUE>',
                                 allowDebit: '<ADD STRING VALUE>',
                                 allowCredit: '<ADD STRING VALUE>',
                                 indicators: '<ADD STRING VALUE>',
                                 ledgerAccount: '<ADD STRING VALUE>',
                                 isOwnAccount: false,
                                 features:
                                  { statement: false,
                                    otherInfo: false,
                                    mandates: false,
                                    cheques: false,
                                    transfer: false,
                                    rates: false,
                                    beneficiaries: false } },
                              transactions:
                               [ { serialNum: '<ADD STRING VALUE>',
                                   date: '<ADD STRING VALUE>',
                                   branch: '<ADD STRING VALUE>',
                                   trans: '<ADD STRING VALUE>',
                                   amount: 0,
                                   currency: '<ADD STRING VALUE>',
                                   amountEquivalent: 0,
                                   creditDebit: '<ADD STRING VALUE>',
                                   valeur: '<ADD STRING VALUE>',
                                   description: '<ADD STRING VALUE>',
                                   accountingBalance: 0,
                                   reference: '<ADD STRING VALUE>',
                                   externalSystem: '<ADD STRING VALUE>',
                                   relatedAccount: '<ADD STRING VALUE>',
                                   relatedName: '<ADD STRING VALUE>',
                                   timestamp: '<ADD STRING VALUE>' } ],
                              deferred:
                               [ { trnNo: '<ADD STRING VALUE>',
                                   trnId: '<ADD STRING VALUE>',
                                   name: '<ADD STRING VALUE>',
                                   description: '<ADD STRING VALUE>',
                                   createdDate: '<ADD STRING VALUE>',
                                   executionDate: '<ADD STRING VALUE>',
                                   cancellationDate: '<ADD STRING VALUE>',
                                   frequency: 0,
                                   totalPayments: 0,
                                   amount: 0,
                                   status: '<ADD STRING VALUE>',
                                   transId: '<ADD STRING VALUE>',
                                   channel: '<ADD STRING VALUE>',
                                   rowsNum: 0,
                                   debitAccount: '<ADD STRING VALUE>',
                                   totalAmount: 0,
                                   creditAccount: '<ADD STRING VALUE>',
                                   details:
                                    [ { id: '<ADD STRING VALUE>',
                                        field: '<ADD STRING VALUE>',
                                        value: '<ADD STRING VALUE>' } ],
                                   historical:
                                    [ { errorMessage: '<ADD STRING VALUE>',
                                        executionTime: '<ADD STRING VALUE>',
                                        executionStatus: '<ADD STRING VALUE>',
                                        externalId: '<ADD STRING VALUE>' } ],
                                   history:
                                    { master:
                                       { originalTotalPayments: '<ADD STRING VALUE>',
                                         transactionName: '<ADD STRING VALUE>',
                                         deletionUserId: '<ADD STRING VALUE>',
                                         frequency: '<ADD STRING VALUE>',
                                         originalExecutionDate: '<ADD STRING VALUE>',
                                         name: '<ADD STRING VALUE>',
                                         deletionDate: '<ADD STRING VALUE>',
                                         totalPayments: '<ADD STRING VALUE>',
                                         status: '<ADD STRING VALUE>',
                                         executionDate: '<ADD STRING VALUE>' },
                                      execution:
                                       [ { errorMessage: '<ADD STRING VALUE>',
                                           executionTime: '<ADD STRING VALUE>',
                                           executionStatus: '<ADD STRING VALUE>',
                                           externalId: '<ADD STRING VALUE>' } ] },
                                   future:
                                    [ { executionTime: '<ADD STRING VALUE>',
                                        executionStatus: '<ADD STRING VALUE>',
                                        id: '<ADD STRING VALUE>',
                                        scheduleId: '<ADD STRING VALUE>',
                                        externalId: '<ADD STRING VALUE>',
                                        errorMessage: '<ADD STRING VALUE>' } ],
                                   master:
                                    { originalTotalPayments: '<ADD STRING VALUE>',
                                      transactionName: '<ADD STRING VALUE>',
                                      deletionUserId: '<ADD STRING VALUE>',
                                      frequency: '<ADD STRING VALUE>',
                                      originalExecutionDate: '<ADD STRING VALUE>',
                                      name: '<ADD STRING VALUE>',
                                      deletionDate: '<ADD STRING VALUE>',
                                      totalPayments: '<ADD STRING VALUE>',
                                      status: '<ADD STRING VALUE>',
                                      executionDate: '<ADD STRING VALUE>' } } ],
                              pending:
                               [ { userId: '<ADD STRING VALUE>',
                                   rowNumber: 0,
                                   counter: 0,
                                   pendingCounter: 0,
                                   approvedCounter: 0,
                                   rejectedCounter: 0,
                                   cancelledCounter: 0,
                                   id: '<ADD STRING VALUE>',
                                   serviceAudit: '<ADD STRING VALUE>',
                                   initialTimestamp: '<ADD STRING VALUE>',
                                   actionUserId: '<ADD STRING VALUE>',
                                   initialUserId: '<ADD STRING VALUE>',
                                   initialUserAuthorizationLevel: '<ADD STRING VALUE>',
                                   initialUserNumberOfApprovals: 0,
                                   currentAuthorizationLevel: '<ADD STRING VALUE>',
                                   currentNumberOfApprovals: 0,
                                   serviceAction: '<ADD STRING VALUE>',
                                   debitIBAN: '<ADD STRING VALUE>',
                                   amount: 0,
                                   summary: '<ADD STRING VALUE>',
                                   status: '<ADD STRING VALUE>',
                                   statusTimestamp: '<ADD STRING VALUE>',
                                   statusUserId: '<ADD STRING VALUE>',
                                   statusVersion: 0,
                                   isUserInvolved: false,
                                   creditIBAN: '<ADD STRING VALUE>',
                                   refNo: '<ADD STRING VALUE>',
                                   tanNumber: '<ADD STRING VALUE>',
                                   executionResult:
                                    { exception:
                                       { id: '<ADD STRING VALUE>',
                                         code: '<ADD STRING VALUE>',
                                         desc: '<ADD STRING VALUE>',
                                         sev: 'Warning',
                                         cat: 'Business' },
                                      messages:
                                       [ { id: '<ADD STRING VALUE>',
                                           code: '<ADD STRING VALUE>',
                                           desc: '<ADD STRING VALUE>',
                                           sev: 'Warning',
                                           cat: 'Business' } ],
                                      executionTime: 0 },
                                   isSmsOtp: false,
                                   rejectReason: '<ADD STRING VALUE>' } ],
                              beneficiaries:
                               [ { name: '<ADD STRING VALUE>', order: '<ADD STRING VALUE>' } ],
                              details:
                               { account: '<ADD STRING VALUE>',
                                 iban: '<ADD STRING VALUE>',
                                 accountType: '<ADD STRING VALUE>',
                                 currency: '<ADD STRING VALUE>',
                                 alias: '<ADD STRING VALUE>',
                                 product: '<ADD STRING VALUE>',
                                 ledgerBalance: 0,
                                 availableBalance: 0,
                                 createDate: '<ADD STRING VALUE>',
                                 lastTransactionDate: '<ADD STRING VALUE>',
                                 interestRate: 0,
                                 interestAccrued: 0,
                                 interestPeriod: '<ADD STRING VALUE>',
                                 chequeReservation: 0,
                                 deptReservation: 0,
                                 overdraftLimit: 0,
                                 excessLimitAmount: 0,
                                 availableLimitAmount: 0,
                                 freeChequeAmnt: 0,
                                 expirationDate: '<ADD STRING VALUE>',
                                 interestScale: '<ADD STRING VALUE>',
                                 irisAccount: '<ADD STRING VALUE>',
                                 irisBalance: 0,
                                 accType: '<ADD STRING VALUE>',
                                 allowConnect: '<ADD STRING VALUE>',
                                 allowDebit: '<ADD STRING VALUE>',
                                 allowCredit: '<ADD STRING VALUE>',
                                 indicators: '<ADD STRING VALUE>',
                                 ledgerAccount: '<ADD STRING VALUE>',
                                 isOwnAccount: false,
                                 features:
                                  { statement: false,
                                    otherInfo: false,
                                    mandates: false,
                                    cheques: false,
                                    transfer: false,
                                    rates: false,
                                    beneficiaries: false },
                                 newMoneyBalance: 0,
                                 mandatesNumber: 0 },
                              rates: [ { from: 0, to: 0, rate: 0 } ] } ],
                         userId: '<ADD STRING VALUE>',
                         mobilePhoneNumber: '<ADD STRING VALUE>' } ],
                    consentApplicationIds: [ '<ADD STRING VALUE>' ],
                    consents:
                     [ { consentId: '<ADD STRING VALUE>',
                         name: '<ADD STRING VALUE>',
                         consentData:
                          { consentId: '<ADD STRING VALUE>',
                            permissions:
                             [ { startDate: '<ADD STRING VALUE>',
                                 endDate: '<ADD STRING VALUE>',
                                 type: 'Balances',
                                 typeInfo:
                                  { iban: '<ADD STRING VALUE>',
                                    accountNumber: '<ADD STRING VALUE>',
                                    name: '<ADD STRING VALUE>' },
                                 actions: [ '<ADD STRING VALUE>' ] } ] },
                         startDate: '<ADD STRING VALUE>',
                         endDate: '<ADD STRING VALUE>',
                         created: '<ADD STRING VALUE>',
                         updated: '<ADD STRING VALUE>',
                         uses: 0,
                         status: 'AwaitingAuthorization',
                         statusDate: '<ADD STRING VALUE>',
                         applicationId: '<ADD STRING VALUE>',
                         sub: '<ADD STRING VALUE>',
                         preferredUsername: '<ADD STRING VALUE>',
                         providerId: '<ADD STRING VALUE>' } ] } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"},\"payload\":{\"sanboxId\":\"<ADD STRING VALUE>\",\"version\":0,\"users\":[{\"accounts\":[{\"account\":{\"accountType\":\"<ADD STRING VALUE>\",\"overdraftLimit\":0,\"numberOfMandates\":0,\"serialNo\":\"<ADD STRING VALUE>\",\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD STRING VALUE>\",\"product\":\"<ADD STRING VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"newMoneyBalance\":0,\"flag\":\"<ADD STRING VALUE>\",\"allowConnect\":\"<ADD STRING VALUE>\",\"allowDebit\":\"<ADD STRING VALUE>\",\"allowCredit\":\"<ADD STRING VALUE>\",\"indicators\":\"<ADD STRING VALUE>\",\"ledgerAccount\":\"<ADD STRING VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false}},\"transactions\":[{\"serialNum\":\"<ADD STRING VALUE>\",\"date\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD STRING VALUE>\",\"trans\":\"<ADD STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING VALUE>\",\"amountEquivalent\":0,\"creditDebit\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"accountingBalance\":0,\"reference\":\"<ADD STRING VALUE>\",\"externalSystem\":\"<ADD STRING VALUE>\",\"relatedAccount\":\"<ADD STRING VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"timestamp\":\"<ADD STRING VALUE>\"}],\"deferred\":[{\"trnNo\":\"<ADD STRING VALUE>\",\"trnId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"createdDate\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD STRING VALUE>\",\"cancellationDate\":\"<ADD STRING VALUE>\",\"frequency\":0,\"totalPayments\":0,\"amount\":0,\"status\":\"<ADD STRING VALUE>\",\"transId\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"rowsNum\":0,\"debitAccount\":\"<ADD STRING VALUE>\",\"totalAmount\":0,\"creditAccount\":\"<ADD STRING VALUE>\",\"details\":[{\"id\":\"<ADD STRING VALUE>\",\"field\":\"<ADD STRING VALUE>\",\"value\":\"<ADD STRING VALUE>\"}],\"historical\":[{\"errorMessage\":\"<ADD STRING VALUE>\",\"executionTime\":\"<ADD STRING VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"externalId\":\"<ADD STRING VALUE>\"}],\"history\":{\"master\":{\"originalTotalPayments\":\"<ADD STRING VALUE>\",\"transactionName\":\"<ADD STRING VALUE>\",\"deletionUserId\":\"<ADD STRING VALUE>\",\"frequency\":\"<ADD STRING VALUE>\",\"originalExecutionDate\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD STRING VALUE>\",\"totalPayments\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD STRING VALUE>\"},\"execution\":[{\"errorMessage\":\"<ADD STRING VALUE>\",\"executionTime\":\"<ADD STRING VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"externalId\":\"<ADD STRING VALUE>\"}]},\"future\":[{\"executionTime\":\"<ADD STRING VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"id\":\"<ADD STRING VALUE>\",\"scheduleId\":\"<ADD STRING VALUE>\",\"externalId\":\"<ADD STRING VALUE>\",\"errorMessage\":\"<ADD STRING VALUE>\"}],\"master\":{\"originalTotalPayments\":\"<ADD STRING VALUE>\",\"transactionName\":\"<ADD STRING VALUE>\",\"deletionUserId\":\"<ADD STRING VALUE>\",\"frequency\":\"<ADD STRING VALUE>\",\"originalExecutionDate\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD STRING VALUE>\",\"totalPayments\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD STRING VALUE>\"}}],\"pending\":[{\"userId\":\"<ADD STRING VALUE>\",\"rowNumber\":0,\"counter\":0,\"pendingCounter\":0,\"approvedCounter\":0,\"rejectedCounter\":0,\"cancelledCounter\":0,\"id\":\"<ADD STRING VALUE>\",\"serviceAudit\":\"<ADD STRING VALUE>\",\"initialTimestamp\":\"<ADD STRING VALUE>\",\"actionUserId\":\"<ADD STRING VALUE>\",\"initialUserId\":\"<ADD STRING VALUE>\",\"initialUserAuthorizationLevel\":\"<ADD STRING VALUE>\",\"initialUserNumberOfApprovals\":0,\"currentAuthorizationLevel\":\"<ADD STRING VALUE>\",\"currentNumberOfApprovals\":0,\"serviceAction\":\"<ADD STRING VALUE>\",\"debitIBAN\":\"<ADD STRING VALUE>\",\"amount\":0,\"summary\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"statusTimestamp\":\"<ADD STRING VALUE>\",\"statusUserId\":\"<ADD STRING VALUE>\",\"statusVersion\":0,\"isUserInvolved\":false,\"creditIBAN\":\"<ADD STRING VALUE>\",\"refNo\":\"<ADD STRING VALUE>\",\"tanNumber\":\"<ADD STRING VALUE>\",\"executionResult\":{\"exception\":{\"id\":\"<ADD STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"},\"messages\":[{\"id\":\"<ADD STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"}],\"executionTime\":0},\"isSmsOtp\":false,\"rejectReason\":\"<ADD STRING VALUE>\"}],\"beneficiaries\":[{\"name\":\"<ADD STRING VALUE>\",\"order\":\"<ADD STRING VALUE>\"}],\"details\":{\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD STRING VALUE>\",\"product\":\"<ADD STRING VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"createDate\":\"<ADD STRING VALUE>\",\"lastTransactionDate\":\"<ADD STRING VALUE>\",\"interestRate\":0,\"interestAccrued\":0,\"interestPeriod\":\"<ADD STRING VALUE>\",\"chequeReservation\":0,\"deptReservation\":0,\"overdraftLimit\":0,\"excessLimitAmount\":0,\"availableLimitAmount\":0,\"freeChequeAmnt\":0,\"expirationDate\":\"<ADD STRING VALUE>\",\"interestScale\":\"<ADD STRING VALUE>\",\"irisAccount\":\"<ADD STRING VALUE>\",\"irisBalance\":0,\"accType\":\"<ADD STRING VALUE>\",\"allowConnect\":\"<ADD STRING VALUE>\",\"allowDebit\":\"<ADD STRING VALUE>\",\"allowCredit\":\"<ADD STRING VALUE>\",\"indicators\":\"<ADD STRING VALUE>\",\"ledgerAccount\":\"<ADD STRING VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false},\"newMoneyBalance\":0,\"mandatesNumber\":0},\"rates\":[{\"from\":0,\"to\":0,\"rate\":0}]}],\"userId\":\"<ADD STRING VALUE>\",\"mobilePhoneNumber\":\"<ADD STRING VALUE>\"}],\"consentApplicationIds\":[\"<ADD STRING VALUE>\"],\"consents\":[{\"consentId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"consentData\":{\"consentId\":\"<ADD STRING VALUE>\",\"permissions\":[{\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD STRING VALUE>\",\"type\":\"Balances\",\"typeInfo\":{\"iban\":\"<ADD STRING VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\"},\"actions\":[\"<ADD STRING VALUE>\"]}]},\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD STRING VALUE>\",\"created\":\"<ADD STRING VALUE>\",\"updated\":\"<ADD STRING VALUE>\",\"uses\":0,\"status\":\"AwaitingAuthorization\",\"statusDate\":\"<ADD STRING VALUE>\",\"applicationId\":\"<ADD STRING VALUE>\",\"sub\":\"<ADD STRING VALUE>\",\"preferredUsername\":\"<ADD STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\"}]}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"sanboxId\":\"<ADD STRING
            VALUE>\",\"version\":0,\"users\":[{\"accounts\":[{\"account\":{\"accountType\":\"<ADD
            STRING
            VALUE>\",\"overdraftLimit\":0,\"numberOfMandates\":0,\"serialNo\":\"<ADD
            STRING VALUE>\",\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"newMoneyBalance\":0,\"flag\":\"<ADD
            STRING VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false}},\"transactions\":[{\"serialNum\":\"<ADD
            STRING VALUE>\",\"date\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD
            STRING VALUE>\",\"trans\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"amountEquivalent\":0,\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"accountingBalance\":0,\"reference\":\"<ADD STRING
            VALUE>\",\"externalSystem\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"timestamp\":\"<ADD
            STRING VALUE>\"}],\"deferred\":[{\"trnNo\":\"<ADD STRING
            VALUE>\",\"trnId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"cancellationDate\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"totalPayments\":0,\"amount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"transId\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"rowsNum\":0,\"debitAccount\":\"<ADD STRING
            VALUE>\",\"totalAmount\":0,\"creditAccount\":\"<ADD STRING
            VALUE>\",\"details\":[{\"id\":\"<ADD STRING
            VALUE>\",\"field\":\"<ADD STRING VALUE>\",\"value\":\"<ADD STRING
            VALUE>\"}],\"historical\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}],\"history\":{\"master\":{\"originalTotalPayments\":\"<ADD
            STRING VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"},\"execution\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}]},\"future\":[{\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"id\":\"<ADD
            STRING VALUE>\",\"scheduleId\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\",\"errorMessage\":\"<ADD STRING
            VALUE>\"}],\"master\":{\"originalTotalPayments\":\"<ADD STRING
            VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"}}],\"pending\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"rowNumber\":0,\"counter\":0,\"pendingCounter\":0,\"approvedCounter\":0,\"rejectedCounter\":0,\"cancelledCounter\":0,\"id\":\"<ADD
            STRING VALUE>\",\"serviceAudit\":\"<ADD STRING
            VALUE>\",\"initialTimestamp\":\"<ADD STRING
            VALUE>\",\"actionUserId\":\"<ADD STRING
            VALUE>\",\"initialUserId\":\"<ADD STRING
            VALUE>\",\"initialUserAuthorizationLevel\":\"<ADD STRING
            VALUE>\",\"initialUserNumberOfApprovals\":0,\"currentAuthorizationLevel\":\"<ADD
            STRING
            VALUE>\",\"currentNumberOfApprovals\":0,\"serviceAction\":\"<ADD
            STRING VALUE>\",\"debitIBAN\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"summary\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"statusTimestamp\":\"<ADD STRING
            VALUE>\",\"statusUserId\":\"<ADD STRING
            VALUE>\",\"statusVersion\":0,\"isUserInvolved\":false,\"creditIBAN\":\"<ADD
            STRING VALUE>\",\"refNo\":\"<ADD STRING
            VALUE>\",\"tanNumber\":\"<ADD STRING
            VALUE>\",\"executionResult\":{\"exception\":{\"id\":\"<ADD STRING
            VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"},\"messages\":[{\"id\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD
            STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"}],\"executionTime\":0},\"isSmsOtp\":false,\"rejectReason\":\"<ADD
            STRING VALUE>\"}],\"beneficiaries\":[{\"name\":\"<ADD STRING
            VALUE>\",\"order\":\"<ADD STRING
            VALUE>\"}],\"details\":{\"account\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"createDate\":\"<ADD
            STRING VALUE>\",\"lastTransactionDate\":\"<ADD STRING
            VALUE>\",\"interestRate\":0,\"interestAccrued\":0,\"interestPeriod\":\"<ADD
            STRING
            VALUE>\",\"chequeReservation\":0,\"deptReservation\":0,\"overdraftLimit\":0,\"excessLimitAmount\":0,\"availableLimitAmount\":0,\"freeChequeAmnt\":0,\"expirationDate\":\"<ADD
            STRING VALUE>\",\"interestScale\":\"<ADD STRING
            VALUE>\",\"irisAccount\":\"<ADD STRING
            VALUE>\",\"irisBalance\":0,\"accType\":\"<ADD STRING
            VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false},\"newMoneyBalance\":0,\"mandatesNumber\":0},\"rates\":[{\"from\":0,\"to\":0,\"rate\":0}]}],\"userId\":\"<ADD
            STRING VALUE>\",\"mobilePhoneNumber\":\"<ADD STRING
            VALUE>\"}],\"consentApplicationIds\":[\"<ADD STRING
            VALUE>\"],\"consents\":[{\"consentId\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"consentData\":{\"consentId\":\"<ADD STRING
            VALUE>\",\"permissions\":[{\"startDate\":\"<ADD STRING
            VALUE>\",\"endDate\":\"<ADD STRING
            VALUE>\",\"type\":\"Balances\",\"typeInfo\":{\"iban\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"name\":\"<ADD
            STRING VALUE>\"},\"actions\":[\"<ADD STRING
            VALUE>\"]}]},\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD
            STRING VALUE>\",\"created\":\"<ADD STRING
            VALUE>\",\"updated\":\"<ADD STRING
            VALUE>\",\"uses\":0,\"status\":\"AwaitingAuthorization\",\"statusDate\":\"<ADD
            STRING VALUE>\",\"applicationId\":\"<ADD STRING
            VALUE>\",\"sub\":\"<ADD STRING VALUE>\",\"preferredUsername\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\"}]}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\"},\"payload\":{\"sanboxId\":\"<ADD STRING
            VALUE>\",\"version\":0,\"users\":[{\"accounts\":[{\"account\":{\"accountType\":\"<ADD
            STRING
            VALUE>\",\"overdraftLimit\":0,\"numberOfMandates\":0,\"serialNo\":\"<ADD
            STRING VALUE>\",\"account\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"newMoneyBalance\":0,\"flag\":\"<ADD
            STRING VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false}},\"transactions\":[{\"serialNum\":\"<ADD
            STRING VALUE>\",\"date\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD
            STRING VALUE>\",\"trans\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"amountEquivalent\":0,\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"accountingBalance\":0,\"reference\":\"<ADD STRING
            VALUE>\",\"externalSystem\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"timestamp\":\"<ADD
            STRING VALUE>\"}],\"deferred\":[{\"trnNo\":\"<ADD STRING
            VALUE>\",\"trnId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"cancellationDate\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"totalPayments\":0,\"amount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"transId\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"rowsNum\":0,\"debitAccount\":\"<ADD STRING
            VALUE>\",\"totalAmount\":0,\"creditAccount\":\"<ADD STRING
            VALUE>\",\"details\":[{\"id\":\"<ADD STRING
            VALUE>\",\"field\":\"<ADD STRING VALUE>\",\"value\":\"<ADD STRING
            VALUE>\"}],\"historical\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}],\"history\":{\"master\":{\"originalTotalPayments\":\"<ADD
            STRING VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"},\"execution\":[{\"errorMessage\":\"<ADD STRING
            VALUE>\",\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\"}]},\"future\":[{\"executionTime\":\"<ADD STRING
            VALUE>\",\"executionStatus\":\"<ADD STRING VALUE>\",\"id\":\"<ADD
            STRING VALUE>\",\"scheduleId\":\"<ADD STRING
            VALUE>\",\"externalId\":\"<ADD STRING
            VALUE>\",\"errorMessage\":\"<ADD STRING
            VALUE>\"}],\"master\":{\"originalTotalPayments\":\"<ADD STRING
            VALUE>\",\"transactionName\":\"<ADD STRING
            VALUE>\",\"deletionUserId\":\"<ADD STRING
            VALUE>\",\"frequency\":\"<ADD STRING
            VALUE>\",\"originalExecutionDate\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"deletionDate\":\"<ADD
            STRING VALUE>\",\"totalPayments\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD
            STRING VALUE>\"}}],\"pending\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"rowNumber\":0,\"counter\":0,\"pendingCounter\":0,\"approvedCounter\":0,\"rejectedCounter\":0,\"cancelledCounter\":0,\"id\":\"<ADD
            STRING VALUE>\",\"serviceAudit\":\"<ADD STRING
            VALUE>\",\"initialTimestamp\":\"<ADD STRING
            VALUE>\",\"actionUserId\":\"<ADD STRING
            VALUE>\",\"initialUserId\":\"<ADD STRING
            VALUE>\",\"initialUserAuthorizationLevel\":\"<ADD STRING
            VALUE>\",\"initialUserNumberOfApprovals\":0,\"currentAuthorizationLevel\":\"<ADD
            STRING
            VALUE>\",\"currentNumberOfApprovals\":0,\"serviceAction\":\"<ADD
            STRING VALUE>\",\"debitIBAN\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"summary\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"statusTimestamp\":\"<ADD STRING
            VALUE>\",\"statusUserId\":\"<ADD STRING
            VALUE>\",\"statusVersion\":0,\"isUserInvolved\":false,\"creditIBAN\":\"<ADD
            STRING VALUE>\",\"refNo\":\"<ADD STRING
            VALUE>\",\"tanNumber\":\"<ADD STRING
            VALUE>\",\"executionResult\":{\"exception\":{\"id\":\"<ADD STRING
            VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"},\"messages\":[{\"id\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"desc\":\"<ADD
            STRING
            VALUE>\",\"sev\":\"Warning\",\"cat\":\"Business\"}],\"executionTime\":0},\"isSmsOtp\":false,\"rejectReason\":\"<ADD
            STRING VALUE>\"}],\"beneficiaries\":[{\"name\":\"<ADD STRING
            VALUE>\",\"order\":\"<ADD STRING
            VALUE>\"}],\"details\":{\"account\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING VALUE>\",\"product\":\"<ADD STRING
            VALUE>\",\"ledgerBalance\":0,\"availableBalance\":0,\"createDate\":\"<ADD
            STRING VALUE>\",\"lastTransactionDate\":\"<ADD STRING
            VALUE>\",\"interestRate\":0,\"interestAccrued\":0,\"interestPeriod\":\"<ADD
            STRING
            VALUE>\",\"chequeReservation\":0,\"deptReservation\":0,\"overdraftLimit\":0,\"excessLimitAmount\":0,\"availableLimitAmount\":0,\"freeChequeAmnt\":0,\"expirationDate\":\"<ADD
            STRING VALUE>\",\"interestScale\":\"<ADD STRING
            VALUE>\",\"irisAccount\":\"<ADD STRING
            VALUE>\",\"irisBalance\":0,\"accType\":\"<ADD STRING
            VALUE>\",\"allowConnect\":\"<ADD STRING
            VALUE>\",\"allowDebit\":\"<ADD STRING
            VALUE>\",\"allowCredit\":\"<ADD STRING
            VALUE>\",\"indicators\":\"<ADD STRING
            VALUE>\",\"ledgerAccount\":\"<ADD STRING
            VALUE>\",\"isOwnAccount\":false,\"features\":{\"statement\":false,\"otherInfo\":false,\"mandates\":false,\"cheques\":false,\"transfer\":false,\"rates\":false,\"beneficiaries\":false},\"newMoneyBalance\":0,\"mandatesNumber\":0},\"rates\":[{\"from\":0,\"to\":0,\"rate\":0}]}],\"userId\":\"<ADD
            STRING VALUE>\",\"mobilePhoneNumber\":\"<ADD STRING
            VALUE>\"}],\"consentApplicationIds\":[\"<ADD STRING
            VALUE>\"],\"consents\":[{\"consentId\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"consentData\":{\"consentId\":\"<ADD STRING
            VALUE>\",\"permissions\":[{\"startDate\":\"<ADD STRING
            VALUE>\",\"endDate\":\"<ADD STRING
            VALUE>\",\"type\":\"Balances\",\"typeInfo\":{\"iban\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"name\":\"<ADD
            STRING VALUE>\"},\"actions\":[\"<ADD STRING
            VALUE>\"]}]},\"startDate\":\"<ADD STRING VALUE>\",\"endDate\":\"<ADD
            STRING VALUE>\",\"created\":\"<ADD STRING
            VALUE>\",\"updated\":\"<ADD STRING
            VALUE>\",\"uses\":0,\"status\":\"AwaitingAuthorization\",\"statusDate\":\"<ADD
            STRING VALUE>\",\"applicationId\":\"<ADD STRING
            VALUE>\",\"sub\":\"<ADD STRING VALUE>\",\"preferredUsername\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\"}]}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"},"payload":{"sanboxId":"<ADD STRING VALUE>","version":0,"users":[{"accounts":[{"account":{"accountType":"<ADD STRING VALUE>","overdraftLimit":0,"numberOfMandates":0,"serialNo":"<ADD STRING VALUE>","account":"<ADD STRING VALUE>","iban":"<ADD STRING VALUE>","currency":"<ADD STRING VALUE>","alias":"<ADD STRING VALUE>","product":"<ADD STRING VALUE>","ledgerBalance":0,"availableBalance":0,"newMoneyBalance":0,"flag":"<ADD STRING VALUE>","allowConnect":"<ADD STRING VALUE>","allowDebit":"<ADD STRING VALUE>","allowCredit":"<ADD STRING VALUE>","indicators":"<ADD STRING VALUE>","ledgerAccount":"<ADD STRING VALUE>","isOwnAccount":false,"features":{"statement":false,"otherInfo":false,"mandates":false,"cheques":false,"transfer":false,"rates":false,"beneficiaries":false}},"transactions":[{"serialNum":"<ADD STRING VALUE>","date":"<ADD STRING VALUE>","branch":"<ADD STRING VALUE>","trans":"<ADD STRING VALUE>","amount":0,"currency":"<ADD STRING VALUE>","amountEquivalent":0,"creditDebit":"<ADD STRING VALUE>","valeur":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","accountingBalance":0,"reference":"<ADD STRING VALUE>","externalSystem":"<ADD STRING VALUE>","relatedAccount":"<ADD STRING VALUE>","relatedName":"<ADD STRING VALUE>","timestamp":"<ADD STRING VALUE>"}],"deferred":[{"trnNo":"<ADD STRING VALUE>","trnId":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","createdDate":"<ADD STRING VALUE>","executionDate":"<ADD STRING VALUE>","cancellationDate":"<ADD STRING VALUE>","frequency":0,"totalPayments":0,"amount":0,"status":"<ADD STRING VALUE>","transId":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","rowsNum":0,"debitAccount":"<ADD STRING VALUE>","totalAmount":0,"creditAccount":"<ADD STRING VALUE>","details":[{"id":"<ADD STRING VALUE>","field":"<ADD STRING VALUE>","value":"<ADD STRING VALUE>"}],"historical":[{"errorMessage":"<ADD STRING VALUE>","executionTime":"<ADD STRING VALUE>","executionStatus":"<ADD STRING VALUE>","externalId":"<ADD STRING VALUE>"}],"history":{"master":{"originalTotalPayments":"<ADD STRING VALUE>","transactionName":"<ADD STRING VALUE>","deletionUserId":"<ADD STRING VALUE>","frequency":"<ADD STRING VALUE>","originalExecutionDate":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","deletionDate":"<ADD STRING VALUE>","totalPayments":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>","executionDate":"<ADD STRING VALUE>"},"execution":[{"errorMessage":"<ADD STRING VALUE>","executionTime":"<ADD STRING VALUE>","executionStatus":"<ADD STRING VALUE>","externalId":"<ADD STRING VALUE>"}]},"future":[{"executionTime":"<ADD STRING VALUE>","executionStatus":"<ADD STRING VALUE>","id":"<ADD STRING VALUE>","scheduleId":"<ADD STRING VALUE>","externalId":"<ADD STRING VALUE>","errorMessage":"<ADD STRING VALUE>"}],"master":{"originalTotalPayments":"<ADD STRING VALUE>","transactionName":"<ADD STRING VALUE>","deletionUserId":"<ADD STRING VALUE>","frequency":"<ADD STRING VALUE>","originalExecutionDate":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","deletionDate":"<ADD STRING VALUE>","totalPayments":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>","executionDate":"<ADD STRING VALUE>"}}],"pending":[{"userId":"<ADD STRING VALUE>","rowNumber":0,"counter":0,"pendingCounter":0,"approvedCounter":0,"rejectedCounter":0,"cancelledCounter":0,"id":"<ADD STRING VALUE>","serviceAudit":"<ADD STRING VALUE>","initialTimestamp":"<ADD STRING VALUE>","actionUserId":"<ADD STRING VALUE>","initialUserId":"<ADD STRING VALUE>","initialUserAuthorizationLevel":"<ADD STRING VALUE>","initialUserNumberOfApprovals":0,"currentAuthorizationLevel":"<ADD STRING VALUE>","currentNumberOfApprovals":0,"serviceAction":"<ADD STRING VALUE>","debitIBAN":"<ADD STRING VALUE>","amount":0,"summary":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>","statusTimestamp":"<ADD STRING VALUE>","statusUserId":"<ADD STRING VALUE>","statusVersion":0,"isUserInvolved":false,"creditIBAN":"<ADD STRING VALUE>","refNo":"<ADD STRING VALUE>","tanNumber":"<ADD STRING VALUE>","executionResult":{"exception":{"id":"<ADD STRING VALUE>","code":"<ADD STRING VALUE>","desc":"<ADD STRING VALUE>","sev":"Warning","cat":"Business"},"messages":[{"id":"<ADD STRING VALUE>","code":"<ADD STRING VALUE>","desc":"<ADD STRING VALUE>","sev":"Warning","cat":"Business"}],"executionTime":0},"isSmsOtp":false,"rejectReason":"<ADD STRING VALUE>"}],"beneficiaries":[{"name":"<ADD STRING VALUE>","order":"<ADD STRING VALUE>"}],"details":{"account":"<ADD STRING VALUE>","iban":"<ADD STRING VALUE>","accountType":"<ADD STRING VALUE>","currency":"<ADD STRING VALUE>","alias":"<ADD STRING VALUE>","product":"<ADD STRING VALUE>","ledgerBalance":0,"availableBalance":0,"createDate":"<ADD STRING VALUE>","lastTransactionDate":"<ADD STRING VALUE>","interestRate":0,"interestAccrued":0,"interestPeriod":"<ADD STRING VALUE>","chequeReservation":0,"deptReservation":0,"overdraftLimit":0,"excessLimitAmount":0,"availableLimitAmount":0,"freeChequeAmnt":0,"expirationDate":"<ADD STRING VALUE>","interestScale":"<ADD STRING VALUE>","irisAccount":"<ADD STRING VALUE>","irisBalance":0,"accType":"<ADD STRING VALUE>","allowConnect":"<ADD STRING VALUE>","allowDebit":"<ADD STRING VALUE>","allowCredit":"<ADD STRING VALUE>","indicators":"<ADD STRING VALUE>","ledgerAccount":"<ADD STRING VALUE>","isOwnAccount":false,"features":{"statement":false,"otherInfo":false,"mandates":false,"cheques":false,"transfer":false,"rates":false,"beneficiaries":false},"newMoneyBalance":0,"mandatesNumber":0},"rates":[{"from":0,"to":0,"rate":0}]}],"userId":"<ADD STRING VALUE>","mobilePhoneNumber":"<ADD STRING VALUE>"}],"consentApplicationIds":["<ADD STRING VALUE>"],"consents":[{"consentId":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","consentData":{"consentId":"<ADD STRING VALUE>","permissions":[{"startDate":"<ADD STRING VALUE>","endDate":"<ADD STRING VALUE>","type":"Balances","typeInfo":{"iban":"<ADD STRING VALUE>","accountNumber":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>"},"actions":["<ADD STRING VALUE>"]}]},"startDate":"<ADD STRING VALUE>","endDate":"<ADD STRING VALUE>","created":"<ADD STRING VALUE>","updated":"<ADD STRING VALUE>","uses":0,"status":"AwaitingAuthorization","statusDate":"<ADD STRING VALUE>","applicationId":"<ADD STRING VALUE>","sub":"<ADD STRING VALUE>","preferredUsername":"<ADD STRING VALUE>","providerId":"<ADD STRING VALUE>"}]}}'
    delete:
      tags:
        - Sandbox
      summary: Delete a sandbox.
      description: |
        Delete a sandbox      

        **Error List**


        **Code**: 001 - **Description**: Invalid sandboxId.


        **Code**: 005 - **Description**: Cannot Delete Sandbox.


        **Code**: 006 - **Description**: Sandbox Not Found        
      operationId: Sandbox_DeleteSandboxPsd2
      parameters:
        - name: sandbox_id
          in: path
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response-of-Boolean'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D")
              .delete(null)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("DELETE",
            "/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request DELETE \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/sandbox/%7Bsandbox_id%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
  /user/current:
    post:
      tags:
        - User
      summary: Info about the logged in user (i.e. userId).
      operationId: User_GetCurrentUserPsd2
      description: |
        Get information of a specified user.
      parameters:
        - name: sandbox_id
          in: header
          description: The unique name of your Sandbox
          required: true
          schema:
            type: string
            default: ''
        - name: Authorization
          in: header
          description: >-
            Authorization Bearer obtained using the authorization code flow
            (OAuth2)
          required: true
          schema:
            type: string
            default: Bearer
        - name: Request-Id
          in: header
          description: A guid that uniquely identifies your request
          required: true
          schema:
            type: string
            default: 5C5C4643-ADD5-49AB-9F7A-000D2D7720D2
        - name: Signature
          in: header
          description: Signature (Detached JWS signature)
          required: true
          schema:
            type: string
            default: ''
        - name: TPP-Signature-Certificate
          in: header
          description: TPP-Signature-Certificate (X.509 certificate in .pem format)
          required: true
          schema:
            type: string
            default: ''
        - name: X-Certificate-Check
          in: header
          description: A Boolean to enable or disable the certificate validation
          required: true
          schema:
            type: string
            default: false
        - name: user-agent
          in: header
          description: Indicates the browser that the API is called from
          schema:
            type: string
            default: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36'
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseOfGetCurrentUser'
        default:
          description: Error Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestEmptyPayload'
        required: true
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "x-certificate-check:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "tpp-signature-certificate:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "signature:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("x-certificate-check", "SOME_STRING_VALUE");

            request.AddHeader("tpp-signature-certificate", "SOME_STRING_VALUE");

            request.AddHeader("signature", "SOME_STRING_VALUE");

            request.AddHeader("request-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"signature\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"tpp-signature-certificate\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"x-certificate-check\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("request-id", "SOME_STRING_VALUE")
              .addHeader("signature", "SOME_STRING_VALUE")
              .addHeader("tpp-signature-certificate", "SOME_STRING_VALUE")
              .addHeader("x-certificate-check", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'x-certificate-check': 'SOME_STRING_VALUE',
                 'tpp-signature-certificate': 'SOME_STRING_VALUE',
                 signature: 'SOME_STRING_VALUE',
                 'request-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>', application: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "request-id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "signature: SOME_STRING_VALUE",
                "tpp-signature-certificate: SOME_STRING_VALUE",
                "x-certificate-check: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'request-id': "SOME_STRING_VALUE",
                'signature': "SOME_STRING_VALUE",
                'tpp-signature-certificate': "SOME_STRING_VALUE",
                'x-certificate-check': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/confirmation.funds/oauth2/v2/user/current", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["request-id"] = 'SOME_STRING_VALUE'

            request["signature"] = 'SOME_STRING_VALUE'

            request["tpp-signature-certificate"] = 'SOME_STRING_VALUE'

            request["x-certificate-check"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2/user/current \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'request-id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'signature: SOME_STRING_VALUE' \
              --header 'tpp-signature-certificate: SOME_STRING_VALUE' \
              --header 'x-certificate-check: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>"}}'
security:
  - Client-Id: []
servers:
  - url: 'https://apis.nbg.gr/sandbox/confirmation.funds/oauth2/v2'
    description: Sandbox Server
    variables:
      protocol:
        enum:
          - https
        default: https
      server:
        default: apis.nbg.gr
      version:
        default: v2
      authentication:
        default: oauth2
      api:
        default: confirmation.funds
  - url: 'https://services.nbg.gr/apis/confirmation.funds/v2'
    description: Production Server
    variables:
      protocol:
        enum:
          - https
        default: https
      server:
        default: services.nbg.gr
      version:
        default: v2
      api:
        default: confirmation.funds
components:
  securitySchemes:
    Client-Id:
      type: apiKey
      description: A guid that uniquely identifies your application
      in: header
      name: Client-Id
  schemas:
    RequestHeader:
      required:
        - ID
        - application
      type: object
      properties:
        ID:
          type: string
          example: C10B1AB9-9E69-4B02-B468-DCCCEA11E3A3
        application:
          type: string
          example: EE2F69FB-F3A7-48BD-8582-DCAD5406D864
    RequestEmptyPayload:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
      example:
        header:
          ID: bf80bcea-7a8b-4a4a-aac3-0ea52f0494e2
          application: 598A4414-395A-43D6-A9C3-D53A15E6E9F6
    ResponseMessage:
      type: object
      example: null
      properties:
        id:
          type: string
        code:
          type: string
        desc:
          type: string
        sev:
          enum:
            - Warning
            - Error
            - Info
          type: string
        cat:
          enum:
            - Business
            - Communication
            - Technical
            - Security
          type: string
    Transaction:
      type: object
      properties:
        serialNum:
          description: Just the serial number of this entry
          type: string
        date:
          format: date-time
          description: Date of this transaction
          type: string
        branch:
          description: Branch
          type: string
        trans:
          description: 'Code for transaction type, e.g. <code>"10"</code> for "Κατάθεση"'
          type: string
        amount:
          format: double
          description: Amount of this transaction in the currency of the transaction
          type: number
        currency:
          description: The currency of the transaction
          type: string
        amountEquivalent:
          format: double
          description: Amount of this transaction in the currency of the Account
          type: number
        creditDebit:
          description: <code>"Credit"</code> or <code>"Debit"</code>
          type: string
        valeur:
          format: date-time
          description: Date when transaction amount debited or credited
          type: string
        description:
          description: Description of this transaction
          type: string
        accountingBalance:
          format: double
          description: Accounting balance
          type: number
        reference:
          description: >-
            Transaction reference number (with the "externalSystem" combination
            is unique)
          type: string
        externalSystem:
          description: >-
            If equals to "RNB" then the remittance is to NBG.If equals to "ROT"
            then the remittance is to other bank
          type: string
        relatedAccount:
          description: "If it is a debit transaction then it is the credit account number.\r\nIf it is a credit transaction then it is the debit account number."
          type: string
        relatedName:
          description: Name of the counterparty
          type: string
        timestamp:
          description: Full date of this transaction (up to milliseconds)
          type: string
    AccountFull:
      type: object
      properties:
        accountType:
          description: 'Code for account type, e.g. <code>10</code> for "Ταμιευτήριο"'
          type: string
        overdraftLimit:
          format: double
          description: Overdraft limit
          type: number
        numberOfMandates:
          format: int32
          description: Number of mandates
          type: integer
        serialNo:
          description: Just the serial number of this entry
          type: string
        account:
          description: The NBG account number (e.g. 11 digits)
          type: string
        iban:
          description: Nicely formatted IBAN.
          type: string
        currency:
          description: 'Currency, 3-letter code , e.g. <code>EUR</code>'
          type: string
        alias:
          description: Friendly name
          type: string
        product:
          description: Account product code
          type: string
        ledgerBalance:
          format: double
          description: Ledger balance
          type: number
        availableBalance:
          format: double
          description: Available balance
          type: number
        newMoneyBalance:
          format: double
          description: Available balance for transfer abroad
          type: number
        flag:
          description: TBD
          type: string
        allowConnect:
          description: Connection indicator
          type: string
        allowDebit:
          description: Account debit indicator
          type: string
        allowCredit:
          description: Account credit indicator
          type: string
        indicators:
          description: Account other indicators
          type: string
        ledgerAccount:
          description: Special account
          type: string
        isOwnAccount:
          description: Whether the account belongs to the user
          type: boolean
        features:
          $ref: '#/components/schemas/Feature'
    Feature:
      type: object
      properties:
        statement:
          description: Statements
          type: boolean
        otherInfo:
          description: Other information
          type: boolean
        mandates:
          description: Mandates
          type: boolean
        cheques:
          description: Cheques
          type: boolean
        transfer:
          description: Transfer
          type: boolean
        rates:
          description: Rates
          type: boolean
        beneficiaries:
          description: Cobeneficiaries
          type: boolean
    BalanceDetails:
      type: object
      properties:
        account:
          description: The NBG account number (e.g. 11 digits).
          type: string
        iban:
          description: Nicely formatted IBAN.
          type: string
        accountType:
          description: 'Code for account type, e.g. <code>10</code> for "Ταμιευτήριο"'
          type: string
        currency:
          description: 'Currency, 3-letter code , e.g. <code>EUR</code>'
          type: string
        alias:
          description: Friendly name
          type: string
        product:
          description: Account product code
          type: string
        ledgerBalance:
          format: double
          description: Ledger balance
          type: number
        availableBalance:
          format: double
          description: Available balance
          type: number
        createDate:
          format: date-time
          description: Creation date
          type: string
        lastTransactionDate:
          format: date-time
          description: Last transaction date
          type: string
        interestRate:
          format: double
          description: Interest rate
          type: number
        interestAccrued:
          format: double
          description: Accrued interest
          type: number
        interestPeriod:
          description: Interest period
          type: string
        chequeReservation:
          format: double
          description: Reservation from cheques
          type: number
        deptReservation:
          format: double
          description: Other reservation
          type: number
        overdraftLimit:
          format: double
          description: Overdraft limit
          type: number
        excessLimitAmount:
          format: double
          description: Overdraft limit amount exceeded
          type: number
        availableLimitAmount:
          format: double
          description: Available overdraft amount
          type: number
        freeChequeAmnt:
          format: double
          description: Amount free from cheques
          type: number
        expirationDate:
          format: date-time
          description: Expiration date
          type: string
        interestScale:
          description: Interest rate scale
          type: string
        irisAccount:
          description: IRIS account number (e.g. 4370140994)
          type: string
        irisBalance:
          format: double
          description: IRIS account balance
          type: number
        accType:
          description: Account type code (e.g."3003")
          type: string
        allowConnect:
          description: Connection indicator
          type: string
        allowDebit:
          description: Account debit indicator(if 1 debit is allowed)
          type: string
        allowCredit:
          description: >-
            Account credit indicator (A two digits string XY where if X=1 then
            credit is allowed from the user  and if Υ=1 then credit is allowed
            from a third user)
          type: string
        indicators:
          description: Other indicators
          type: string
        ledgerAccount:
          description: Special account
          type: string
        isOwnAccount:
          description: Whether the account belongs to the user
          type: boolean
        features:
          $ref: '#/components/schemas/Feature'
        newMoneyBalance:
          format: double
          description: Available balance for transfer abroad
          type: number
        mandatesNumber:
          format: int32
          description: Number of mandates
          type: integer
    AccountBeneficiary:
      description: ''
      type: object
      properties:
        name:
          description: Cobeneficiary name
          type: string
        order:
          description: Cobeneficiary order in the list
          type: string
    InterestScale:
      type: object
      properties:
        from:
          format: double
          description: Amount from (lower bound).
          type: number
        to:
          format: double
          description: Amount to (upper bound).
          type: number
        rate:
          format: double
          description: Relevant interest rate.
          type: number
    RequestOfCheckFundAvailability:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
        payload:
          $ref: '#/components/schemas/CheckFundAvailabilityRequest'
      example:
        header:
          ID: 9155cc0e-de98-4b75-8a5c-8a7b614ad7bb
          application: 598A4414-395A-43D6-A9C3-D53A15E6E9F6
        payload:
          iban: GR5301106780000067890123456
          amount:
            amount: 1
            currency: EUR
          userId: User1
          useOverdraftLimit: false
    CheckFundAvailabilityRequest:
      description: Check funds availability request type
      required:
        - userId
        - amount
      type: object
      properties:
        iban:
          description: Account's IBAN
          type: string
        amount:
          $ref: '#/components/schemas/Amount'
        userId:
          type: string
          description: The username of the logged in user
        useOverdraftLimit:
          type: boolean
          description: >-
            Whether overdraft limit will be included in the funds availability
            calculation
    Amount:
      description: Amount
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          format: double
          description: >-
            The amount given with fractional digits, where fractions must be
            compliant to the currency definition. Up to 14 significant
            figures.The decimal separator is a dot
          type: number
        currency:
          description: ISO 4217 Alpha 3 currency code
          type: string
    ConsentModel:
      type: object
      properties:
        consentId:
          $ref: '#/components/schemas/ConsentId'
        name:
          $ref: '#/components/schemas/ConsentName'
        startDate:
          $ref: '#/components/schemas/StartDate'
        endDate:
          $ref: '#/components/schemas/EndDate'
        created:
          format: date-time
          description: Created date
          type: string
          example: '2019-01-01T09:12:18.362Z'
        updated:
          format: date-time
          description: Updated date
          type: string
          example: '2019-01-01T09:12:18.362Z'
        uses:
          type: integer
          description: Number of uses
        status:
          $ref: '#/components/schemas/ConsentStatus'
        statusDate:
          format: date-time
          description: Status date
          type: string
          example: '2019-01-01T09:12:18.362Z'
        applicationId:
          $ref: '#/components/schemas/ApplicationId'
        sub:
          type: string
          description: User's unique sub
          example: 5e2a5ee2-8ecc-4df7-92c8-6900b9d30356
        preferredUsername:
          type: string
          description: Preferred username
          example: john
        providerId:
          type: string
          description: Provider id
          example: aacffa96-5ae8-470e-945e-9e13b6318416
    SandboxConsentModel:
      type: object
      properties:
        consentId:
          $ref: '#/components/schemas/ConsentId'
        name:
          $ref: '#/components/schemas/ConsentName'
        consentData:
          $ref: '#/components/schemas/ConsentData'
        startDate:
          $ref: '#/components/schemas/StartDate'
        endDate:
          $ref: '#/components/schemas/EndDate'
        created:
          format: date-time
          description: Created date
          type: string
          example: '2019-01-01T09:12:18.362Z'
        updated:
          format: date-time
          description: Updated date
          type: string
          example: '2019-01-01T09:12:18.362Z'
        uses:
          type: integer
          description: Number of uses
        status:
          $ref: '#/components/schemas/ConsentStatus'
        statusDate:
          format: date-time
          description: Status date
          type: string
          example: '2019-01-01T09:12:18.362Z'
        applicationId:
          $ref: '#/components/schemas/ApplicationId'
        sub:
          type: string
          description: User's unique sub
          example: 5e2a5ee2-8ecc-4df7-92c8-6900b9d30356
        preferredUsername:
          type: string
          description: Preferred username
          example: john
        providerId:
          type: string
          description: Provider id
          example: aacffa96-5ae8-470e-945e-9e13b6318416
    ConsentId:
      type: string
      format: uuid
      description: Consent Id
      example: 03D3A4F2-D26E-4365-B389-1AD5EE73A5B5
    ApplicationId:
      type: string
      format: uuid
      description: Application Id
      example: 72F01708-BE1E-4567-926E-8C87D03CA551
    ConsentName:
      type: string
      description: Consent name
      example: My Consent
    ConsentData:
      type: object
      properties:
        consentId:
          $ref: '#/components/schemas/ConsentId'
        permissions:
          description: Consent Permissions
          type: array
          items:
            $ref: '#/components/schemas/Permission'
    StartDate:
      format: date-time
      description: Start date
      type: string
      example: '2019-01-01T09:12:18.362Z'
    EndDate:
      format: date-time
      description: End date
      type: string
      example: '2019-12-12T09:12:18.362Z'
    Permission:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/StartDate'
        endDate:
          $ref: '#/components/schemas/EndDate'
        type:
          $ref: '#/components/schemas/ConsentType'
        typeInfo:
          $ref: '#/components/schemas/ConsentTypeInfo'
        actions:
          $ref: '#/components/schemas/Actions'
    ConsentType:
      description: Consent type
      enum:
        - Balances
      type: string
      example: Balances
    ConsentTypeInfo:
      type: object
      properties:
        iban:
          description: Account IBAN
          type: string
          example: GR9601106780000067890123458
        accountNumber:
          description: Account Number
          type: string
          example: '67890123456'
        name:
          $ref: '#/components/schemas/ConsentName'
    Actions:
      description: Permission action allowed
      type: array
      items:
        type: string
      example:
        - view.available.balance
        - view.ledger.balance
    ConsentStatus:
      description: Consent status
      enum:
        - AwaitingAuthorization
        - Authorized
        - Rejected
        - Expired
        - Revoked
        - RevokedByAdmin
        - Unspecified
      type: string
      example: Payments
    RequestOfRequestAccess:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
        payload:
          required:
            - applicationId
          type: object
          properties:
            applicationId:
              description: >-
                The id of your application. A default application is created at
                the sandbox default data (field 'consentApplicationIds').
              type: string
              format: uuid
      example:
        header:
          ID: bf80bcea-7a8b-4a4a-aac3-0ea52f0494e2
          application: 598A4414-395A-43D6-A9C3-D53A15E6E9F6
        payload:
          applicationId: 72F01708-BE1E-4567-926E-8C87D03CA551
    ResponseOfRequestAccess:
      type: object
      properties:
        payload:
          type: object
          properties:
            consentId:
              description: >-
                The id of the consent to be used for the user to visit the
                Consent UI
              type: string
              format: uuid
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
      example:
        payload:
          consentId: 598A4414-395A-43D6-A9C3-D53A15E6E9F6
        executionTime: 0
        exception: null
        messages: null
    RequestOfInfo:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
        payload:
          required:
            - userId
          type: object
          properties:
            userId:
              description: The username of the logged in user
              type: string
            consentId:
              description: The id of the user's consent.
              type: string
              format: uuid
            applicationId:
              description: The id of your application/client
              type: string
              format: uuid
      example:
        header:
          ID: f42f0cf7-2941-48a9-b299-e0b785207ea7
          application: f42f0cf7-2941-48a9-b299-e0b785207ea7
        payload:
          userId: User1
          consentId: 56e50b46-fb92-4d0f-9e5e-0a78f5e40fcb
          applicationId: 72F01708-BE1E-4567-926E-8C87D03CA551
    ResponseOfInfo:
      type: object
      properties:
        payload:
          type: object
          properties:
            consents:
              type: array
              items:
                $ref: '#/components/schemas/ConsentModel'
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
    RequestOfConsentDelete:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
        payload:
          required:
            - userId
            - consentId
            - tanNumber
          type: object
          properties:
            userId:
              description: The username of the logged in user
              type: string
              example: '123456'
            consentId:
              $ref: '#/components/schemas/ConsentId'
            tanNumber:
              type: string
              description: One time password received via sms
              example: smsotp
    ResponseOfCheckFundAvailability:
      type: object
      properties:
        payload:
          $ref: '#/components/schemas/CheckFundAvailabilityResponse'
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
      example:
        payload:
          isAvailable: true
        executionTime: 0
        messages: null
        exception: null
    CheckFundAvailabilityResponse:
      description: >-
        Returns a boolean indicating whether one account has the available
        balance
      type: object
      properties:
        isAvailable:
          description: availability flag
          type: boolean
    RequestOfSandbox:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
        payload:
          $ref: '#/components/schemas/SandboxRequest'
      example:
        header:
          ID: e635360e-f1b8-4deb-810c-b75b055f4ba5
          application: 598A4414-395A-43D6-A9C3-D53A15E6E9F6
        payload:
          sanboxId: MySandbox
    SandboxRequest:
      description: Sandbox Request Type
      required:
        - sandboxId
      type: object
      properties:
        sandboxId:
          description: The unique name of your Sandbox
          type: string
    ResponseOfSandbox:
      type: object
      properties:
        payload:
          $ref: '#/components/schemas/Sandbox'
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          example: null
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
    Sandbox:
      type: object
      properties:
        sanboxId:
          type: string
        version:
          format: int32
          description: Sandbox's version
          type: integer
        users:
          description: Sandbox's list of users
          type: array
          items:
            $ref: '#/components/schemas/User'
        consentApplicationIds:
          description: List of applications
          type: array
          items:
            $ref: '#/components/schemas/ApplicationId'
        consents:
          description: List of consents
          type: array
          items:
            $ref: '#/components/schemas/SandboxConsentModel'
    User:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        userId:
          type: string
          description: The username of the logged in user
        mobilePhoneNumber:
          type: string
          description: Mobile phone number for SmsOtp
          example: '6912345678'
    BankAccount:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountFull'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        deferred:
          type: array
          items:
            $ref: '#/components/schemas/DeferredTransactionInfo'
        pending:
          type: array
          items:
            $ref: '#/components/schemas/DeferredItem'
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/AccountBeneficiary'
        details:
          $ref: '#/components/schemas/BalanceDetails'
        rates:
          type: array
          items:
            $ref: '#/components/schemas/InterestScale'
    DeferredTransactionInfo:
      type: object
      properties:
        trnNo:
          type: string
        trnId:
          type: string
        name:
          type: string
        description:
          type: string
        createdDate:
          format: date-time
          type: string
        executionDate:
          format: date-time
          type: string
        cancellationDate:
          format: date-time
          type: string
        frequency:
          format: int32
          type: integer
        totalPayments:
          format: int32
          type: integer
        amount:
          format: double
          type: number
        status:
          type: string
        transId:
          type: string
        channel:
          type: string
        rowsNum:
          format: int32
          type: integer
        debitAccount:
          type: string
        totalAmount:
          format: double
          type: number
        creditAccount:
          type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/DeferredDetails'
        historical:
          type: array
          items:
            $ref: '#/components/schemas/DeferredHistoryExecution'
        history:
          $ref: '#/components/schemas/DeferredHistory'
        future:
          type: array
          items:
            $ref: '#/components/schemas/DeferredFutureExecution'
        master:
          $ref: '#/components/schemas/DeferredHistoryMaster'
    DeferredItem:
      type: object
      properties:
        userId:
          type: string
        rowNumber:
          format: int64
          type: integer
        counter:
          format: int32
          type: integer
        pendingCounter:
          format: int32
          type: integer
        approvedCounter:
          format: int32
          type: integer
        rejectedCounter:
          format: int32
          type: integer
        cancelledCounter:
          format: int32
          type: integer
        id:
          format: uuid
          type: string
          example: 5CD55183-1347-418F-A7B3-39C26C5EFD26
        serviceAudit:
          format: uuid
          type: string
          example: 7A204666-5DCE-42B5-AA27-D2CB1B1937EB
        initialTimestamp:
          format: date-time
          type: string
        actionUserId:
          type: string
        initialUserId:
          type: string
        initialUserAuthorizationLevel:
          type: string
        initialUserNumberOfApprovals:
          format: int32
          type: integer
        currentAuthorizationLevel:
          type: string
        currentNumberOfApprovals:
          format: int32
          type: integer
        serviceAction:
          type: string
        debitIBAN:
          type: string
        amount:
          format: double
          type: number
        summary:
          type: string
        status:
          type: string
        statusTimestamp:
          format: date-time
          type: string
        statusUserId:
          type: string
        statusVersion:
          format: int32
          type: integer
        isUserInvolved:
          type: boolean
        creditIBAN:
          type: string
        refNo:
          type: string
        tanNumber:
          type: string
        executionResult:
          $ref: '#/components/schemas/Response'
        isSmsOtp:
          type: boolean
        rejectReason:
          type: string
    DeferredDetails:
      type: object
      properties:
        id:
          type: string
        field:
          type: string
        value:
          type: string
    DeferredHistoryExecution:
      type: object
      properties:
        errorMessage:
          type: string
        executionTime:
          format: date-time
          type: string
        executionStatus:
          type: string
        externalId:
          type: string
    DeferredHistory:
      type: object
      properties:
        master:
          $ref: '#/components/schemas/DeferredHistoryMaster'
        execution:
          type: array
          items:
            $ref: '#/components/schemas/DeferredHistoryExecution'
    DeferredFutureExecution:
      type: object
      properties:
        executionTime:
          format: date-time
          type: string
        executionStatus:
          type: string
        id:
          type: string
        scheduleId:
          type: string
        externalId:
          type: string
        errorMessage:
          type: string
    DeferredHistoryMaster:
      type: object
      properties:
        originalTotalPayments:
          type: string
        transactionName:
          type: string
        deletionUserId:
          type: string
        frequency:
          type: string
        originalExecutionDate:
          format: date-time
          type: string
        name:
          type: string
        deletionDate:
          format: date-time
          type: string
        totalPayments:
          type: string
        status:
          type: string
        executionDate:
          format: date-time
          type: string
    Response:
      type: object
      properties:
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
    RequestOfUpdateSandbox:
      required:
        - header
        - payload
      type: object
      properties:
        header:
          $ref: '#/components/schemas/RequestHeader'
        payload:
          $ref: '#/components/schemas/Sandbox'
      example:
        header:
          ID: e635360e-f1b8-4deb-810c-b75b055f4ba5
          application: 598A4414-395A-43D6-A9C3-D53A15E6E9F6
        payload:
          sanboxId: MySandbox
          version: 1
          users: []
    ResponseOfGetCurrentUser:
      type: object
      properties:
        payload:
          $ref: '#/components/schemas/GetCurrentUserResponse'
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
      example:
        payload:
          userId: User1
          smsOtpMobile: (697)****111
        executionTime: 0
        messages: null
        exception: null
    GetCurrentUserResponse:
      type: object
      properties:
        userId:
          description: The username of the logged in user
          type: string
        smsOtpMobile:
          description: >-
            The masked smsotp phone number of the logged in user (ie.
            693****234)
          type: string
    Response-of-Boolean:
      type: object
      properties:
        payload:
          type: boolean
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
      example:
        executionTime: 0
        messages: null
        exception: null
        payload: true
    ErrorResponse:
      type: object
      properties:
        payload:
          type: object
        exception:
          $ref: '#/components/schemas/ResponseMessage'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        executionTime:
          format: double
          type: number
      example:
        payload: null
        messages: null
        executionTime: 0
        exception:
          id: 02A7470B-0FDE-4EB4-A1E1-662BEDE4434B
          sev: Error
          desc: Incorrect Json Format
          cat: Business
          code: 20
  parameters:
    X-Consent-Check-Header-Param:
      in: header
      name: X-Consent-Check
      description: A Boolean to enable or disable the consent validation
      required: true
      schema:
        type: boolean
        default: false
    Consent-Id-Header-Param:
      in: header
      name: Consent-Id
      description: Consent Identifier
      required: false
      schema:
        type: string
        format: uuid
        default: 87DD5171-746E-4C66-8981-C4765FC8C48E