swagger: '2.0'
info:
  title: eQueuing Sandbox API
  version: v1.2
  description: "## Functionality at a glance\n\nStart integrating your application with NBG Bank and enable your customers to:\n\n1.\tSearch for ATMs and Branches:\n*\tLocate and find out the necessary info about the (nearest) ATM \n*\tLocate and find out the necessary info about the (nearest) branch\n*\tLocate and find out the necessary info about the (nearest) Retail branch\n*\tLocate a branch with online reservation\n*\tLocate the branch with the least service waiting time\n2.\tNarrow down the waiting time when visiting a branch through an online reservation (ticketing service):\n*\tGet waiting time info for a specific branch\n*\tIssue a ticket \n*\tCancel a ticket\n*\tManage past tickets\n*\tRate the ticketing service\n\n## Quick Getting Started\n\n1. Login/Register to the NBG Developer Portal\n2. Go to APPS and click \"Create New App\"\n3. Go to API PRODUCTS and select an API\n4. Click \"Subscribe\" and choose your app\n5. Create a Sandbox\n6. Play with the API\n\n## Create your Sandbox\nSandboxes are self - contained testing environments that provide a simple way of testing the API without any real impact, meaning that no personal or financial data is used.\nYou can create **your Sandbox** by invoking the **POST** /api/sandbox call. This call will generate a new Sandbox with a **unique sandbox_id**.\nImportant! Don't lose your sandbox_id, since you will need it for all the API calls. Sandbox endpoints are not included in the production version API.\n\nWhen you create a sandbox, users and sandbox specific data are generated as sample data.\n\nThe following HTTP header parameters are required for every call (except for sandbox operations) and can be obtained at sandbox creation:\n\n1. sandbox_id = the name of the sandbox you created\n2. application_id = the client id of your app\n3. username = The user name of your sandbox test user\n4. provider_id = The user-id issued by the provider (NBG.gr)\n5. provider = The provider name (NBG)\n\nGet to know the Sandbox Operations in the related section. \n\n## Start Testing\nOnce you have your sandbox_id, you can start invoking the rest of the operations by providing all the mandatory information in the http header. \n\n## Important notes\nRequest headers\nEach request MUST have the following info:\n\n*sandbox_id*, *application_id*, *username*, *provider_id*, *provider*\n\n## Error Codes\n* APPMNT000: Initialization error\n* APPMNT001: Data missing\n* APPMNT002: Invalid data\n* APPMNT003: Invalid configuration\n* APPMNT020: OAuth exception\n* APPMNT021: Not valid OAuth\n* APPMNT030: Booking date not valid\n* APPMNT031: Booking field value required\n* APPMNT032: Booking field value not valid\n* APPMNT033: Customer exceeds number of bookings\n* APPMNT034: Booking source not found\n* APPMNT040: Equeuing branches not found\n* APPMNT050: NULL response\n* APPMNT052: Flow not found\n* APPMNT053: Branch not found\n* APPMNT055: Service not found\n* APPMNT056: Service not found\n* APPMNT057: Service not found\n* APPMNT058: Time template not found\n* APPMNT99: An error has occurred\n\n## Feedback and Questions\n\nWe would love to hear your feedback and answer your questions. Send us at [developer@nbg.gr](developer@nbg.gr)\n\nCheck out our [Sandbox Postman Collection](https://github.com/myNBGcode/PostmanCollections/tree/master/eQueueing)!\n\n------------------------------------------------------------------------------------------ \n\nCreated by [**NBG**](https://www.nbg.gr/).\n\n------------------------------------------------------------------------------------------ \n------------------------------------------------------------------------------------------\n\n\n\n # Entities \n\n Below, the main entities are documented.\n <a name=Request[RegionRequest]></a> \n## Request[RegionRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Region Request Data| object|\n\n <a name=RequestHeader></a> \n## RequestHeader \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| ID| -| string|\n| application| -| string|\n| bank| -| string|\n| hostSession| -| string|\n| channel| -| string|\n| customer| -| number|\n| logitude| -| number|\n| latitude| -| number|\n| go4moreMember| -| boolean|\n| TAN| -| string|\n\n <a name=RegionRequest></a> \n## RegionRequest \nRegion Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| parentId| Parent ID (for Area -&gt; City, for City -&gt; Region) If left empty then it's implied we want all the records| integer|\n| type| Type of region (look for RegionType enum) For Root List just use RegionType.Region| string|\n| userId| User Id| string|\n\n <a name=Response[RegionResponse]></a> \n## Response[RegionResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[RegionResponse](#RegionResponse)</summary><ul><li>type [string]</li> <li>regions [array[[Region](#Region)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=RegionResponse></a> \n## RegionResponse \nRegion Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| type| Region Type| string|\n| regions| List of results| array[[Region](#Region)]|\n\n <a name=ResponseMessage></a> \n## ResponseMessage \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| -| string|\n| code| -| string|\n| desc| -| string|\n| sev| -| string|\n| cat| -| string|\n\n <a name=Region></a> \n## Region \nRegion Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| Record ID (system internal reference id)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| parentId| Parent ID (for Area -&gt; City, for City -&gt; Region)| integer|\n\n <a name=Request[ATMByAreaRequest]></a> \n## Request[ATMByAreaRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| ATM By Area Request| object|\n\n <a name=ATMByAreaRequest></a> \n## ATMByAreaRequest \nATM By Area Request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| area| Area Code (if empty, then all atms are returned)| integer|\n| userId| User Id| string|\n\n <a name=Response[List[ATM]]></a> \n## Response[List[ATM]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[ATM](#ATM)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ATM></a> \n## ATM \nATM Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| ATM Code| string|\n| acceptsDeposits| Indication if it accepts deposits| boolean|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| is24Hours| Indication for 24 hour service| boolean|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=Request[NearestATMRequest]></a> \n## Request[NearestATMRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Nearest ATM Request Data| object|\n\n <a name=NearestATMRequest></a> \n## NearestATMRequest \nNearest ATM Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| distance| Search Radius (in meters) If left empty, it starts from 3000. If the results are less than 10, then looks for 4000, 8000 and 16000 consequently and then stops| number|\n| latitude| Search Latitude| number|\n| longitude| Search Longitude| number|\n| userId| User Id| string|\n\n <a name=Response[NearestATMResponse]></a> \n## Response[NearestATMResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[NearestATMResponse](#NearestATMResponse)</summary><ul><li>distance [number]</li> <li>atms [array[[ATM](#ATM)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=NearestATMResponse></a> \n## NearestATMResponse \nNearest ATM Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| distance| Search Radius (in meters) It is different from the request distance, in case it's left empty in the request (so it shows the actual result radius)| number|\n| atms| Reslut List| array[[ATM](#ATM)]|\n\n <a name=Request[ATMDetailsRequest]></a> \n## Request[ATMDetailsRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| ATM Details Request| object|\n\n <a name=ATMDetailsRequest></a> \n## ATMDetailsRequest \nATM Details Request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| ΑΤΜ Code| string|\n| userId| User Id| string|\n\n <a name=Response[ATMDetails]></a> \n## Response[ATMDetails] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ATMDetails](#ATMDetails)</summary><ul><li>withdrawals [boolean]</li> <li>transactionHistory [boolean]</li> <li>deposits [boolean]</li> <li>cashDeposits [boolean]</li> <li>payments [boolean]</li> <li>cashPayments [boolean]</li> <li>workingHours [string]</li> <li>code [string]</li> <li>acceptsDeposits [boolean]</li> <li>latitude [number]</li> <li>longitude [number]</li> <li>area [integer]</li> <li>nameGR [string]</li> <li>nameEN [string]</li> <li>addressGR [string]</li> <li>addressEN [string]</li> <li>is24Hours [boolean]</li> <li>distance [number]</li> <li>areaNameGR [string]</li> <li>areaNameEN [string]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ATMDetails></a> \n## ATMDetails \nDetails of an ATM \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| withdrawals| Ανάληψη Μετρητών / Cash Withdrawal| boolean|\n| transactionHistory| Τελευταίες κινήσεις λογαριασμού / Transaction History| boolean|\n| deposits| Κατάθεση με φάκελο / Deposit (Envelope)| boolean|\n| cashDeposits| Κατάθεση μετρητών / Deposits (Cash)| boolean|\n| payments| Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) / Payments (Envelope)| boolean|\n| cashPayments| Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) με μετρητά / Payments (Cash)| boolean|\n| workingHours| Ώρες λειτουργίας / Working Hours| string|\n| code| ATM Code| string|\n| acceptsDeposits| Indication if it accepts deposits| boolean|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| is24Hours| Indication for 24 hour service| boolean|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=Request[BranchByAreaRequest]></a> \n## Request[BranchByAreaRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Branch by Area Request Data| object|\n\n <a name=BranchByAreaRequest></a> \n## BranchByAreaRequest \nBranch by Area Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| area| Area Code (if empty, then all branches are returned)| integer|\n| userId| User Id| string|\n\n <a name=Response[List[Branch]]></a> \n## Response[List[Branch]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[Branch](#Branch)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=Branch></a> \n## Branch \nBranch Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| Branch Code| string|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| zipCodePart1| Zip Code first part| string|\n| zipCodePart2| Zip Code second part| string|\n| phoneAreaCode| Phone - Area Code| string|\n| phoneNumber| Phone - number without area code| string|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=Request[NearestBranchRequest]></a> \n## Request[NearestBranchRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Nearest Branch Request Data| object|\n\n <a name=NearestBranchRequest></a> \n## NearestBranchRequest \nNearest Branch Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| distance| Search Radius (in meters) If left empty, it starts from 3000. If the results are less than 10, then looks for 4000, 8000 and 16000 consequently and then stops| number|\n| latitude| Search Latitude| number|\n| longitude| Search Longitude| number|\n| userId| -| string|\n\n <a name=Response[NearestBranchResponse]></a> \n## Response[NearestBranchResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[NearestBranchResponse](#NearestBranchResponse)</summary><ul><li>distance [number]</li> <li>branches [array[[Branch](#Branch)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=NearestBranchResponse></a> \n## NearestBranchResponse \nNearest Branc hResponse Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| distance| Search Radius (in meters) It is different from the request distance, in case it's left empty in the request (so it shows the actual result radius)| number|\n| branches| Result List| array[[Branch](#Branch)]|\n\n <a name=Request[BranchByRegionRequest]></a> \n## Request[BranchByRegionRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Branch by Region Request data| object|\n\n <a name=BranchByRegionRequest></a> \n## BranchByRegionRequest \nBranch by Region Request data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| userId| User Id| string|\n| postalCode| Postal Code| string|\n| region| Region| string|\n| city| City| string|\n\n <a name=Response[BranchByRegionResponse]></a> \n## Response[BranchByRegionResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[BranchByRegionResponse](#BranchByRegionResponse)</summary><ul><li>branches [array[[Branch](#Branch)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=BranchByRegionResponse></a> \n## BranchByRegionResponse \nBranch by Region Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| branches| Branches| array[[Branch](#Branch)]|\n\n <a name=Request[BranchDetailsRequest]></a> \n## Request[BranchDetailsRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Branch Details Request Data| object|\n\n <a name=BranchDetailsRequest></a> \n## BranchDetailsRequest \nBranch Details Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| Branch Code| string|\n| userId| User Id| string|\n| eQueueData| Indication whether eQueue data should be included| boolean|\n\n <a name=Response[BranchDetails]></a> \n## Response[BranchDetails] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[BranchDetails](#BranchDetails)</summary><ul><li>deposits [boolean]</li> <li>retailLoans [boolean]</li> <li>corporateLoans [boolean]</li> <li>merchantCards [boolean]</li> <li>corporateCustomers [boolean]</li> <li>importsExports [boolean]</li> <li>payments [boolean]</li> <li>exchange [boolean]</li> <li>personalBanking [boolean]</li> <li>corporateConsulting [boolean]</li> <li>safeDeposits [boolean]</li> <li>atm [boolean]</li> <li>aps [boolean]</li> <li>phoneInternetBanking [boolean]</li> <li>workingDaysEN [string]</li> <li>workingDaysGR [string]</li> <li>canIssueTickets [boolean]</li> <li>isClosedForTickets [boolean]</li> <li>canShowTimes [boolean]</li> <li>meanWaitingTime [integer]</li> <li>meanWaitingTimeNew [integer]</li> <li>currentTicketNumber [string]</li> <li>waitingCustomers [integer]</li> <li>activeTellers [integer]</li> <li>meanServiceTime [integer]</li> <li>opensAt [string]</li> <li>closesAt [string]</li> <li>timeNow [string]</li> <li>hasAppointments [boolean]</li> <li>code [string]</li> <li>latitude [number]</li> <li>longitude [number]</li> <li>area [integer]</li> <li>nameGR [string]</li> <li>nameEN [string]</li> <li>addressGR [string]</li> <li>addressEN [string]</li> <li>zipCodePart1 [string]</li> <li>zipCodePart2 [string]</li> <li>phoneAreaCode [string]</li> <li>phoneNumber [string]</li> <li>distance [number]</li> <li>areaNameGR [string]</li> <li>areaNameEN [string]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=BranchDetails></a> \n## BranchDetails \nBranch Details \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| deposits| -| boolean|\n| retailLoans| -| boolean|\n| corporateLoans| Δάνεια προς ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / Loans for SME| boolean|\n| merchantCards| -| boolean|\n| corporateCustomers| Εξυπηρέτηση Επιχειρήσεων με κύκλο εργασιών άνω των 2.5 εκ. / Corporate services| boolean|\n| importsExports| Εργασίες Εξωτερικού (Εισαγωγές - Εξαγωγές) / Foreign Services (Import Export)| boolean|\n| payments| Εμβάσματα &amp; Πληρωμές / Payments| boolean|\n| exchange| Αγορά Πώληση Συναλλάγματος / Money Exchange| boolean|\n| personalBanking| Στέλεχος Personal Banking / Personal Banking Services| boolean|\n| corporateConsulting| Σύμβουλος Πελατείας ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / SME Services| boolean|\n| safeDeposits| Θυρίδες Θησαυροφυλακίου / Safe Deposits| boolean|\n| atm| ΑΤΜ (καθημερινά 24 ώρες) / ATM (24x7)| boolean|\n| aps| APS (ωράριο καταστήματος) / APS (working hours)| boolean|\n| phoneInternetBanking| Phone/Internet Banking (ωράριο καταστήματος) / Phone &amp; Internet Banking (working hours)| boolean|\n| workingDaysEN| Μέρες &amp; Ώρες Λειρουργίας Αγγλικά| string|\n| workingDaysGR| Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours| string|\n| canIssueTickets| Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be issued| boolean|\n| isClosedForTickets| Indication wether the branch is closed for eQueue| boolean|\n| canShowTimes| Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a ticket can show waiting times| boolean|\n| meanWaitingTime| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in seconds)| integer|\n| meanWaitingTimeNew| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in seconds) NEW| integer|\n| currentTicketNumber| Τρέχον αριθμός εισιτηρίου / Current Ticket Number| string|\n| waitingCustomers| Πελάτες σε αναμονή / Waiting customers| integer|\n| activeTellers| Tellers that are active and are servicing customers| integer|\n| meanServiceTime| Estimated Service Time for a customer| integer|\n| opensAt| Opening Time for the branch for current day| string|\n| closesAt| Closing Time for the branch for current day| string|\n| timeNow| The current datetime (for client datetime offsets)| string|\n| hasAppointments| Whether it has electronic appointment capability| boolean|\n| code| Branch Code| string|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| zipCodePart1| Zip Code first part| string|\n| zipCodePart2| Zip Code second part| string|\n| phoneAreaCode| Phone - Area Code| string|\n| phoneNumber| Phone - number without area code| string|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=Request[EQueueBranchInfoRequest]></a> \n## Request[EQueueBranchInfoRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| EQueue Branch Info Request Data| object|\n\n <a name=EQueueBranchInfoRequest></a> \n## EQueueBranchInfoRequest \nEQueue Branch Info Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| Branch Code| string|\n\n <a name=Response[EQueueBranchInfo]></a> \n## Response[EQueueBranchInfo] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[EQueueBranchInfo](#EQueueBranchInfo)</summary><ul><li>code [string]</li> <li>canIssue [boolean]</li> <li>isClosed [boolean]</li> <li>canShowTimes [boolean]</li> <li>meanWaitingTime [integer]</li> <li>meanWaitingTimeNew [integer]</li> <li>currentTicketNumber [string]</li> <li>waitingCustomers [integer]</li> <li>opensAt [string]</li> <li>closesAt [string]</li> <li>timeNow [string]</li> <li>openSaturday [boolean]</li> <li>openSunday [boolean]</li> <li>activeTellers [integer]</li> <li>openTellers [integer]</li> <li>longestWaitingTimes [integer]</li> <li>meanServiceTime [integer]</li> <li>hasAppointments [boolean]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=EQueueBranchInfo></a> \n## EQueueBranchInfo \nEQueue Branch Info \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| Branch Code| string|\n| canIssue| Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be issued| boolean|\n| isClosed| Indication wether the branch is closed for eQueue| boolean|\n| canShowTimes| Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a ticket can show waiting times| boolean|\n| meanWaitingTime| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in seconds)| integer|\n| meanWaitingTimeNew| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in seconds) NEW| integer|\n| currentTicketNumber| Τρέχον αριθμός εισιτηρίου / Current Ticket Number| string|\n| waitingCustomers| Πελάτες σε αναμονή / Waiting customers| integer|\n| opensAt| Opening Time for the branch for current day| string|\n| closesAt| Closing Time for the branch for current day| string|\n| timeNow| The current datetime (for client datetime offsets)| string|\n| openSaturday| Whether its open Saturday| boolean|\n| openSunday| Whether its open Sunday| boolean|\n| activeTellers| Number of Active Tellers| integer|\n| openTellers| Number of Open Tellers| integer|\n| longestWaitingTimes| Longest Waiting Time| integer|\n| meanServiceTime| Mean Service Time| integer|\n| hasAppointments| Whether it has electronic appointment capability| boolean|\n\n <a name=Request[BranchTicketIssueRequest]></a> \n## Request[BranchTicketIssueRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Branch Ticket Issue Request Data| object|\n\n <a name=BranchTicketIssueRequest></a> \n## BranchTicketIssueRequest \nBranch Ticket Issue Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| branchCode| Κωδικός Καταστήματος / BranchCode| string|\n| reason| Αιτιολογία έκδοσης / Reason of issue| string|\n| comments| Comments| string|\n| deviceId| DeviceId or some unique id for the current installation| string|\n| pushNotificationId| the push notification id for android gcm, apple and windows phone| string|\n| pushNotificationType| the push notification type (android, iOS, WP, SMS)| string|\n| lang| If the culture info from the client is greek or english ('el', 'en')| string|\n\n <a name=Response[BranchTicketIssueResponse]></a> \n## Response[BranchTicketIssueResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[BranchTicketIssueResponse](#BranchTicketIssueResponse)</summary><ul><li>id [string]</li> <li>number [string]</li> <li>issueDate [string]</li> <li>issueBranchCode [string]</li> <li>issueBranchNameGR [string]</li> <li>issueBranchNameEN [string]</li> <li><details><summary>branchDetails [[BranchDetails](#BranchDetails)]</summary><ul><li>deposits [boolean]</li> <li>retailLoans [boolean]</li> <li>corporateLoans [boolean]</li> <li>merchantCards [boolean]</li> <li>corporateCustomers [boolean]</li> <li>importsExports [boolean]</li> <li>payments [boolean]</li> <li>exchange [boolean]</li> <li>personalBanking [boolean]</li> <li>corporateConsulting [boolean]</li> <li>safeDeposits [boolean]</li> <li>atm [boolean]</li> <li>aps [boolean]</li> <li>phoneInternetBanking [boolean]</li> <li>workingDaysEN [string]</li> <li>workingDaysGR [string]</li> <li>canIssueTickets [boolean]</li> <li>isClosedForTickets [boolean]</li> <li>canShowTimes [boolean]</li> <li>meanWaitingTime [integer]</li> <li>meanWaitingTimeNew [integer]</li> <li>currentTicketNumber [string]</li> <li>waitingCustomers [integer]</li> <li>activeTellers [integer]</li> <li>meanServiceTime [integer]</li> <li>opensAt [string]</li> <li>closesAt [string]</li> <li>timeNow [string]</li> <li>hasAppointments [boolean]</li> <li>code [string]</li> <li>latitude [number]</li> <li>longitude [number]</li> <li>area [integer]</li> <li>nameGR [string]</li> <li>nameEN [string]</li> <li>addressGR [string]</li> <li>addressEN [string]</li> <li>zipCodePart1 [string]</li> <li>zipCodePart2 [string]</li> <li>phoneAreaCode [string]</li> <li>phoneNumber [string]</li> <li>distance [number]</li> <li>areaNameGR [string]</li> <li>areaNameEN [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=BranchTicketIssueResponse></a> \n## BranchTicketIssueResponse \nBranch Ticket Issue Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| Unique ticket indentity (internal use only)| string|\n| number| Ticket Number| string|\n| issueDate| Issue DateTime| string|\n| issueBranchCode| Branch code for ticket| string|\n| issueBranchNameGR| Branch name for ticket| string|\n| issueBranchNameEN| Branch name for ticket| string|\n| branchDetails | Entity | <details><summary>[BranchDetails](#BranchDetails)</summary><ul><li>deposits [boolean]</li> <li>retailLoans [boolean]</li> <li>corporateLoans [boolean]</li> <li>merchantCards [boolean]</li> <li>corporateCustomers [boolean]</li> <li>importsExports [boolean]</li> <li>payments [boolean]</li> <li>exchange [boolean]</li> <li>personalBanking [boolean]</li> <li>corporateConsulting [boolean]</li> <li>safeDeposits [boolean]</li> <li>atm [boolean]</li> <li>aps [boolean]</li> <li>phoneInternetBanking [boolean]</li> <li>workingDaysEN [string]</li> <li>workingDaysGR [string]</li> <li>canIssueTickets [boolean]</li> <li>isClosedForTickets [boolean]</li> <li>canShowTimes [boolean]</li> <li>meanWaitingTime [integer]</li> <li>meanWaitingTimeNew [integer]</li> <li>currentTicketNumber [string]</li> <li>waitingCustomers [integer]</li> <li>activeTellers [integer]</li> <li>meanServiceTime [integer]</li> <li>opensAt [string]</li> <li>closesAt [string]</li> <li>timeNow [string]</li> <li>hasAppointments [boolean]</li> <li>code [string]</li> <li>latitude [number]</li> <li>longitude [number]</li> <li>area [integer]</li> <li>nameGR [string]</li> <li>nameEN [string]</li> <li>addressGR [string]</li> <li>addressEN [string]</li> <li>zipCodePart1 [string]</li> <li>zipCodePart2 [string]</li> <li>phoneAreaCode [string]</li> <li>phoneNumber [string]</li> <li>distance [number]</li> <li>areaNameGR [string]</li> <li>areaNameEN [string]</li> </ul></details> | \n\n <a name=Request[CancelBranchTicketRequest]></a> \n## Request[CancelBranchTicketRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Cancel Branch Ticket Request Data| object|\n\n <a name=CancelBranchTicketRequest></a> \n## CancelBranchTicketRequest \nCancel Branch Ticket Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| Unique ticket indentity (internal use only)| string|\n| deviceId| DeviceId or some unique id for the current installation| string|\n\n <a name=Response[CancelBranchTicketResponse]></a> \n## Response[CancelBranchTicketResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[CancelBranchTicketResponse](#CancelBranchTicketResponse)</summary><ul><li>success [boolean]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=CancelBranchTicketResponse></a> \n## CancelBranchTicketResponse \nCancel Branch Ticket Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| success| Indicates Success| boolean|\n\n <a name=Request[TicketUsageRequest]></a> \n## Request[TicketUsageRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Ticket Usage Request Data| object|\n\n <a name=TicketUsageRequest></a> \n## TicketUsageRequest \nTicket Usage Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| Unique ticket indentity (internal use only)| string|\n| deviceId| DeviceId or some unique id for the current installation| string|\n| wasUseful| Indication wether the ticket was of use to the user| boolean|\n\n <a name=Response[TicketUsageResponse]></a> \n## Response[TicketUsageResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[TicketUsageResponse](#TicketUsageResponse)</summary><ul><li>success [boolean]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=TicketUsageResponse></a> \n## TicketUsageResponse \nTicket Usage Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| success| Indicates Success| boolean|\n\n <a name=Request[RateBranchTicketRequest]></a> \n## Request[RateBranchTicketRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Rate Branch Ticket Request Data| object|\n\n <a name=RateBranchTicketRequest></a> \n## RateBranchTicketRequest \nRate Branch Ticket Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| Unique ticket indentity (internal use only)| string|\n| deviceId| DeviceId or some unique id for the current installation| string|\n| score| The score of the ticket rating| number|\n| comment| User comment| string|\n\n <a name=Response[RateBranchTicketResponse]></a> \n## Response[RateBranchTicketResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[RateBranchTicketResponse](#RateBranchTicketResponse)</summary><ul><li>success [boolean]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=RateBranchTicketResponse></a> \n## RateBranchTicketResponse \nRate Branch Ticket Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| success| Indicates Success| boolean|\n\n <a name=Request[NotUsefulTicketFeedbackRequest]></a> \n## Request[NotUsefulTicketFeedbackRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Not Useful Ticket Feedback Request Data| object|\n\n <a name=NotUsefulTicketFeedbackRequest></a> \n## NotUsefulTicketFeedbackRequest \nNot Useful Ticket Feedback Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| Unique ticket indentity (internal use only)| string|\n| deviceId| DeviceId or some unique id for the current installation| string|\n| notUsefulReason| Reason that the ticket was not usefull| string|\n| comment| User comment| string|\n\n <a name=Response[NotUsefulTicketFeedbackResponse]></a> \n## Response[NotUsefulTicketFeedbackResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[NotUsefulTicketFeedbackResponse](#NotUsefulTicketFeedbackResponse)</summary><ul><li>success [boolean]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=NotUsefulTicketFeedbackResponse></a> \n## NotUsefulTicketFeedbackResponse \nNot Useful Ticket Feedback Response Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| success| Indicates success| boolean|\n\n <a name=Request[EQueueAvailableBranchesRequest]></a> \n## Request[EQueueAvailableBranchesRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| -| object|\n\n <a name=EQueueAvailableBranchesRequest></a> \n## EQueueAvailableBranchesRequest \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n\n <a name=Response[List[EQueueAvailableBranch]]></a> \n## Response[List[EQueueAvailableBranch]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[EQueueAvailableBranch](#EQueueAvailableBranch)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=EQueueAvailableBranch></a> \n## EQueueAvailableBranch \nEQueue Available Branch \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| code| Branch Code| string|\n| canIssue| Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be issued| boolean|\n| isClosed| Indication wether the branch is closed for eQueue| boolean|\n| canShowTimes| Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a ticket can show waiting times| boolean|\n| openSaturday| Whether its open Saturday| boolean|\n| openSunday| Whether its open Sunday| boolean|\n| hasAppointments| Whether it has electronic appointment capability| boolean|\n\n <a name=Request[FindBranchFasterServiceRequest]></a> \n## Request[FindBranchFasterServiceRequest] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| header| -| object|\n| payload| Find Branch Faster Service Request Data| object|\n\n <a name=FindBranchFasterServiceRequest></a> \n## FindBranchFasterServiceRequest \nFind Branch Faster Service Request Data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| branchCode| The branch code of the branch we want to find a better service If left null then the service will use the coordinates below This given branch will not be returned| string|\n| latitude| Search Latitude| number|\n| longitude| Search Longitude| number|\n| distanceThreshold| Search Radius threshold (in meters) If left empty, it will search a default radious of 3000 meters| number|\n| ItemThreshold| The maximum number of items it will examine (the maximum overall is 25) If left null, we use a default of 5| integer|\n| waitingThreshold| The minimum waiting time we want to find (in seconds) If we search with branch code the minimum will be that branch's waiting time minus 5 minutes If left null without branch, there will be no restriction| integer|\n\n <a name=Response[List[BranchDetails]]></a> \n## Response[List[BranchDetails]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[BranchDetails](#BranchDetails)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=Response[BranchDetailsV2]></a> \n## Response[BranchDetailsV2] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[BranchDetailsV2](#BranchDetailsV2)</summary><ul><li>branchServicesEL [array]</li> <li>branchServicesEN [array]</li> <li>branchEServicesEL [array]</li> <li>branchEServicesEN [array]</li> <li>workingDaysEN [string]</li> <li>workingDaysGR [string]</li> <li>canIssueTickets [boolean]</li> <li>isClosedForTickets [boolean]</li> <li>canShowTimes [boolean]</li> <li>meanWaitingTime [integer]</li> <li>meanWaitingTimeNew [integer]</li> <li>currentTicketNumber [string]</li> <li>waitingCustomers [integer]</li> <li>activeTellers [integer]</li> <li>meanServiceTime [integer]</li> <li>opensAt [string]</li> <li>closesAt [string]</li> <li>timeNow [string]</li> <li>hasAppointments [boolean]</li> <li>code [string]</li> <li>latitude [number]</li> <li>longitude [number]</li> <li>area [integer]</li> <li>nameGR [string]</li> <li>nameEN [string]</li> <li>addressGR [string]</li> <li>addressEN [string]</li> <li>zipCodePart1 [string]</li> <li>zipCodePart2 [string]</li> <li>phoneAreaCode [string]</li> <li>phoneNumber [string]</li> <li>distance [number]</li> <li>areaNameGR [string]</li> <li>areaNameEN [string]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=BranchDetailsV2></a> \n## BranchDetailsV2 \nBranch Details V2 \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| branchServicesEL| Provided Services in Greek| array|\n| branchServicesEN| Provided Services in English| array|\n| branchEServicesEL| Provided e-Services in Greek| array|\n| branchEServicesEN| Provided e-Services in English| array|\n| workingDaysEN| Μέρες &amp; Ώρες Λειρουργίας Αγγλικά| string|\n| workingDaysGR| Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours| string|\n| canIssueTickets| Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be issued| boolean|\n| isClosedForTickets| Indication wether the branch is closed for eQueue| boolean|\n| canShowTimes| Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a ticket can show waiting times| boolean|\n| meanWaitingTime| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in seconds)| integer|\n| meanWaitingTimeNew| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in seconds) NEW| integer|\n| currentTicketNumber| Τρέχον αριθμός εισιτηρίου / Current Ticket Number| string|\n| waitingCustomers| Πελάτες σε αναμονή / Waiting customers| integer|\n| activeTellers| Tellers that are active and are servicing customers| integer|\n| meanServiceTime| Estimated Service Time for a customer| integer|\n| opensAt| Opening Time for the branch for current day| string|\n| closesAt| Closing Time for the branch for current day| string|\n| timeNow| The current datetime (for client datetime offsets)| string|\n| hasAppointments| Whether it has electronic appointment capability| boolean|\n| code| Branch Code| string|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| zipCodePart1| Zip Code first part| string|\n| zipCodePart2| Zip Code second part| string|\n| phoneAreaCode| Phone - Area Code| string|\n| phoneNumber| Phone - number without area code| string|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=Response[ATMDetailsV2]></a> \n## Response[ATMDetailsV2] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ATMDetailsV2](#ATMDetailsV2)</summary><ul><li>atmServicesEL [array]</li> <li>atmServicesEN [array]</li> <li>workingHours [string]</li> <li>code [string]</li> <li>acceptsDeposits [boolean]</li> <li>latitude [number]</li> <li>longitude [number]</li> <li>area [integer]</li> <li>nameGR [string]</li> <li>nameEN [string]</li> <li>addressGR [string]</li> <li>addressEN [string]</li> <li>is24Hours [boolean]</li> <li>distance [number]</li> <li>areaNameGR [string]</li> <li>areaNameEN [string]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ATMDetailsV2></a> \n## ATMDetailsV2 \nATM Details V2 \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| atmServicesEL| Serives in Greek| array|\n| atmServicesEN| Serives in English| array|\n| workingHours| Ώρες λειτουργίας / Working Hours| string|\n| code| ATM Code| string|\n| acceptsDeposits| Indication if it accepts deposits| boolean|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| is24Hours| Indication for 24 hour service| boolean|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=SandboxRequest></a> \n## SandboxRequest \nSandbox Request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| sandboxId| Sandbox unique identifier. E.g MySandbox| string|\n\n <a name=SandboxDataModel></a> \n## SandboxDataModel \nSandbox Data Model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| sandboxId| Sandbox unique identifier. E.g MySandbox| string|\n| users| Sandbox users.| array|\n| regions| Sandbox regions.| array|\n| branches| Sandbox branches.| array|\n| atms| Sandbox atms.| array|\n| branchTickets| Sandbox branch tickets.| array|\n\n <a name=SandboxUser></a> \n## SandboxUser \nSandbox User \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| Username| Sandbox username| string|\n| ProviderId| Sandbox provider identifier (e.g NBG.gr)| string|\n| Provider| Sandbox provider (e.g NBG)| string|\n\n <a name=SandboxRegion></a> \n## SandboxRegion \nRegion Details \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| type| Region Type| string|\n| id| Record ID (system internal reference id)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| parentId| Parent ID (for Area -&gt; City, for City -&gt; Region)| integer|\n\n <a name=SandboxBranch></a> \n## SandboxBranch \nBranch Details \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| branchServicesEL| Branch Services EL| array|\n| branchServicesEN| Branch Services EN| array|\n| branchEServicesEL| Branch EServices EL| array|\n| branchEServicesEN| Branch EServices EN| array|\n| openSaturday| Whether its open Saturday| boolean|\n| openSunday| Whether its open Sunday| boolean|\n| openTellers| Number of open tellers| integer|\n| longestWaitingTimes| Longest waiting time| integer|\n| deposits| -| boolean|\n| retailLoans| -| boolean|\n| corporateLoans| Δάνεια προς ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / Loans for SME| boolean|\n| merchantCards| -| boolean|\n| corporateCustomers| Εξυπηρέτηση Επιχειρήσεων με κύκλο εργασιών άνω των 2.5 εκ. / Corporate services| boolean|\n| importsExports| Εργασίες Εξωτερικού (Εισαγωγές - Εξαγωγές) / Foreign Services (Import Export)| boolean|\n| payments| Εμβάσματα &amp; Πληρωμές / Payments| boolean|\n| exchange| Αγορά Πώληση Συναλλάγματος / Money Exchange| boolean|\n| personalBanking| Στέλεχος Personal Banking / Personal Banking Services| boolean|\n| corporateConsulting| Σύμβουλος Πελατείας ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / SME Services| boolean|\n| safeDeposits| Θυρίδες Θησαυροφυλακίου / Safe Deposits| boolean|\n| atm| ΑΤΜ (καθημερινά 24 ώρες) / ATM (24x7)| boolean|\n| aps| APS (ωράριο καταστήματος) / APS (working hours)| boolean|\n| phoneInternetBanking| Phone/Internet Banking (ωράριο καταστήματος) / Phone &amp; Internet Banking (working hours)| boolean|\n| workingDaysEN| Μέρες &amp; Ώρες Λειρουργίας Αγγλικά| string|\n| workingDaysGR| Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours| string|\n| canIssueTickets| Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be issued| boolean|\n| isClosedForTickets| Indication wether the branch is closed for eQueue| boolean|\n| canShowTimes| Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a ticket can show waiting times| boolean|\n| meanWaitingTime| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in seconds)| integer|\n| meanWaitingTimeNew| Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in seconds) NEW| integer|\n| currentTicketNumber| Τρέχον αριθμός εισιτηρίου / Current Ticket Number| string|\n| waitingCustomers| Πελάτες σε αναμονή / Waiting customers| integer|\n| activeTellers| Tellers that are active and are servicing customers| integer|\n| meanServiceTime| Estimated Service Time for a customer| integer|\n| opensAt| Opening Time for the branch for current day| string|\n| closesAt| Closing Time for the branch for current day| string|\n| timeNow| The current datetime (for client datetime offsets)| string|\n| hasAppointments| Whether it has electronic appointment capability| boolean|\n| code| Branch Code| string|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| zipCodePart1| Zip Code first part| string|\n| zipCodePart2| Zip Code second part| string|\n| phoneAreaCode| Phone - Area Code| string|\n| phoneNumber| Phone - number without area code| string|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=SandboxAtm></a> \n## SandboxAtm \nAtm Details \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| atmServicesEL| Branch Services EL| array|\n| atmServicesEN| Branch Services EN| array|\n| withdrawals| Ανάληψη Μετρητών / Cash Withdrawal| boolean|\n| transactionHistory| Τελευταίες κινήσεις λογαριασμού / Transaction History| boolean|\n| deposits| Κατάθεση με φάκελο / Deposit (Envelope)| boolean|\n| cashDeposits| Κατάθεση μετρητών / Deposits (Cash)| boolean|\n| payments| Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) / Payments (Envelope)| boolean|\n| cashPayments| Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) με μετρητά / Payments (Cash)| boolean|\n| workingHours| Ώρες λειτουργίας / Working Hours| string|\n| code| ATM Code| string|\n| acceptsDeposits| Indication if it accepts deposits| boolean|\n| latitude| Latitude| number|\n| longitude| Longitude| number|\n| area| Area Code (the system internal id for the area)| integer|\n| nameGR| Name in Greek| string|\n| nameEN| Name in English| string|\n| addressGR| Address in Greek| string|\n| addressEN| Address in English| string|\n| is24Hours| Indication for 24 hour service| boolean|\n| distance| Distance in meters (if the request was for nearest)| number|\n| areaNameGR| Area Name in Greek| string|\n| areaNameEN| Area Name in English| string|\n\n <a name=SandboxBranchTicket></a> \n## SandboxBranchTicket \nBranch Tickets \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| ticketId| Ticket identification| string|\n| number| Ticket number| string|\n| issueBranchCode| Branch where ticket was issued| string|\n| issueDate| Date when ticket was issued| string|\n| deviceId| Device identifiaction that issued ticket| string|\n| score| Score| number|\n| ratingComment| Tickets rating related comments| string|\n| feedbackComment| Tickets feedback related comments| string|\n| wasUseful| Indication whether ticket was useful| boolean|\n| notUsefulReason| Not useful ticket reason| string|\n| ticketStatus| Ticket status| string|\n\n <a name=CreateUserRequest></a> \n## CreateUserRequest \nCreate user for sandbox \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| username| User unique username| string|\n"
  contact: {}
host: apis.nbg.gr
basePath: /sandbox/equeueing/headers/v1.2
schemes:
  - https
paths:
  /api/EQueueing/regions:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Regions Request Data
          schema:
            $ref: '#/definitions/Request[RegionRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[RegionResponse]'
      operationId: EQueueing_regions
      summary: Get Regions
      description: "Returns a list of regions that match the requested criteria.\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /regions \r\n    {\r\n        \"payload\": {\r\n            \"parentId\": 5,\r\n            \"type\": \"City\",\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"parentId\":0,\"type\":\"WideRegion\",\"userId\":\"<ADD
            STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"parentId\":0,\"type\":\"WideRegion\",\"userId\":\"<ADD
            STRING VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"parentId\\\":0,\\\"type\\\":\\\"WideRegion\\\",\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"parentId\":0,\"type\":\"WideRegion\",\"userId\":\"<ADD
            STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { parentId: 0, type: 'WideRegion', userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"parentId\":0,\"type\":\"WideRegion\",\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"parentId\":0,\"type\":\"WideRegion\",\"userId\":\"<ADD
            STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/regions", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"parentId\":0,\"type\":\"WideRegion\",\"userId\":\"<ADD
            STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/regions \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"parentId":0,"type":"WideRegion","userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/areaAtms:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: ATMB by Area Request Data
          schema:
            $ref: '#/definitions/Request[ATMByAreaRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Your Sandbox ID
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: The user name of your (Sandbox) test user
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider ID (NBG.gr)
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name (NBG)
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[ATM]]'
      operationId: EQueueing_areaAtms
      summary: Get Area ATMs
      description: "Returns a list of ATMs in the specified area\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /areaAtms \r\n    {\r\n        \"payload\": {\r\n            \"area\": 5,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"area\\\":0,\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: { area: 0, userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaAtms \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"area":0,"userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/nearestAtms:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: ATM by Area Request Data
          schema:
            $ref: '#/definitions/Request[NearestATMRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[NearestATMResponse]'
      operationId: EQueueing_nearestAtms
      summary: Get Nearest ATMs
      description: "Returns a list of near ATMs based on the\r\nrequested criteria\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /nearestAtms \r\n    {\r\n        \"payload\": {\r\n            \"distance\": 370000,\r\n            \"latitude\": 37,\r\n            \"longitude\": 26,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"distance\\\":0,\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { distance: 0,
                    latitude: 0,
                    longitude: 0,
                    userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestAtms \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"distance":0,"latitude":0,"longitude":0,"userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/atmDetails:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: ATM Details Request Data
          schema:
            $ref: '#/definitions/Request[ATMDetailsRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ATMDetails]'
      operationId: EQueueing_atmDetails
      summary: Get ATM Details
      description: "Returns details of an ATM\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /atmDetails \r\n    {\r\n        \"payload\": {\r\n            \"code\": NB0869N6,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: { code: '<ADD STRING VALUE>', userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetails \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"code":"<ADD STRING VALUE>","userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/areaBranches:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Branch by Area Request Data
          schema:
            $ref: '#/definitions/Request[BranchByAreaRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[Branch]]'
      operationId: EQueueing_areaBranches
      summary: Get Area Branches
      description: "Returns a list of Branches in the specified area\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /areaBranches \r\n        {\r\n            \"payload\": {\r\n            \"area\": 5,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"area\\\":0,\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: { area: 0, userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"area\":0,\"userId\":\"<ADD STRING
            VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/areaBranches \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"area":0,"userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/nearestBranches:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Nearest Branch Request Data
          schema:
            $ref: '#/definitions/Request[NearestBranchRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[NearestBranchResponse]'
      operationId: EQueueing_nearestBranches
      summary: Get Nearest Branches
      description: "Returns a list of near Branches based on the\r\nrequested criteria\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /nearestBranches \r\n    {\r\n        \"payload\": {\r\n            \"distance\": 370000,\r\n            \"latitude\": 37,\r\n            \"longitude\": 26,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"distance\\\":0,\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { distance: 0,
                    latitude: 0,
                    longitude: 0,
                    userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestBranches \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"distance":0,"latitude":0,"longitude":0,"userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/nearestRetailBranches:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Nearest Branch Request Data
          schema:
            $ref: '#/definitions/Request[NearestBranchRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[NearestBranchResponse]'
      operationId: EQueueing_nearestRetailBranches
      summary: Get Nearest Retail Branches
      description: "Returns a list of near retail Branches based on the\r\nrequested criteria\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /nearestRetailBranches \r\n    {\r\n        \"payload\": {\r\n            \"distance\": 370000,\r\n            \"latitude\": 37,\r\n            \"longitude\": 26,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"distance\\\":0,\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { distance: 0,
                    latitude: 0,
                    longitude: 0,
                    userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING
            VALUE>\"},\"payload\":{\"distance\":0,\"latitude\":0,\"longitude\":0,\"userId\":\"<ADD
            STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranches \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"distance":0,"latitude":0,"longitude":0,"userId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/nearestRetailBranchesByPostalCode:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Nearest Branch Request Data
          schema:
            $ref: '#/definitions/Request[BranchByRegionRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BranchByRegionResponse]'
      operationId: EQueueing_nearestRetailBranchesByPostalCode
      summary: Get Nearest Retail Branches (by Postal Code)
      description: "Returns a list of near retail Branches based on the\r\nrequested criteria\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /nearestRetailBranchesByPostalCode \r\n    {\r\n        \"payload\": {\r\n            \"postalCode\": 11743,\r\n            \"region\": 5,\r\n            \"city\": \"ATHENS CENTER\",\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"postalCode\":\"<ADD STRING VALUE>\",\"region\":\"<ADD
            STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"postalCode\":\"<ADD STRING VALUE>\",\"region\":\"<ADD
            STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"postalCode\\\":\\\"<ADD STRING VALUE>\\\",\\\"region\\\":\\\"<ADD STRING VALUE>\\\",\\\"city\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"postalCode\":\"<ADD STRING VALUE>\",\"region\":\"<ADD
            STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { userId: '<ADD STRING VALUE>',
                    postalCode: '<ADD STRING VALUE>',
                    region: '<ADD STRING VALUE>',
                    city: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING VALUE>\",\"postalCode\":\"<ADD STRING VALUE>\",\"region\":\"<ADD STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"postalCode\":\"<ADD STRING VALUE>\",\"region\":\"<ADD
            STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"userId\":\"<ADD STRING
            VALUE>\",\"postalCode\":\"<ADD STRING VALUE>\",\"region\":\"<ADD
            STRING VALUE>\",\"city\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/nearestRetailBranchesByPostalCode \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"userId":"<ADD STRING VALUE>","postalCode":"<ADD STRING VALUE>","region":"<ADD STRING VALUE>","city":"<ADD STRING VALUE>"}}'
  /api/EQueueing/branchDetails:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Branch Details Request Data
          schema:
            $ref: '#/definitions/Request[BranchDetailsRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BranchDetails]'
      operationId: EQueueing_branchDetails
      summary: Get Branch Details
      description: "Returns details of a Branch\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /branchDetails \r\n    {\r\n        \"payload\": {\r\n            \"code\": 080,\r\n            \"userId\": \"1533\",\r\n            \"eQueueData\": true\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"eQueueData\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { code: '<ADD STRING VALUE>',
                    userId: '<ADD STRING VALUE>',
                    eQueueData: false } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetails \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"code":"<ADD STRING VALUE>","userId":"<ADD STRING VALUE>","eQueueData":false}}'
  /api/EQueueing/queueInfo:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: EQueue Branch Info Request Data
          schema:
            $ref: '#/definitions/Request[EQueueBranchInfoRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[EQueueBranchInfo]'
      operationId: EQueueing_queueInfo
      summary: Get Queue Info
      description: "Returns the queue information for the specified branch\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /queueInfo \r\n    {\r\n        \"payload\": {\r\n            \"code\": 080\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"code\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: { code: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/queueInfo \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"code":"<ADD STRING VALUE>"}}'
  /api/EQueueing/issueTicket:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Branch Ticket Issue Request Data
          schema:
            $ref: '#/definitions/Request[BranchTicketIssueRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BranchTicketIssueResponse]'
      operationId: EQueueing_issueTicket
      summary: Issue Ticket
      description: "Creates a Ticket for the specified\r\ndevice to the specified branch\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /issueTicket \r\n    {\r\n        \"payload\": {\r\n            \"branchCode\": \"090\",\r\n            \"reason\": \"General\",\r\n            \"comments\": \"Please Issue a Ticket for me\",\r\n            \"deviceId\": \"5B474BF4-9A60-4BE6-9C0E-8720CAB11498\",\r\n            \"pushNotificationId\": \"44E65E32-7645-4434-952C-9BBBEACDE524\",\r\n            \"pushNotificationType\": \"Android\",\r\n            \"lang\": \"string\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"reason\":\"General\",\"comments\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"pushNotificationId\":\"<ADD STRING
            VALUE>\",\"pushNotificationType\":\"Android\",\"lang\":\"<ADD STRING
            VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"reason\":\"General\",\"comments\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"pushNotificationId\":\"<ADD STRING
            VALUE>\",\"pushNotificationType\":\"Android\",\"lang\":\"<ADD STRING
            VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"branchCode\\\":\\\"<ADD STRING VALUE>\\\",\\\"reason\\\":\\\"General\\\",\\\"comments\\\":\\\"<ADD STRING VALUE>\\\",\\\"deviceId\\\":\\\"<ADD STRING VALUE>\\\",\\\"pushNotificationId\\\":\\\"<ADD STRING VALUE>\\\",\\\"pushNotificationType\\\":\\\"Android\\\",\\\"lang\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"reason\":\"General\",\"comments\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"pushNotificationId\":\"<ADD STRING
            VALUE>\",\"pushNotificationType\":\"Android\",\"lang\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { branchCode: '<ADD STRING VALUE>',
                    reason: 'General',
                    comments: '<ADD STRING VALUE>',
                    deviceId: '<ADD STRING VALUE>',
                    pushNotificationId: '<ADD STRING VALUE>',
                    pushNotificationType: 'Android',
                    lang: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING VALUE>\",\"reason\":\"General\",\"comments\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"pushNotificationId\":\"<ADD STRING VALUE>\",\"pushNotificationType\":\"Android\",\"lang\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"reason\":\"General\",\"comments\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"pushNotificationId\":\"<ADD STRING
            VALUE>\",\"pushNotificationType\":\"Android\",\"lang\":\"<ADD STRING
            VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"reason\":\"General\",\"comments\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"pushNotificationId\":\"<ADD STRING
            VALUE>\",\"pushNotificationType\":\"Android\",\"lang\":\"<ADD STRING
            VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/issueTicket \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"branchCode":"<ADD STRING VALUE>","reason":"General","comments":"<ADD STRING VALUE>","deviceId":"<ADD STRING VALUE>","pushNotificationId":"<ADD STRING VALUE>","pushNotificationType":"Android","lang":"<ADD STRING VALUE>"}}'
  /api/EQueueing/cancelTicket:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Cancel Branch Ticket Request Data
          schema:
            $ref: '#/definitions/Request[CancelBranchTicketRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[CancelBranchTicketResponse]'
      operationId: EQueueing_cancelTicket
      summary: Cancel Ticket
      description: "Cancels a Ticket for specified the device\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /cancelTicket \r\n    {\r\n        \"payload\": {\r\n            \"id\": \"D88A4291-6F6C-4386-B911-AC815102189B\",\r\n            \"deviceId\": \"5B474BF4-9A60-4BE6-9C0E-8720CAB11498\",\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"deviceId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: { id: '<ADD STRING VALUE>', deviceId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/cancelTicket \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"id":"<ADD STRING VALUE>","deviceId":"<ADD STRING VALUE>"}}'
  /api/EQueueing/ticketUsage:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Ticket Usage Request Data
          schema:
            $ref: '#/definitions/Request[TicketUsageRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[TicketUsageResponse]'
      operationId: EQueueing_ticketUsage
      summary: Ticket Usage
      description: "Submits whether a Ticket was useful\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /ticketUsage \r\n    {\r\n        \"payload\": {\r\n            \"id\": \"D88A4291-6F6C-4386-B911-AC815102189B\",\r\n            \"deviceId\": \"5B474BF4-9A60-4BE6-9C0E-8720CAB11498\",\r\n            \"wasUseful\": false\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"wasUseful\":false}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"deviceId\\\":\\\"<ADD STRING VALUE>\\\",\\\"wasUseful\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { id: '<ADD STRING VALUE>',
                    deviceId: '<ADD STRING VALUE>',
                    wasUseful: false } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"wasUseful\":false}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"wasUseful\":false}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"wasUseful\":false}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/ticketUsage \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"id":"<ADD STRING VALUE>","deviceId":"<ADD STRING VALUE>","wasUseful":false}}'
  /api/EQueueing/rateTicket:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Rate Branch Ticket Request Data
          schema:
            $ref: '#/definitions/Request[RateBranchTicketRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[RateBranchTicketResponse]'
      operationId: EQueueing_rateTicket
      summary: Rate Ticket
      description: "Submits a rating for a Ticket\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /rateTicket \r\n    {\r\n        \"payload\": {\r\n            \"id\": \"D88A4291-6F6C-4386-B911-AC815102189B\",\r\n            \"deviceId\": \"5B474BF4-9A60-4BE6-9C0E-8720CAB11498\",\r\n            \"score\": 100,\r\n            \"comment\": \"Good, good...\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"score\":0,\"comment\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"score\":0,\"comment\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"deviceId\\\":\\\"<ADD STRING VALUE>\\\",\\\"score\\\":0,\\\"comment\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"score\":0,\"comment\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { id: '<ADD STRING VALUE>',
                    deviceId: '<ADD STRING VALUE>',
                    score: 0,
                    comment: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"score\":0,\"comment\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"score\":0,\"comment\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"score\":0,\"comment\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/rateTicket \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"id":"<ADD STRING VALUE>","deviceId":"<ADD STRING VALUE>","score":0,"comment":"<ADD STRING VALUE>"}}'
  /api/EQueueing/notUsedTicketFeedback:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Not Useful Ticket Feedback Request Data
          schema:
            $ref: '#/definitions/Request[NotUsefulTicketFeedbackRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[NotUsefulTicketFeedbackResponse]'
      operationId: EQueueing_notUsedTicketFeedback
      summary: Not Useful Ticket Feedback
      description: "Submits feedback about a ticket that was not useful\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /notUsedTicketFeedback \r\n    {\r\n        \"payload\": {\r\n            \"id\": \"D88A4291-6F6C-4386-B911-AC815102189B\",\r\n            \"deviceId\": \"5B474BF4-9A60-4BE6-9C0E-8720CAB11498\",\r\n            \"notUsefulReason\": \"NotInTime\",\r\n            \"comment\": \"Ticket was not in time!!\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"notUsefulReason\":\"NotInTime\",\"comment\":\"<ADD STRING
            VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"notUsefulReason\":\"NotInTime\",\"comment\":\"<ADD STRING
            VALUE>\"}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"deviceId\\\":\\\"<ADD STRING VALUE>\\\",\\\"notUsefulReason\\\":\\\"NotInTime\\\",\\\"comment\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"notUsefulReason\":\"NotInTime\",\"comment\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { id: '<ADD STRING VALUE>',
                    deviceId: '<ADD STRING VALUE>',
                    notUsefulReason: 'NotInTime',
                    comment: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"notUsefulReason\":\"NotInTime\",\"comment\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"notUsefulReason\":\"NotInTime\",\"comment\":\"<ADD STRING
            VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"id\":\"<ADD STRING
            VALUE>\",\"deviceId\":\"<ADD STRING
            VALUE>\",\"notUsefulReason\":\"NotInTime\",\"comment\":\"<ADD STRING
            VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/notUsedTicketFeedback \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"id":"<ADD STRING VALUE>","deviceId":"<ADD STRING VALUE>","notUsefulReason":"NotInTime","comment":"<ADD STRING VALUE>"}}'
  /api/EQueueing/eQueueBranches:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: EQueue Available Branches Request Data
          schema:
            $ref: '#/definitions/Request[EQueueAvailableBranchesRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[EQueueAvailableBranch]]'
      operationId: EQueueing_eQueueBranches
      summary: EQueue Branches
      description: "Returns branches that support e-tickets\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /eQueueBranches \r\n    {\r\n        \"payload\": {}\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: {} },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/eQueueBranches \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{}}'
  /api/EQueueing/findBranchFasterService:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: EQueue Available Branches Request Data
          schema:
            $ref: '#/definitions/Request[FindBranchFasterServiceRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[BranchDetails]]'
      operationId: EQueueing_findBranchFasterService
      summary: Find Faster Service Branch
      description: "Returns branches with faster service \r\nbased on the requested criteria\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /findBranchFasterService \r\n    {\r\n        \"payload\": {\r\n             \"branchCode\": \"090\",\r\n             \"latitude\": 0,\r\n             \"longitude\": 0,\r\n             \"distanceThreshold\": 15000,\r\n             \"ItemThreshold\": 150000,\r\n             \"waitingThreshold\":15000\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"distanceThreshold\":0,\"ItemThreshold\":0,\"waitingThreshold\":0}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"distanceThreshold\":0,\"ItemThreshold\":0,\"waitingThreshold\":0}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"branchCode\\\":\\\"<ADD STRING VALUE>\\\",\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"distanceThreshold\\\":0,\\\"ItemThreshold\\\":0,\\\"waitingThreshold\\\":0}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"distanceThreshold\":0,\"ItemThreshold\":0,\"waitingThreshold\":0}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { branchCode: '<ADD STRING VALUE>',
                    latitude: 0,
                    longitude: 0,
                    distanceThreshold: 0,
                    ItemThreshold: 0,
                    waitingThreshold: 0 } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING VALUE>\",\"latitude\":0,\"longitude\":0,\"distanceThreshold\":0,\"ItemThreshold\":0,\"waitingThreshold\":0}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"distanceThreshold\":0,\"ItemThreshold\":0,\"waitingThreshold\":0}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"branchCode\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"distanceThreshold\":0,\"ItemThreshold\":0,\"waitingThreshold\":0}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/findBranchFasterService \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"branchCode":"<ADD STRING VALUE>","latitude":0,"longitude":0,"distanceThreshold":0,"ItemThreshold":0,"waitingThreshold":0}}'
  /api/EQueueing/branchDetailsv2:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: Branch Details Request Data
          schema:
            $ref: '#/definitions/Request[BranchDetailsRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BranchDetailsV2]'
      operationId: EQueueing_branchDetailsv2
      summary: Get Branch Details (v2)
      description: "Returns details of a Branch\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /branchDetailsv2 \r\n    {\r\n        \"payload\": {\r\n            \"code\": 080,\r\n            \"userId\": \"1533\",\r\n            \"eQueueData\": true\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"eQueueData\\\":false}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload:
                  { code: '<ADD STRING VALUE>',
                    userId: '<ADD STRING VALUE>',
                    eQueueData: false } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"eQueueData\":false}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/branchDetailsv2 \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"code":"<ADD STRING VALUE>","userId":"<ADD STRING VALUE>","eQueueData":false}}'
  /api/EQueueing/atmDetailsv2:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - EQueueing
      parameters:
        - name: request
          description: ATM Details Request Data
          schema:
            $ref: '#/definitions/Request[ATMDetailsRequest]'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User ID
          in: header
          required: true
          type: string
          default: ''
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
        - name: application_id
          description: Application ID
          in: header
          required: false
          type: string
          default: ''
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ATMDetailsV2]'
      operationId: EQueueing_atmDetailsv2
      summary: Get ATM Details (v2)
      description: "Returns details of an ATM\r\n            \r\n            \r\nSample request:\r\n            \r\n    POST /atmDetailsv2 \r\n    {\r\n        \"payload\": {\r\n            \"code\": NB0869N6,\r\n            \"userId\": \"1533\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "application_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("application_id", "SOME_STRING_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"header\":{\"ID\":\"<ADD
            STRING VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2\"\n\n\tpayload := strings.NewReader(\"{\\\"header\\\":{\\\"ID\\\":\\\"<ADD STRING VALUE>\\\",\\\"application\\\":\\\"<ADD STRING VALUE>\\\",\\\"bank\\\":\\\"NBG\\\",\\\"hostSession\\\":\\\"<ADD STRING VALUE>\\\",\\\"channel\\\":\\\"<ADD STRING VALUE>\\\",\\\"customer\\\":0,\\\"logitude\\\":0,\\\"latitude\\\":0,\\\"go4moreMember\\\":false,\\\"TAN\\\":\\\"<ADD STRING VALUE>\\\"},\\\"payload\\\":{\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"userId\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"application_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD
            STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("application_id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 application_id: 'SOME_STRING_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { header:
                  { ID: '<ADD STRING VALUE>',
                    application: '<ADD STRING VALUE>',
                    bank: 'NBG',
                    hostSession: '<ADD STRING VALUE>',
                    channel: '<ADD STRING VALUE>',
                    customer: 0,
                    logitude: 0,
                    latitude: 0,
                    go4moreMember: false,
                    TAN: '<ADD STRING VALUE>' },
                 payload: { code: '<ADD STRING VALUE>', userId: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"header\":{\"ID\":\"<ADD STRING VALUE>\",\"application\":\"<ADD STRING VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING VALUE>\",\"channel\":\"<ADD STRING VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "application_id: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'application_id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["application_id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"header\":{\"ID\":\"<ADD STRING
            VALUE>\",\"application\":\"<ADD STRING
            VALUE>\",\"bank\":\"NBG\",\"hostSession\":\"<ADD STRING
            VALUE>\",\"channel\":\"<ADD STRING
            VALUE>\",\"customer\":0,\"logitude\":0,\"latitude\":0,\"go4moreMember\":false,\"TAN\":\"<ADD
            STRING VALUE>\"},\"payload\":{\"code\":\"<ADD STRING
            VALUE>\",\"userId\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/api/EQueueing/atmDetailsv2 \
              --header 'accept: application/json' \
              --header 'application_id: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"header":{"ID":"<ADD STRING VALUE>","application":"<ADD STRING VALUE>","bank":"NBG","hostSession":"<ADD STRING VALUE>","channel":"<ADD STRING VALUE>","customer":0,"logitude":0,"latitude":0,"go4moreMember":false,"TAN":"<ADD STRING VALUE>"},"payload":{"code":"<ADD STRING VALUE>","userId":"<ADD STRING VALUE>"}}'
  /sandbox:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: request
          description: Sandbox identifier
          schema:
            $ref: '#/definitions/SandboxRequest'
          in: body
          required: true
      responses:
        '201':
          description: '- Created'
          schema:
            $ref: '#/definitions/SandboxDataModel'
        '400':
          description: "- SBX-20000: Invalid sandboxId\r\n- SBX-20002: Incorrect json format\r\n- SBX-40000: Sandbox with the same sandboxId already exists!\r\n- SBX-60000: Cannot Create Sandbox"
      operationId: Sandbox_CreateSandbox
      summary: Create Sandbox
      description: "Creates a sandbox with unique sandbox id. This call can also be used to create users,\r\naccounts etc.\r\n            \r\n            \r\nSample request:\r\n            \r\nPOST /sandbox { \"sandboxId\": \"TestSandbox\" }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"sandboxId\":\"<ADD
            STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"sandboxId\":\"<ADD
            STRING VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox\"\n\n\tpayload := strings.NewReader(\"{\\\"sandboxId\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"sandboxId\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url: 'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body: { sandboxId: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"sandboxId\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"sandboxId\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST", "/sandbox/equeueing/headers/v1.2/sandbox",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"sandboxId\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"sandboxId":"<ADD STRING VALUE>"}'
  '/sandbox/{sandbox_id}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox ID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: '- OK'
          schema:
            $ref: '#/definitions/SandboxDataModel'
        '400':
          description: '- SBX-20000: Invalid sandboxId'
        '404':
          description: '- SBX-30000: Sandbox Not Found'
      operationId: Sandbox_ExportSandbox
      summary: Export Sandbox
      description: Export Sandbox data specified by sandbox id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox Id
          in: path
          required: true
          type: string
        - name: request
          description: ''
          schema:
            $ref: '#/definitions/SandboxDataModel'
          in: body
          required: true
      responses:
        '200':
          description: '- OK'
          schema:
            $ref: '#/definitions/SandboxDataModel'
        '400':
          description: "- SBX-20000: Invalid sandboxId\r\n- SBX-20001: Concurrency exception.Please try again\r\n- SBX-20002: Incorrect json format\r\n- SBX-60001: Cannot Update Sandbox"
        '404':
          description: '- SBX-30000: Sandbox Not Found'
      operationId: Sandbox_ImportSandbox
      summary: Import Sandbox
      description: "Imports sandbox data specified by sandbox id.\r\n            \r\n            \r\nSample request:\r\n            \r\nPUT /sandbox/{sandbox_id} { \"SandboxID\": \"string\", \"Users\": [ { \"UserId\":\r\n\"88f9431d-834e-486a-910a-25b308a460cb\", \"Username\": \"User1\", \"ProviderId\": \"NBG.gr\",\r\n\"Provider\": \"NBG\" }, { \"UserId\": \"ddc8e902-7645-4124-ad61-a62cf1e58267\", \"Username\":\r\n\"User2\", \"ProviderId\": \"NBG.gr\", \"Provider\": \"NBG\" } ], \"Accounts\": [ { \"userId\":\r\n\"88f9431d-834e-486a-910a-25b308a460cb\", \"accountId\": \"1234\", \"accountType\": \"Account\",\r\n\"accountNumber\": \"1234567890\", \"accountDescription\": \"My Account\", \"accountBalance\": 1000\r\n}, { \"userId\": \"88f9431d-834e-486a-910a-25b308a460cb\", \"accountId\": \"1111\",\r\n\"accountType\": \"Card\", \"accountNumber\": \"987654321012\", \"accountDescription\": \"My Card\",\r\n\"accountBalance\": 1000 }, { \"userId\": \"ddc8e902-7645-4124-ad61-a62cf1e58267\",\r\n\"accountId\": \"9874\", \"accountType\": \"Account\", \"accountNumber\": \"9873210654\",\r\n\"accountDescription\": \"Account!!\", \"accountBalance\": 20000 }, { \"userId\":\r\n\"ddc8e902-7645-4124-ad61-a62cf1e58267\", \"accountId\": \"4444\", \"accountType\": \"Card\",\r\n\"accountNumber\": \"778899445566\", \"accountDescription\": \"Card!!\", \"accountBalance\": 3000 }\r\n] }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"sandboxId\":\"<ADD
            STRING VALUE>\",\"users\":[{\"Username\":\"<ADD STRING
            VALUE>\",\"ProviderId\":\"<ADD STRING VALUE>\",\"Provider\":\"<ADD
            STRING
            VALUE>\"}],\"regions\":[{\"type\":\"WideRegion\",\"id\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"parentId\":0}],\"branches\":[{\"branchServicesEL\":[\"<ADD
            STRING VALUE>\"],\"branchServicesEN\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEL\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEN\":[\"<ADD STRING
            VALUE>\"],\"openSaturday\":false,\"openSunday\":false,\"openTellers\":0,\"longestWaitingTimes\":0,\"deposits\":false,\"retailLoans\":false,\"corporateLoans\":false,\"merchantCards\":false,\"corporateCustomers\":false,\"importsExports\":false,\"payments\":false,\"exchange\":false,\"personalBanking\":false,\"corporateConsulting\":false,\"safeDeposits\":false,\"atm\":false,\"aps\":false,\"phoneInternetBanking\":false,\"workingDaysEN\":\"<ADD
            STRING VALUE>\",\"workingDaysGR\":\"<ADD STRING
            VALUE>\",\"canIssueTickets\":false,\"isClosedForTickets\":false,\"canShowTimes\":false,\"meanWaitingTime\":0,\"meanWaitingTimeNew\":0,\"currentTicketNumber\":\"<ADD
            STRING
            VALUE>\",\"waitingCustomers\":0,\"activeTellers\":0,\"meanServiceTime\":0,\"opensAt\":\"<ADD
            STRING VALUE>\",\"closesAt\":\"<ADD STRING
            VALUE>\",\"timeNow\":\"<ADD STRING
            VALUE>\",\"hasAppointments\":false,\"code\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING VALUE>\",\"zipCodePart1\":\"<ADD STRING
            VALUE>\",\"zipCodePart2\":\"<ADD STRING
            VALUE>\",\"phoneAreaCode\":\"<ADD STRING
            VALUE>\",\"phoneNumber\":\"<ADD STRING
            VALUE>\",\"distance\":0,\"areaNameGR\":\"<ADD STRING
            VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"atms\":[{\"atmServicesEL\":[\"<ADD STRING
            VALUE>\"],\"atmServicesEN\":[\"<ADD STRING
            VALUE>\"],\"withdrawals\":false,\"transactionHistory\":false,\"deposits\":false,\"cashDeposits\":false,\"payments\":false,\"cashPayments\":false,\"workingHours\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING
            VALUE>\",\"acceptsDeposits\":false,\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING
            VALUE>\",\"is24Hours\":false,\"distance\":0,\"areaNameGR\":\"<ADD
            STRING VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"branchTickets\":[{\"ticketId\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"issueBranchCode\":\"<ADD STRING
            VALUE>\",\"issueDate\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD
            STRING VALUE>\",\"score\":0,\"ratingComment\":\"<ADD STRING
            VALUE>\",\"feedbackComment\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false,\"notUsefulReason\":\"NotInTime\",\"ticketStatus\":\"Active\"}]}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"sandboxId\":\"<ADD
            STRING VALUE>\",\"users\":[{\"Username\":\"<ADD STRING
            VALUE>\",\"ProviderId\":\"<ADD STRING VALUE>\",\"Provider\":\"<ADD
            STRING
            VALUE>\"}],\"regions\":[{\"type\":\"WideRegion\",\"id\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"parentId\":0}],\"branches\":[{\"branchServicesEL\":[\"<ADD
            STRING VALUE>\"],\"branchServicesEN\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEL\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEN\":[\"<ADD STRING
            VALUE>\"],\"openSaturday\":false,\"openSunday\":false,\"openTellers\":0,\"longestWaitingTimes\":0,\"deposits\":false,\"retailLoans\":false,\"corporateLoans\":false,\"merchantCards\":false,\"corporateCustomers\":false,\"importsExports\":false,\"payments\":false,\"exchange\":false,\"personalBanking\":false,\"corporateConsulting\":false,\"safeDeposits\":false,\"atm\":false,\"aps\":false,\"phoneInternetBanking\":false,\"workingDaysEN\":\"<ADD
            STRING VALUE>\",\"workingDaysGR\":\"<ADD STRING
            VALUE>\",\"canIssueTickets\":false,\"isClosedForTickets\":false,\"canShowTimes\":false,\"meanWaitingTime\":0,\"meanWaitingTimeNew\":0,\"currentTicketNumber\":\"<ADD
            STRING
            VALUE>\",\"waitingCustomers\":0,\"activeTellers\":0,\"meanServiceTime\":0,\"opensAt\":\"<ADD
            STRING VALUE>\",\"closesAt\":\"<ADD STRING
            VALUE>\",\"timeNow\":\"<ADD STRING
            VALUE>\",\"hasAppointments\":false,\"code\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING VALUE>\",\"zipCodePart1\":\"<ADD STRING
            VALUE>\",\"zipCodePart2\":\"<ADD STRING
            VALUE>\",\"phoneAreaCode\":\"<ADD STRING
            VALUE>\",\"phoneNumber\":\"<ADD STRING
            VALUE>\",\"distance\":0,\"areaNameGR\":\"<ADD STRING
            VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"atms\":[{\"atmServicesEL\":[\"<ADD STRING
            VALUE>\"],\"atmServicesEN\":[\"<ADD STRING
            VALUE>\"],\"withdrawals\":false,\"transactionHistory\":false,\"deposits\":false,\"cashDeposits\":false,\"payments\":false,\"cashPayments\":false,\"workingHours\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING
            VALUE>\",\"acceptsDeposits\":false,\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING
            VALUE>\",\"is24Hours\":false,\"distance\":0,\"areaNameGR\":\"<ADD
            STRING VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"branchTickets\":[{\"ticketId\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"issueBranchCode\":\"<ADD STRING
            VALUE>\",\"issueDate\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD
            STRING VALUE>\",\"score\":0,\"ratingComment\":\"<ADD STRING
            VALUE>\",\"feedbackComment\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false,\"notUsefulReason\":\"NotInTime\",\"ticketStatus\":\"Active\"}]}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"sandboxId\\\":\\\"<ADD STRING VALUE>\\\",\\\"users\\\":[{\\\"Username\\\":\\\"<ADD STRING VALUE>\\\",\\\"ProviderId\\\":\\\"<ADD STRING VALUE>\\\",\\\"Provider\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"regions\\\":[{\\\"type\\\":\\\"WideRegion\\\",\\\"id\\\":0,\\\"nameGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"nameEN\\\":\\\"<ADD STRING VALUE>\\\",\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"parentId\\\":0}],\\\"branches\\\":[{\\\"branchServicesEL\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"branchServicesEN\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"branchEServicesEL\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"branchEServicesEN\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"openSaturday\\\":false,\\\"openSunday\\\":false,\\\"openTellers\\\":0,\\\"longestWaitingTimes\\\":0,\\\"deposits\\\":false,\\\"retailLoans\\\":false,\\\"corporateLoans\\\":false,\\\"merchantCards\\\":false,\\\"corporateCustomers\\\":false,\\\"importsExports\\\":false,\\\"payments\\\":false,\\\"exchange\\\":false,\\\"personalBanking\\\":false,\\\"corporateConsulting\\\":false,\\\"safeDeposits\\\":false,\\\"atm\\\":false,\\\"aps\\\":false,\\\"phoneInternetBanking\\\":false,\\\"workingDaysEN\\\":\\\"<ADD STRING VALUE>\\\",\\\"workingDaysGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"canIssueTickets\\\":false,\\\"isClosedForTickets\\\":false,\\\"canShowTimes\\\":false,\\\"meanWaitingTime\\\":0,\\\"meanWaitingTimeNew\\\":0,\\\"currentTicketNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"waitingCustomers\\\":0,\\\"activeTellers\\\":0,\\\"meanServiceTime\\\":0,\\\"opensAt\\\":\\\"<ADD STRING VALUE>\\\",\\\"closesAt\\\":\\\"<ADD STRING VALUE>\\\",\\\"timeNow\\\":\\\"<ADD STRING VALUE>\\\",\\\"hasAppointments\\\":false,\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"area\\\":0,\\\"nameGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"nameEN\\\":\\\"<ADD STRING VALUE>\\\",\\\"addressGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"addressEN\\\":\\\"<ADD STRING VALUE>\\\",\\\"zipCodePart1\\\":\\\"<ADD STRING VALUE>\\\",\\\"zipCodePart2\\\":\\\"<ADD STRING VALUE>\\\",\\\"phoneAreaCode\\\":\\\"<ADD STRING VALUE>\\\",\\\"phoneNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"distance\\\":0,\\\"areaNameGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"areaNameEN\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"atms\\\":[{\\\"atmServicesEL\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"atmServicesEN\\\":[\\\"<ADD STRING VALUE>\\\"],\\\"withdrawals\\\":false,\\\"transactionHistory\\\":false,\\\"deposits\\\":false,\\\"cashDeposits\\\":false,\\\"payments\\\":false,\\\"cashPayments\\\":false,\\\"workingHours\\\":\\\"<ADD STRING VALUE>\\\",\\\"code\\\":\\\"<ADD STRING VALUE>\\\",\\\"acceptsDeposits\\\":false,\\\"latitude\\\":0,\\\"longitude\\\":0,\\\"area\\\":0,\\\"nameGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"nameEN\\\":\\\"<ADD STRING VALUE>\\\",\\\"addressGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"addressEN\\\":\\\"<ADD STRING VALUE>\\\",\\\"is24Hours\\\":false,\\\"distance\\\":0,\\\"areaNameGR\\\":\\\"<ADD STRING VALUE>\\\",\\\"areaNameEN\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"branchTickets\\\":[{\\\"ticketId\\\":\\\"<ADD STRING VALUE>\\\",\\\"number\\\":\\\"<ADD STRING VALUE>\\\",\\\"issueBranchCode\\\":\\\"<ADD STRING VALUE>\\\",\\\"issueDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"deviceId\\\":\\\"<ADD STRING VALUE>\\\",\\\"score\\\":0,\\\"ratingComment\\\":\\\"<ADD STRING VALUE>\\\",\\\"feedbackComment\\\":\\\"<ADD STRING VALUE>\\\",\\\"wasUseful\\\":false,\\\"notUsefulReason\\\":\\\"NotInTime\\\",\\\"ticketStatus\\\":\\\"Active\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"sandboxId\":\"<ADD STRING
            VALUE>\",\"users\":[{\"Username\":\"<ADD STRING
            VALUE>\",\"ProviderId\":\"<ADD STRING VALUE>\",\"Provider\":\"<ADD
            STRING
            VALUE>\"}],\"regions\":[{\"type\":\"WideRegion\",\"id\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"parentId\":0}],\"branches\":[{\"branchServicesEL\":[\"<ADD
            STRING VALUE>\"],\"branchServicesEN\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEL\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEN\":[\"<ADD STRING
            VALUE>\"],\"openSaturday\":false,\"openSunday\":false,\"openTellers\":0,\"longestWaitingTimes\":0,\"deposits\":false,\"retailLoans\":false,\"corporateLoans\":false,\"merchantCards\":false,\"corporateCustomers\":false,\"importsExports\":false,\"payments\":false,\"exchange\":false,\"personalBanking\":false,\"corporateConsulting\":false,\"safeDeposits\":false,\"atm\":false,\"aps\":false,\"phoneInternetBanking\":false,\"workingDaysEN\":\"<ADD
            STRING VALUE>\",\"workingDaysGR\":\"<ADD STRING
            VALUE>\",\"canIssueTickets\":false,\"isClosedForTickets\":false,\"canShowTimes\":false,\"meanWaitingTime\":0,\"meanWaitingTimeNew\":0,\"currentTicketNumber\":\"<ADD
            STRING
            VALUE>\",\"waitingCustomers\":0,\"activeTellers\":0,\"meanServiceTime\":0,\"opensAt\":\"<ADD
            STRING VALUE>\",\"closesAt\":\"<ADD STRING
            VALUE>\",\"timeNow\":\"<ADD STRING
            VALUE>\",\"hasAppointments\":false,\"code\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING VALUE>\",\"zipCodePart1\":\"<ADD STRING
            VALUE>\",\"zipCodePart2\":\"<ADD STRING
            VALUE>\",\"phoneAreaCode\":\"<ADD STRING
            VALUE>\",\"phoneNumber\":\"<ADD STRING
            VALUE>\",\"distance\":0,\"areaNameGR\":\"<ADD STRING
            VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"atms\":[{\"atmServicesEL\":[\"<ADD STRING
            VALUE>\"],\"atmServicesEN\":[\"<ADD STRING
            VALUE>\"],\"withdrawals\":false,\"transactionHistory\":false,\"deposits\":false,\"cashDeposits\":false,\"payments\":false,\"cashPayments\":false,\"workingHours\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING
            VALUE>\",\"acceptsDeposits\":false,\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING
            VALUE>\",\"is24Hours\":false,\"distance\":0,\"areaNameGR\":\"<ADD
            STRING VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"branchTickets\":[{\"ticketId\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"issueBranchCode\":\"<ADD STRING
            VALUE>\",\"issueDate\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD
            STRING VALUE>\",\"score\":0,\"ratingComment\":\"<ADD STRING
            VALUE>\",\"feedbackComment\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false,\"notUsefulReason\":\"NotInTime\",\"ticketStatus\":\"Active\"}]}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { sandboxId: '<ADD STRING VALUE>',
                 users:
                  [ { Username: '<ADD STRING VALUE>',
                      ProviderId: '<ADD STRING VALUE>',
                      Provider: '<ADD STRING VALUE>' } ],
                 regions:
                  [ { type: 'WideRegion',
                      id: 0,
                      nameGR: '<ADD STRING VALUE>',
                      nameEN: '<ADD STRING VALUE>',
                      latitude: 0,
                      longitude: 0,
                      parentId: 0 } ],
                 branches:
                  [ { branchServicesEL: [ '<ADD STRING VALUE>' ],
                      branchServicesEN: [ '<ADD STRING VALUE>' ],
                      branchEServicesEL: [ '<ADD STRING VALUE>' ],
                      branchEServicesEN: [ '<ADD STRING VALUE>' ],
                      openSaturday: false,
                      openSunday: false,
                      openTellers: 0,
                      longestWaitingTimes: 0,
                      deposits: false,
                      retailLoans: false,
                      corporateLoans: false,
                      merchantCards: false,
                      corporateCustomers: false,
                      importsExports: false,
                      payments: false,
                      exchange: false,
                      personalBanking: false,
                      corporateConsulting: false,
                      safeDeposits: false,
                      atm: false,
                      aps: false,
                      phoneInternetBanking: false,
                      workingDaysEN: '<ADD STRING VALUE>',
                      workingDaysGR: '<ADD STRING VALUE>',
                      canIssueTickets: false,
                      isClosedForTickets: false,
                      canShowTimes: false,
                      meanWaitingTime: 0,
                      meanWaitingTimeNew: 0,
                      currentTicketNumber: '<ADD STRING VALUE>',
                      waitingCustomers: 0,
                      activeTellers: 0,
                      meanServiceTime: 0,
                      opensAt: '<ADD STRING VALUE>',
                      closesAt: '<ADD STRING VALUE>',
                      timeNow: '<ADD STRING VALUE>',
                      hasAppointments: false,
                      code: '<ADD STRING VALUE>',
                      latitude: 0,
                      longitude: 0,
                      area: 0,
                      nameGR: '<ADD STRING VALUE>',
                      nameEN: '<ADD STRING VALUE>',
                      addressGR: '<ADD STRING VALUE>',
                      addressEN: '<ADD STRING VALUE>',
                      zipCodePart1: '<ADD STRING VALUE>',
                      zipCodePart2: '<ADD STRING VALUE>',
                      phoneAreaCode: '<ADD STRING VALUE>',
                      phoneNumber: '<ADD STRING VALUE>',
                      distance: 0,
                      areaNameGR: '<ADD STRING VALUE>',
                      areaNameEN: '<ADD STRING VALUE>' } ],
                 atms:
                  [ { atmServicesEL: [ '<ADD STRING VALUE>' ],
                      atmServicesEN: [ '<ADD STRING VALUE>' ],
                      withdrawals: false,
                      transactionHistory: false,
                      deposits: false,
                      cashDeposits: false,
                      payments: false,
                      cashPayments: false,
                      workingHours: '<ADD STRING VALUE>',
                      code: '<ADD STRING VALUE>',
                      acceptsDeposits: false,
                      latitude: 0,
                      longitude: 0,
                      area: 0,
                      nameGR: '<ADD STRING VALUE>',
                      nameEN: '<ADD STRING VALUE>',
                      addressGR: '<ADD STRING VALUE>',
                      addressEN: '<ADD STRING VALUE>',
                      is24Hours: false,
                      distance: 0,
                      areaNameGR: '<ADD STRING VALUE>',
                      areaNameEN: '<ADD STRING VALUE>' } ],
                 branchTickets:
                  [ { ticketId: '<ADD STRING VALUE>',
                      number: '<ADD STRING VALUE>',
                      issueBranchCode: '<ADD STRING VALUE>',
                      issueDate: '<ADD STRING VALUE>',
                      deviceId: '<ADD STRING VALUE>',
                      score: 0,
                      ratingComment: '<ADD STRING VALUE>',
                      feedbackComment: '<ADD STRING VALUE>',
                      wasUseful: false,
                      notUsefulReason: 'NotInTime',
                      ticketStatus: 'Active' } ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"sandboxId\":\"<ADD STRING VALUE>\",\"users\":[{\"Username\":\"<ADD STRING VALUE>\",\"ProviderId\":\"<ADD STRING VALUE>\",\"Provider\":\"<ADD STRING VALUE>\"}],\"regions\":[{\"type\":\"WideRegion\",\"id\":0,\"nameGR\":\"<ADD STRING VALUE>\",\"nameEN\":\"<ADD STRING VALUE>\",\"latitude\":0,\"longitude\":0,\"parentId\":0}],\"branches\":[{\"branchServicesEL\":[\"<ADD STRING VALUE>\"],\"branchServicesEN\":[\"<ADD STRING VALUE>\"],\"branchEServicesEL\":[\"<ADD STRING VALUE>\"],\"branchEServicesEN\":[\"<ADD STRING VALUE>\"],\"openSaturday\":false,\"openSunday\":false,\"openTellers\":0,\"longestWaitingTimes\":0,\"deposits\":false,\"retailLoans\":false,\"corporateLoans\":false,\"merchantCards\":false,\"corporateCustomers\":false,\"importsExports\":false,\"payments\":false,\"exchange\":false,\"personalBanking\":false,\"corporateConsulting\":false,\"safeDeposits\":false,\"atm\":false,\"aps\":false,\"phoneInternetBanking\":false,\"workingDaysEN\":\"<ADD STRING VALUE>\",\"workingDaysGR\":\"<ADD STRING VALUE>\",\"canIssueTickets\":false,\"isClosedForTickets\":false,\"canShowTimes\":false,\"meanWaitingTime\":0,\"meanWaitingTimeNew\":0,\"currentTicketNumber\":\"<ADD STRING VALUE>\",\"waitingCustomers\":0,\"activeTellers\":0,\"meanServiceTime\":0,\"opensAt\":\"<ADD STRING VALUE>\",\"closesAt\":\"<ADD STRING VALUE>\",\"timeNow\":\"<ADD STRING VALUE>\",\"hasAppointments\":false,\"code\":\"<ADD STRING VALUE>\",\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD STRING VALUE>\",\"nameEN\":\"<ADD STRING VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD STRING VALUE>\",\"zipCodePart1\":\"<ADD STRING VALUE>\",\"zipCodePart2\":\"<ADD STRING VALUE>\",\"phoneAreaCode\":\"<ADD STRING VALUE>\",\"phoneNumber\":\"<ADD STRING VALUE>\",\"distance\":0,\"areaNameGR\":\"<ADD STRING VALUE>\",\"areaNameEN\":\"<ADD STRING VALUE>\"}],\"atms\":[{\"atmServicesEL\":[\"<ADD STRING VALUE>\"],\"atmServicesEN\":[\"<ADD STRING VALUE>\"],\"withdrawals\":false,\"transactionHistory\":false,\"deposits\":false,\"cashDeposits\":false,\"payments\":false,\"cashPayments\":false,\"workingHours\":\"<ADD STRING VALUE>\",\"code\":\"<ADD STRING VALUE>\",\"acceptsDeposits\":false,\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD STRING VALUE>\",\"nameEN\":\"<ADD STRING VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD STRING VALUE>\",\"is24Hours\":false,\"distance\":0,\"areaNameGR\":\"<ADD STRING VALUE>\",\"areaNameEN\":\"<ADD STRING VALUE>\"}],\"branchTickets\":[{\"ticketId\":\"<ADD STRING VALUE>\",\"number\":\"<ADD STRING VALUE>\",\"issueBranchCode\":\"<ADD STRING VALUE>\",\"issueDate\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD STRING VALUE>\",\"score\":0,\"ratingComment\":\"<ADD STRING VALUE>\",\"feedbackComment\":\"<ADD STRING VALUE>\",\"wasUseful\":false,\"notUsefulReason\":\"NotInTime\",\"ticketStatus\":\"Active\"}]}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"sandboxId\":\"<ADD STRING
            VALUE>\",\"users\":[{\"Username\":\"<ADD STRING
            VALUE>\",\"ProviderId\":\"<ADD STRING VALUE>\",\"Provider\":\"<ADD
            STRING
            VALUE>\"}],\"regions\":[{\"type\":\"WideRegion\",\"id\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"parentId\":0}],\"branches\":[{\"branchServicesEL\":[\"<ADD
            STRING VALUE>\"],\"branchServicesEN\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEL\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEN\":[\"<ADD STRING
            VALUE>\"],\"openSaturday\":false,\"openSunday\":false,\"openTellers\":0,\"longestWaitingTimes\":0,\"deposits\":false,\"retailLoans\":false,\"corporateLoans\":false,\"merchantCards\":false,\"corporateCustomers\":false,\"importsExports\":false,\"payments\":false,\"exchange\":false,\"personalBanking\":false,\"corporateConsulting\":false,\"safeDeposits\":false,\"atm\":false,\"aps\":false,\"phoneInternetBanking\":false,\"workingDaysEN\":\"<ADD
            STRING VALUE>\",\"workingDaysGR\":\"<ADD STRING
            VALUE>\",\"canIssueTickets\":false,\"isClosedForTickets\":false,\"canShowTimes\":false,\"meanWaitingTime\":0,\"meanWaitingTimeNew\":0,\"currentTicketNumber\":\"<ADD
            STRING
            VALUE>\",\"waitingCustomers\":0,\"activeTellers\":0,\"meanServiceTime\":0,\"opensAt\":\"<ADD
            STRING VALUE>\",\"closesAt\":\"<ADD STRING
            VALUE>\",\"timeNow\":\"<ADD STRING
            VALUE>\",\"hasAppointments\":false,\"code\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING VALUE>\",\"zipCodePart1\":\"<ADD STRING
            VALUE>\",\"zipCodePart2\":\"<ADD STRING
            VALUE>\",\"phoneAreaCode\":\"<ADD STRING
            VALUE>\",\"phoneNumber\":\"<ADD STRING
            VALUE>\",\"distance\":0,\"areaNameGR\":\"<ADD STRING
            VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"atms\":[{\"atmServicesEL\":[\"<ADD STRING
            VALUE>\"],\"atmServicesEN\":[\"<ADD STRING
            VALUE>\"],\"withdrawals\":false,\"transactionHistory\":false,\"deposits\":false,\"cashDeposits\":false,\"payments\":false,\"cashPayments\":false,\"workingHours\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING
            VALUE>\",\"acceptsDeposits\":false,\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING
            VALUE>\",\"is24Hours\":false,\"distance\":0,\"areaNameGR\":\"<ADD
            STRING VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"branchTickets\":[{\"ticketId\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"issueBranchCode\":\"<ADD STRING
            VALUE>\",\"issueDate\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD
            STRING VALUE>\",\"score\":0,\"ratingComment\":\"<ADD STRING
            VALUE>\",\"feedbackComment\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false,\"notUsefulReason\":\"NotInTime\",\"ticketStatus\":\"Active\"}]}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"sandboxId\":\"<ADD STRING
            VALUE>\",\"users\":[{\"Username\":\"<ADD STRING
            VALUE>\",\"ProviderId\":\"<ADD STRING VALUE>\",\"Provider\":\"<ADD
            STRING
            VALUE>\"}],\"regions\":[{\"type\":\"WideRegion\",\"id\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"parentId\":0}],\"branches\":[{\"branchServicesEL\":[\"<ADD
            STRING VALUE>\"],\"branchServicesEN\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEL\":[\"<ADD STRING
            VALUE>\"],\"branchEServicesEN\":[\"<ADD STRING
            VALUE>\"],\"openSaturday\":false,\"openSunday\":false,\"openTellers\":0,\"longestWaitingTimes\":0,\"deposits\":false,\"retailLoans\":false,\"corporateLoans\":false,\"merchantCards\":false,\"corporateCustomers\":false,\"importsExports\":false,\"payments\":false,\"exchange\":false,\"personalBanking\":false,\"corporateConsulting\":false,\"safeDeposits\":false,\"atm\":false,\"aps\":false,\"phoneInternetBanking\":false,\"workingDaysEN\":\"<ADD
            STRING VALUE>\",\"workingDaysGR\":\"<ADD STRING
            VALUE>\",\"canIssueTickets\":false,\"isClosedForTickets\":false,\"canShowTimes\":false,\"meanWaitingTime\":0,\"meanWaitingTimeNew\":0,\"currentTicketNumber\":\"<ADD
            STRING
            VALUE>\",\"waitingCustomers\":0,\"activeTellers\":0,\"meanServiceTime\":0,\"opensAt\":\"<ADD
            STRING VALUE>\",\"closesAt\":\"<ADD STRING
            VALUE>\",\"timeNow\":\"<ADD STRING
            VALUE>\",\"hasAppointments\":false,\"code\":\"<ADD STRING
            VALUE>\",\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING VALUE>\",\"zipCodePart1\":\"<ADD STRING
            VALUE>\",\"zipCodePart2\":\"<ADD STRING
            VALUE>\",\"phoneAreaCode\":\"<ADD STRING
            VALUE>\",\"phoneNumber\":\"<ADD STRING
            VALUE>\",\"distance\":0,\"areaNameGR\":\"<ADD STRING
            VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"atms\":[{\"atmServicesEL\":[\"<ADD STRING
            VALUE>\"],\"atmServicesEN\":[\"<ADD STRING
            VALUE>\"],\"withdrawals\":false,\"transactionHistory\":false,\"deposits\":false,\"cashDeposits\":false,\"payments\":false,\"cashPayments\":false,\"workingHours\":\"<ADD
            STRING VALUE>\",\"code\":\"<ADD STRING
            VALUE>\",\"acceptsDeposits\":false,\"latitude\":0,\"longitude\":0,\"area\":0,\"nameGR\":\"<ADD
            STRING VALUE>\",\"nameEN\":\"<ADD STRING
            VALUE>\",\"addressGR\":\"<ADD STRING VALUE>\",\"addressEN\":\"<ADD
            STRING
            VALUE>\",\"is24Hours\":false,\"distance\":0,\"areaNameGR\":\"<ADD
            STRING VALUE>\",\"areaNameEN\":\"<ADD STRING
            VALUE>\"}],\"branchTickets\":[{\"ticketId\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"issueBranchCode\":\"<ADD STRING
            VALUE>\",\"issueDate\":\"<ADD STRING VALUE>\",\"deviceId\":\"<ADD
            STRING VALUE>\",\"score\":0,\"ratingComment\":\"<ADD STRING
            VALUE>\",\"feedbackComment\":\"<ADD STRING
            VALUE>\",\"wasUseful\":false,\"notUsefulReason\":\"NotInTime\",\"ticketStatus\":\"Active\"}]}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"sandboxId":"<ADD STRING VALUE>","users":[{"Username":"<ADD STRING VALUE>","ProviderId":"<ADD STRING VALUE>","Provider":"<ADD STRING VALUE>"}],"regions":[{"type":"WideRegion","id":0,"nameGR":"<ADD STRING VALUE>","nameEN":"<ADD STRING VALUE>","latitude":0,"longitude":0,"parentId":0}],"branches":[{"branchServicesEL":["<ADD STRING VALUE>"],"branchServicesEN":["<ADD STRING VALUE>"],"branchEServicesEL":["<ADD STRING VALUE>"],"branchEServicesEN":["<ADD STRING VALUE>"],"openSaturday":false,"openSunday":false,"openTellers":0,"longestWaitingTimes":0,"deposits":false,"retailLoans":false,"corporateLoans":false,"merchantCards":false,"corporateCustomers":false,"importsExports":false,"payments":false,"exchange":false,"personalBanking":false,"corporateConsulting":false,"safeDeposits":false,"atm":false,"aps":false,"phoneInternetBanking":false,"workingDaysEN":"<ADD STRING VALUE>","workingDaysGR":"<ADD STRING VALUE>","canIssueTickets":false,"isClosedForTickets":false,"canShowTimes":false,"meanWaitingTime":0,"meanWaitingTimeNew":0,"currentTicketNumber":"<ADD STRING VALUE>","waitingCustomers":0,"activeTellers":0,"meanServiceTime":0,"opensAt":"<ADD STRING VALUE>","closesAt":"<ADD STRING VALUE>","timeNow":"<ADD STRING VALUE>","hasAppointments":false,"code":"<ADD STRING VALUE>","latitude":0,"longitude":0,"area":0,"nameGR":"<ADD STRING VALUE>","nameEN":"<ADD STRING VALUE>","addressGR":"<ADD STRING VALUE>","addressEN":"<ADD STRING VALUE>","zipCodePart1":"<ADD STRING VALUE>","zipCodePart2":"<ADD STRING VALUE>","phoneAreaCode":"<ADD STRING VALUE>","phoneNumber":"<ADD STRING VALUE>","distance":0,"areaNameGR":"<ADD STRING VALUE>","areaNameEN":"<ADD STRING VALUE>"}],"atms":[{"atmServicesEL":["<ADD STRING VALUE>"],"atmServicesEN":["<ADD STRING VALUE>"],"withdrawals":false,"transactionHistory":false,"deposits":false,"cashDeposits":false,"payments":false,"cashPayments":false,"workingHours":"<ADD STRING VALUE>","code":"<ADD STRING VALUE>","acceptsDeposits":false,"latitude":0,"longitude":0,"area":0,"nameGR":"<ADD STRING VALUE>","nameEN":"<ADD STRING VALUE>","addressGR":"<ADD STRING VALUE>","addressEN":"<ADD STRING VALUE>","is24Hours":false,"distance":0,"areaNameGR":"<ADD STRING VALUE>","areaNameEN":"<ADD STRING VALUE>"}],"branchTickets":[{"ticketId":"<ADD STRING VALUE>","number":"<ADD STRING VALUE>","issueBranchCode":"<ADD STRING VALUE>","issueDate":"<ADD STRING VALUE>","deviceId":"<ADD STRING VALUE>","score":0,"ratingComment":"<ADD STRING VALUE>","feedbackComment":"<ADD STRING VALUE>","wasUseful":false,"notUsefulReason":"NotInTime","ticketStatus":"Active"}]}'
    delete:
      consumes: []
      produces: []
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox ID
          in: path
          required: true
          type: string
      responses:
        '204':
          description: '- NoContent'
        '400':
          description: "- SBX-20000: Invalid sandboxId\r\n- SBX-60002: Cannot Delete Sandbox"
        '404':
          description: '- SBX-30000: Sandbox Not Found'
      operationId: Sandbox_DeleteSandbox
      summary: Delete Sandbox
      description: Delete the Sandbox specified by sandbox id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D")
              .delete(null)
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D',
              headers: { 'client-id': 'SOME_APIKEY_VALUE' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = { 'client-id': "SOME_APIKEY_VALUE" }


            conn.request("DELETE",
            "/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request DELETE \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D \
              --header 'client-id: SOME_APIKEY_VALUE'
  '/sandbox/{sandbox_id}/users':
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: request
          description: ''
          schema:
            $ref: '#/definitions/CreateUserRequest'
          in: body
          required: true
        - name: sandbox_id
          description: ''
          in: path
          required: true
          type: string
      responses:
        '201':
          description: '- Created'
          schema:
            $ref: '#/definitions/SandboxUser'
        '400':
          description: "- SBX-20000: Invalid sandboxId\r\n- SBX-20002: Incorrect json format\r\n- SBX-40001: User with the same username already exists!\r\n- SBX-60001: Cannot Update Sandbox"
      operationId: Sandbox_CreateSandboxUser
      summary: Create Sandbox User
      description: "Creates Sandbox User.\r\n            \r\n            \r\nSample request:\r\n            \r\nPOST /sandbox/{sandbox_id}/users { \"username\": \"user3\" }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"username\":\"<ADD
            STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"username\":\"<ADD
            STRING VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users\"\n\n\tpayload := strings.NewReader(\"{\\\"username\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"username\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body: { username: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"username\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"username\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"username\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/equeueing/headers/v1.2/sandbox/%7Bsandbox_id%7D/users \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"username":"<ADD STRING VALUE>"}'
definitions:
  'Request[RegionRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Region Request Data
        type: object
        properties:
          parentId:
            format: int32
            description: "Parent ID (for Area -&gt; City, for City -&gt; Region) If left empty then it's implied we\r\nwant all the records"
            type: integer
          type:
            description: >-
              Type of region (look for RegionType enum) For Root List just use
              RegionType.Region
            enum:
              - WideRegion
              - Region
              - City
              - Area
            type: string
          userId:
            description: User Id
            type: string
  RequestHeader:
    required:
      - ID
    type: object
    properties:
      ID:
        type: string
      application:
        type: string
      bank:
        enum:
          - NBG
        type: string
      hostSession:
        type: string
      channel:
        type: string
      customer:
        format: double
        type: number
      logitude:
        format: double
        type: number
      latitude:
        format: double
        type: number
      go4moreMember:
        type: boolean
      TAN:
        type: string
  RegionRequest:
    description: Region Request Data
    type: object
    properties:
      parentId:
        format: int32
        description: "Parent ID (for Area -&gt; City, for City -&gt; Region) If left empty then it's implied we\r\nwant all the records"
        type: integer
      type:
        description: >-
          Type of region (look for RegionType enum) For Root List just use
          RegionType.Region
        enum:
          - WideRegion
          - Region
          - City
          - Area
        type: string
      userId:
        description: User Id
        type: string
  'Response[RegionResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/RegionResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  RegionResponse:
    description: Region Response Data
    type: object
    properties:
      type:
        description: Region Type
        enum:
          - WideRegion
          - Region
          - City
          - Area
        type: string
      regions:
        description: List of results
        type: array
        items:
          $ref: '#/definitions/Region'
  ResponseMessage:
    type: object
    properties:
      id:
        type: string
      code:
        type: string
      desc:
        type: string
      sev:
        enum:
          - Warning
          - Error
          - Info
        type: string
      cat:
        enum:
          - Business
          - Communication
          - Technical
          - Security
        type: string
  Region:
    description: Region Data
    type: object
    properties:
      id:
        format: int32
        description: Record ID (system internal reference id)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      parentId:
        format: int32
        description: 'Parent ID (for Area -&gt; City, for City -&gt; Region)'
        type: integer
  'Request[ATMByAreaRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: ATM By Area Request
        type: object
        properties:
          area:
            format: int32
            description: 'Area Code (if empty, then all atms are returned)'
            type: integer
          userId:
            description: User Id
            type: string
  ATMByAreaRequest:
    description: ATM By Area Request
    type: object
    properties:
      area:
        format: int32
        description: 'Area Code (if empty, then all atms are returned)'
        type: integer
      userId:
        description: User Id
        type: string
  'Response[List[ATM]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/ATM'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ATM:
    description: ATM Data
    type: object
    properties:
      code:
        description: ATM Code
        type: string
      acceptsDeposits:
        description: Indication if it accepts deposits
        type: boolean
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      is24Hours:
        description: Indication for 24 hour service
        type: boolean
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  'Request[NearestATMRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Nearest ATM Request Data
        type: object
        properties:
          distance:
            format: double
            description: "Search Radius (in meters) If left empty, it starts from 3000. If the results are less\r\nthan 10, then looks for 4000, 8000 and 16000 consequently and then stops"
            type: number
          latitude:
            format: double
            description: Search Latitude
            type: number
          longitude:
            format: double
            description: Search Longitude
            type: number
          userId:
            description: User Id
            type: string
  NearestATMRequest:
    description: Nearest ATM Request Data
    type: object
    properties:
      distance:
        format: double
        description: "Search Radius (in meters) If left empty, it starts from 3000. If the results are less\r\nthan 10, then looks for 4000, 8000 and 16000 consequently and then stops"
        type: number
      latitude:
        format: double
        description: Search Latitude
        type: number
      longitude:
        format: double
        description: Search Longitude
        type: number
      userId:
        description: User Id
        type: string
  'Response[NearestATMResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/NearestATMResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  NearestATMResponse:
    description: Nearest ATM Response Data
    type: object
    properties:
      distance:
        format: double
        description: "Search Radius (in meters) It is different from the request distance, in case it's left\r\nempty in the request (so it shows the actual result radius)"
        type: number
      atms:
        description: Reslut List
        type: array
        items:
          $ref: '#/definitions/ATM'
  'Request[ATMDetailsRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: ATM Details Request
        type: object
        properties:
          code:
            description: ΑΤΜ Code
            type: string
          userId:
            description: User Id
            type: string
  ATMDetailsRequest:
    description: ATM Details Request
    type: object
    properties:
      code:
        description: ΑΤΜ Code
        type: string
      userId:
        description: User Id
        type: string
  'Response[ATMDetails]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ATMDetails'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ATMDetails:
    description: Details of an ATM
    type: object
    properties:
      withdrawals:
        description: Ανάληψη Μετρητών / Cash Withdrawal
        type: boolean
      transactionHistory:
        description: Τελευταίες κινήσεις λογαριασμού / Transaction History
        type: boolean
      deposits:
        description: Κατάθεση με φάκελο / Deposit (Envelope)
        type: boolean
      cashDeposits:
        description: Κατάθεση μετρητών / Deposits (Cash)
        type: boolean
      payments:
        description: 'Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) / Payments (Envelope)'
        type: boolean
      cashPayments:
        description: 'Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) με μετρητά / Payments (Cash)'
        type: boolean
      workingHours:
        description: Ώρες λειτουργίας / Working Hours
        type: string
      code:
        description: ATM Code
        type: string
      acceptsDeposits:
        description: Indication if it accepts deposits
        type: boolean
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      is24Hours:
        description: Indication for 24 hour service
        type: boolean
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  'Request[BranchByAreaRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Branch by Area Request Data
        type: object
        properties:
          area:
            format: int32
            description: 'Area Code (if empty, then all branches are returned)'
            type: integer
          userId:
            description: User Id
            type: string
  BranchByAreaRequest:
    description: Branch by Area Request Data
    type: object
    properties:
      area:
        format: int32
        description: 'Area Code (if empty, then all branches are returned)'
        type: integer
      userId:
        description: User Id
        type: string
  'Response[List[Branch]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/Branch'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  Branch:
    description: Branch Data
    type: object
    properties:
      code:
        description: Branch Code
        type: string
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      zipCodePart1:
        description: Zip Code first part
        type: string
      zipCodePart2:
        description: Zip Code second part
        type: string
      phoneAreaCode:
        description: Phone - Area Code
        type: string
      phoneNumber:
        description: Phone - number without area code
        type: string
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  'Request[NearestBranchRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Nearest Branch Request Data
        type: object
        properties:
          distance:
            format: double
            description: "Search Radius (in meters) If left empty, it starts from 3000. If the results are less\r\nthan 10, then looks for 4000, 8000 and 16000 consequently and then stops"
            type: number
          latitude:
            format: double
            description: Search Latitude
            type: number
          longitude:
            format: double
            description: Search Longitude
            type: number
          userId:
            type: string
  NearestBranchRequest:
    description: Nearest Branch Request Data
    type: object
    properties:
      distance:
        format: double
        description: "Search Radius (in meters) If left empty, it starts from 3000. If the results are less\r\nthan 10, then looks for 4000, 8000 and 16000 consequently and then stops"
        type: number
      latitude:
        format: double
        description: Search Latitude
        type: number
      longitude:
        format: double
        description: Search Longitude
        type: number
      userId:
        type: string
  'Response[NearestBranchResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/NearestBranchResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  NearestBranchResponse:
    description: Nearest Branc hResponse Data
    type: object
    properties:
      distance:
        format: double
        description: "Search Radius (in meters) It is different from the request distance, in case it's left\r\nempty in the request (so it shows the actual result radius)"
        type: number
      branches:
        description: Result List
        type: array
        items:
          $ref: '#/definitions/Branch'
  'Request[BranchByRegionRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Branch by Region Request data
        type: object
        properties:
          userId:
            description: User Id
            type: string
          postalCode:
            description: Postal Code
            type: string
          region:
            description: Region
            type: string
          city:
            description: City
            type: string
  BranchByRegionRequest:
    description: Branch by Region Request data
    type: object
    properties:
      userId:
        description: User Id
        type: string
      postalCode:
        description: Postal Code
        type: string
      region:
        description: Region
        type: string
      city:
        description: City
        type: string
  'Response[BranchByRegionResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/BranchByRegionResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  BranchByRegionResponse:
    description: Branch by Region Response Data
    type: object
    properties:
      branches:
        description: Branches
        type: array
        items:
          $ref: '#/definitions/Branch'
  'Request[BranchDetailsRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Branch Details Request Data
        type: object
        properties:
          code:
            description: Branch Code
            type: string
          userId:
            description: User Id
            type: string
          eQueueData:
            description: Indication whether eQueue data should be included
            type: boolean
  BranchDetailsRequest:
    description: Branch Details Request Data
    type: object
    properties:
      code:
        description: Branch Code
        type: string
      userId:
        description: User Id
        type: string
      eQueueData:
        description: Indication whether eQueue data should be included
        type: boolean
  'Response[BranchDetails]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/BranchDetails'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  BranchDetails:
    description: Branch Details
    type: object
    properties:
      deposits:
        type: boolean
      retailLoans:
        type: boolean
      corporateLoans:
        description: Δάνεια προς ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / Loans for SME
        type: boolean
      merchantCards:
        type: boolean
      corporateCustomers:
        description: >-
          Εξυπηρέτηση Επιχειρήσεων με κύκλο εργασιών άνω των 2.5 εκ. / Corporate
          services
        type: boolean
      importsExports:
        description: >-
          Εργασίες Εξωτερικού (Εισαγωγές - Εξαγωγές) / Foreign Services (Import
          Export)
        type: boolean
      payments:
        description: Εμβάσματα &amp; Πληρωμές / Payments
        type: boolean
      exchange:
        description: Αγορά Πώληση Συναλλάγματος / Money Exchange
        type: boolean
      personalBanking:
        description: Στέλεχος Personal Banking / Personal Banking Services
        type: boolean
      corporateConsulting:
        description: Σύμβουλος Πελατείας ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / SME Services
        type: boolean
      safeDeposits:
        description: Θυρίδες Θησαυροφυλακίου / Safe Deposits
        type: boolean
      atm:
        description: ΑΤΜ (καθημερινά 24 ώρες) / ATM (24x7)
        type: boolean
      aps:
        description: APS (ωράριο καταστήματος) / APS (working hours)
        type: boolean
      phoneInternetBanking:
        description: >-
          Phone/Internet Banking (ωράριο καταστήματος) / Phone &amp; Internet
          Banking (working hours)
        type: boolean
      workingDaysEN:
        description: Μέρες &amp; Ώρες Λειρουργίας Αγγλικά
        type: string
      workingDaysGR:
        description: Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours
        type: string
      canIssueTickets:
        description: >-
          Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be
          issued
        type: boolean
      isClosedForTickets:
        description: Indication wether the branch is closed for eQueue
        type: boolean
      canShowTimes:
        description: >-
          Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a
          ticket can show waiting times
        type: boolean
      meanWaitingTime:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in
          seconds)
        type: integer
      meanWaitingTimeNew:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in
          seconds) NEW
        type: integer
      currentTicketNumber:
        description: Τρέχον αριθμός εισιτηρίου / Current Ticket Number
        type: string
      waitingCustomers:
        format: int32
        description: Πελάτες σε αναμονή / Waiting customers
        type: integer
      activeTellers:
        format: int32
        description: Tellers that are active and are servicing customers
        type: integer
      meanServiceTime:
        format: int32
        description: Estimated Service Time for a customer
        type: integer
      opensAt:
        format: date-time
        description: Opening Time for the branch for current day
        type: string
      closesAt:
        format: date-time
        description: Closing Time for the branch for current day
        type: string
      timeNow:
        format: date-time
        description: The current datetime (for client datetime offsets)
        type: string
      hasAppointments:
        description: Whether it has electronic appointment capability
        type: boolean
      code:
        description: Branch Code
        type: string
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      zipCodePart1:
        description: Zip Code first part
        type: string
      zipCodePart2:
        description: Zip Code second part
        type: string
      phoneAreaCode:
        description: Phone - Area Code
        type: string
      phoneNumber:
        description: Phone - number without area code
        type: string
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  'Request[EQueueBranchInfoRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: EQueue Branch Info Request Data
        type: object
        properties:
          code:
            description: Branch Code
            type: string
  EQueueBranchInfoRequest:
    description: EQueue Branch Info Request Data
    type: object
    properties:
      code:
        description: Branch Code
        type: string
  'Response[EQueueBranchInfo]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/EQueueBranchInfo'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  EQueueBranchInfo:
    description: EQueue Branch Info
    type: object
    properties:
      code:
        description: Branch Code
        type: string
      canIssue:
        description: >-
          Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be
          issued
        type: boolean
      isClosed:
        description: Indication wether the branch is closed for eQueue
        type: boolean
      canShowTimes:
        description: >-
          Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a
          ticket can show waiting times
        type: boolean
      meanWaitingTime:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in
          seconds)
        type: integer
      meanWaitingTimeNew:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in
          seconds) NEW
        type: integer
      currentTicketNumber:
        description: Τρέχον αριθμός εισιτηρίου / Current Ticket Number
        type: string
      waitingCustomers:
        format: int32
        description: Πελάτες σε αναμονή / Waiting customers
        type: integer
      opensAt:
        format: date-time
        description: Opening Time for the branch for current day
        type: string
      closesAt:
        format: date-time
        description: Closing Time for the branch for current day
        type: string
      timeNow:
        format: date-time
        description: The current datetime (for client datetime offsets)
        type: string
      openSaturday:
        description: Whether its open Saturday
        type: boolean
      openSunday:
        description: Whether its open Sunday
        type: boolean
      activeTellers:
        format: int32
        description: Number of Active Tellers
        type: integer
      openTellers:
        format: int32
        description: Number of Open Tellers
        type: integer
      longestWaitingTimes:
        format: int32
        description: Longest Waiting Time
        type: integer
      meanServiceTime:
        format: int32
        description: Mean Service Time
        type: integer
      hasAppointments:
        description: Whether it has electronic appointment capability
        type: boolean
  'Request[BranchTicketIssueRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Branch Ticket Issue Request Data
        type: object
        properties:
          branchCode:
            description: Κωδικός Καταστήματος / BranchCode
            type: string
          reason:
            description: Αιτιολογία έκδοσης / Reason of issue
            enum:
              - General
              - Deposit
              - Widthdrawal
              - Payment
              - Other
            type: string
          comments:
            description: Comments
            type: string
          deviceId:
            description: DeviceId or some unique id for the current installation
            type: string
          pushNotificationId:
            description: 'the push notification id for android gcm, apple and windows phone'
            type: string
          pushNotificationType:
            description: 'the push notification type (android, iOS, WP, SMS)'
            enum:
              - Android
              - iOS
              - WindowsPhone
              - Sms
            type: string
          lang:
            description: >-
              If the culture info from the client is greek or english ('el',
              'en')
            type: string
  BranchTicketIssueRequest:
    description: Branch Ticket Issue Request Data
    type: object
    properties:
      branchCode:
        description: Κωδικός Καταστήματος / BranchCode
        type: string
      reason:
        description: Αιτιολογία έκδοσης / Reason of issue
        enum:
          - General
          - Deposit
          - Widthdrawal
          - Payment
          - Other
        type: string
      comments:
        description: Comments
        type: string
      deviceId:
        description: DeviceId or some unique id for the current installation
        type: string
      pushNotificationId:
        description: 'the push notification id for android gcm, apple and windows phone'
        type: string
      pushNotificationType:
        description: 'the push notification type (android, iOS, WP, SMS)'
        enum:
          - Android
          - iOS
          - WindowsPhone
          - Sms
        type: string
      lang:
        description: 'If the culture info from the client is greek or english (''el'', ''en'')'
        type: string
  'Response[BranchTicketIssueResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/BranchTicketIssueResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  BranchTicketIssueResponse:
    description: Branch Ticket Issue Response Data
    type: object
    properties:
      id:
        description: Unique ticket indentity (internal use only)
        type: string
      number:
        description: Ticket Number
        type: string
      issueDate:
        format: date-time
        description: Issue DateTime
        type: string
      issueBranchCode:
        description: Branch code for ticket
        type: string
      issueBranchNameGR:
        description: Branch name for ticket
        type: string
      issueBranchNameEN:
        description: Branch name for ticket
        type: string
      branchDetails:
        $ref: '#/definitions/BranchDetails'
        description: Branch details with ticket data
  'Request[CancelBranchTicketRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Cancel Branch Ticket Request Data
        type: object
        properties:
          id:
            description: Unique ticket indentity (internal use only)
            type: string
          deviceId:
            description: DeviceId or some unique id for the current installation
            type: string
  CancelBranchTicketRequest:
    description: Cancel Branch Ticket Request Data
    type: object
    properties:
      id:
        description: Unique ticket indentity (internal use only)
        type: string
      deviceId:
        description: DeviceId or some unique id for the current installation
        type: string
  'Response[CancelBranchTicketResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/CancelBranchTicketResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  CancelBranchTicketResponse:
    description: Cancel Branch Ticket Response Data
    type: object
    properties:
      success:
        description: Indicates Success
        type: boolean
  'Request[TicketUsageRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Ticket Usage Request Data
        type: object
        properties:
          id:
            description: Unique ticket indentity (internal use only)
            type: string
          deviceId:
            description: DeviceId or some unique id for the current installation
            type: string
          wasUseful:
            description: Indication wether the ticket was of use to the user
            type: boolean
  TicketUsageRequest:
    description: Ticket Usage Request Data
    type: object
    properties:
      id:
        description: Unique ticket indentity (internal use only)
        type: string
      deviceId:
        description: DeviceId or some unique id for the current installation
        type: string
      wasUseful:
        description: Indication wether the ticket was of use to the user
        type: boolean
  'Response[TicketUsageResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/TicketUsageResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  TicketUsageResponse:
    description: Ticket Usage Response Data
    type: object
    properties:
      success:
        description: Indicates Success
        type: boolean
  'Request[RateBranchTicketRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Rate Branch Ticket Request Data
        type: object
        properties:
          id:
            description: Unique ticket indentity (internal use only)
            type: string
          deviceId:
            description: DeviceId or some unique id for the current installation
            type: string
          score:
            format: double
            description: The score of the ticket rating
            type: number
          comment:
            description: User comment
            type: string
  RateBranchTicketRequest:
    description: Rate Branch Ticket Request Data
    type: object
    properties:
      id:
        description: Unique ticket indentity (internal use only)
        type: string
      deviceId:
        description: DeviceId or some unique id for the current installation
        type: string
      score:
        format: double
        description: The score of the ticket rating
        type: number
      comment:
        description: User comment
        type: string
  'Response[RateBranchTicketResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/RateBranchTicketResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  RateBranchTicketResponse:
    description: Rate Branch Ticket Response Data
    type: object
    properties:
      success:
        description: Indicates Success
        type: boolean
  'Request[NotUsefulTicketFeedbackRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Not Useful Ticket Feedback Request Data
        type: object
        properties:
          id:
            description: Unique ticket indentity (internal use only)
            type: string
          deviceId:
            description: DeviceId or some unique id for the current installation
            type: string
          notUsefulReason:
            description: Reason that the ticket was not usefull
            enum:
              - NotInTime
              - WrongMeanTime
              - ServiceWithoutCashier
              - ServiceATMAPS
              - Other
            type: string
          comment:
            description: User comment
            type: string
  NotUsefulTicketFeedbackRequest:
    description: Not Useful Ticket Feedback Request Data
    type: object
    properties:
      id:
        description: Unique ticket indentity (internal use only)
        type: string
      deviceId:
        description: DeviceId or some unique id for the current installation
        type: string
      notUsefulReason:
        description: Reason that the ticket was not usefull
        enum:
          - NotInTime
          - WrongMeanTime
          - ServiceWithoutCashier
          - ServiceATMAPS
          - Other
        type: string
      comment:
        description: User comment
        type: string
  'Response[NotUsefulTicketFeedbackResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/NotUsefulTicketFeedbackResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  NotUsefulTicketFeedbackResponse:
    description: Not Useful Ticket Feedback Response Data
    type: object
    properties:
      success:
        description: Indicates success
        type: boolean
  'Request[EQueueAvailableBranchesRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        type: object
  EQueueAvailableBranchesRequest:
    type: object
  'Response[List[EQueueAvailableBranch]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/EQueueAvailableBranch'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  EQueueAvailableBranch:
    description: EQueue Available Branch
    type: object
    properties:
      code:
        description: Branch Code
        type: string
      canIssue:
        description: >-
          Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be
          issued
        type: boolean
      isClosed:
        description: Indication wether the branch is closed for eQueue
        type: boolean
      canShowTimes:
        description: >-
          Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a
          ticket can show waiting times
        type: boolean
      openSaturday:
        description: Whether its open Saturday
        type: boolean
      openSunday:
        description: Whether its open Sunday
        type: boolean
      hasAppointments:
        description: Whether it has electronic appointment capability
        type: boolean
  'Request[FindBranchFasterServiceRequest]':
    required:
      - header
      - payload
    type: object
    properties:
      header:
        required:
          - ID
        type: object
        properties:
          ID:
            type: string
          application:
            type: string
          bank:
            enum:
              - NBG
            type: string
          hostSession:
            type: string
          channel:
            type: string
          customer:
            format: double
            type: number
          logitude:
            format: double
            type: number
          latitude:
            format: double
            type: number
          go4moreMember:
            type: boolean
          TAN:
            type: string
      payload:
        description: Find Branch Faster Service Request Data
        type: object
        properties:
          branchCode:
            description: "The branch code of the branch we want to find a better service If left null then the\r\nservice will use the coordinates below This given branch will not be returned"
            type: string
          latitude:
            format: double
            description: Search Latitude
            type: number
          longitude:
            format: double
            description: Search Longitude
            type: number
          distanceThreshold:
            format: double
            description: "Search Radius threshold (in meters) If left empty, it will search a default radious of\r\n3000 meters"
            type: number
          ItemThreshold:
            format: int32
            description: "The maximum number of items it will examine (the maximum overall is 25) If left null, we\r\nuse a default of 5"
            type: integer
          waitingThreshold:
            format: int32
            description: "The minimum waiting time we want to find (in seconds) If we search with branch code the\r\nminimum will be that branch's waiting time minus 5 minutes If left null without branch,\r\nthere will be no restriction"
            type: integer
  FindBranchFasterServiceRequest:
    description: Find Branch Faster Service Request Data
    type: object
    properties:
      branchCode:
        description: "The branch code of the branch we want to find a better service If left null then the\r\nservice will use the coordinates below This given branch will not be returned"
        type: string
      latitude:
        format: double
        description: Search Latitude
        type: number
      longitude:
        format: double
        description: Search Longitude
        type: number
      distanceThreshold:
        format: double
        description: "Search Radius threshold (in meters) If left empty, it will search a default radious of\r\n3000 meters"
        type: number
      ItemThreshold:
        format: int32
        description: "The maximum number of items it will examine (the maximum overall is 25) If left null, we\r\nuse a default of 5"
        type: integer
      waitingThreshold:
        format: int32
        description: "The minimum waiting time we want to find (in seconds) If we search with branch code the\r\nminimum will be that branch's waiting time minus 5 minutes If left null without branch,\r\nthere will be no restriction"
        type: integer
  'Response[List[BranchDetails]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/BranchDetails'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  'Response[BranchDetailsV2]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/BranchDetailsV2'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  BranchDetailsV2:
    description: Branch Details V2
    type: object
    properties:
      branchServicesEL:
        description: Provided Services in Greek
        type: array
        items:
          type: string
      branchServicesEN:
        description: Provided Services in English
        type: array
        items:
          type: string
      branchEServicesEL:
        description: Provided e-Services in Greek
        type: array
        items:
          type: string
      branchEServicesEN:
        description: Provided e-Services in English
        type: array
        items:
          type: string
      workingDaysEN:
        description: Μέρες &amp; Ώρες Λειρουργίας Αγγλικά
        type: string
      workingDaysGR:
        description: Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours
        type: string
      canIssueTickets:
        description: >-
          Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be
          issued
        type: boolean
      isClosedForTickets:
        description: Indication wether the branch is closed for eQueue
        type: boolean
      canShowTimes:
        description: >-
          Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a
          ticket can show waiting times
        type: boolean
      meanWaitingTime:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in
          seconds)
        type: integer
      meanWaitingTimeNew:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in
          seconds) NEW
        type: integer
      currentTicketNumber:
        description: Τρέχον αριθμός εισιτηρίου / Current Ticket Number
        type: string
      waitingCustomers:
        format: int32
        description: Πελάτες σε αναμονή / Waiting customers
        type: integer
      activeTellers:
        format: int32
        description: Tellers that are active and are servicing customers
        type: integer
      meanServiceTime:
        format: int32
        description: Estimated Service Time for a customer
        type: integer
      opensAt:
        format: date-time
        description: Opening Time for the branch for current day
        type: string
      closesAt:
        format: date-time
        description: Closing Time for the branch for current day
        type: string
      timeNow:
        format: date-time
        description: The current datetime (for client datetime offsets)
        type: string
      hasAppointments:
        description: Whether it has electronic appointment capability
        type: boolean
      code:
        description: Branch Code
        type: string
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      zipCodePart1:
        description: Zip Code first part
        type: string
      zipCodePart2:
        description: Zip Code second part
        type: string
      phoneAreaCode:
        description: Phone - Area Code
        type: string
      phoneNumber:
        description: Phone - number without area code
        type: string
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  'Response[ATMDetailsV2]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ATMDetailsV2'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ATMDetailsV2:
    description: ATM Details V2
    type: object
    properties:
      atmServicesEL:
        description: Serives in Greek
        type: array
        items:
          type: string
      atmServicesEN:
        description: Serives in English
        type: array
        items:
          type: string
      workingHours:
        description: Ώρες λειτουργίας / Working Hours
        type: string
      code:
        description: ATM Code
        type: string
      acceptsDeposits:
        description: Indication if it accepts deposits
        type: boolean
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      is24Hours:
        description: Indication for 24 hour service
        type: boolean
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  SandboxRequest:
    description: Sandbox Request
    required:
      - sandboxId
    type: object
    properties:
      sandboxId:
        description: Sandbox unique identifier. E.g MySandbox
        type: string
  SandboxDataModel:
    description: Sandbox Data Model
    type: object
    properties:
      sandboxId:
        description: Sandbox unique identifier. E.g MySandbox
        type: string
      users:
        description: Sandbox users.
        type: array
        items:
          description: Sandbox User
          type: object
          properties:
            Username:
              description: Sandbox username
              type: string
            ProviderId:
              description: Sandbox provider identifier (e.g NBG.gr)
              type: string
            Provider:
              description: Sandbox provider (e.g NBG)
              type: string
      regions:
        description: Sandbox regions.
        type: array
        items:
          description: Region Details
          type: object
          properties:
            type:
              description: Region Type
              enum:
                - WideRegion
                - Region
                - City
                - Area
              type: string
            id:
              format: int32
              description: Record ID (system internal reference id)
              type: integer
            nameGR:
              description: Name in Greek
              type: string
            nameEN:
              description: Name in English
              type: string
            latitude:
              format: double
              description: Latitude
              type: number
            longitude:
              format: double
              description: Longitude
              type: number
            parentId:
              format: int32
              description: 'Parent ID (for Area -&gt; City, for City -&gt; Region)'
              type: integer
      branches:
        description: Sandbox branches.
        type: array
        items:
          description: Branch Details
          type: object
          properties:
            branchServicesEL:
              description: Branch Services EL
              type: array
              items:
                type: string
            branchServicesEN:
              description: Branch Services EN
              type: array
              items:
                type: string
            branchEServicesEL:
              description: Branch EServices EL
              type: array
              items:
                type: string
            branchEServicesEN:
              description: Branch EServices EN
              type: array
              items:
                type: string
            openSaturday:
              description: Whether its open Saturday
              type: boolean
            openSunday:
              description: Whether its open Sunday
              type: boolean
            openTellers:
              format: int32
              description: Number of open tellers
              type: integer
            longestWaitingTimes:
              format: int32
              description: Longest waiting time
              type: integer
            deposits:
              type: boolean
            retailLoans:
              type: boolean
            corporateLoans:
              description: Δάνεια προς ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / Loans for SME
              type: boolean
            merchantCards:
              type: boolean
            corporateCustomers:
              description: >-
                Εξυπηρέτηση Επιχειρήσεων με κύκλο εργασιών άνω των 2.5 εκ. /
                Corporate services
              type: boolean
            importsExports:
              description: >-
                Εργασίες Εξωτερικού (Εισαγωγές - Εξαγωγές) / Foreign Services
                (Import Export)
              type: boolean
            payments:
              description: Εμβάσματα &amp; Πληρωμές / Payments
              type: boolean
            exchange:
              description: Αγορά Πώληση Συναλλάγματος / Money Exchange
              type: boolean
            personalBanking:
              description: Στέλεχος Personal Banking / Personal Banking Services
              type: boolean
            corporateConsulting:
              description: Σύμβουλος Πελατείας ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / SME Services
              type: boolean
            safeDeposits:
              description: Θυρίδες Θησαυροφυλακίου / Safe Deposits
              type: boolean
            atm:
              description: ΑΤΜ (καθημερινά 24 ώρες) / ATM (24x7)
              type: boolean
            aps:
              description: APS (ωράριο καταστήματος) / APS (working hours)
              type: boolean
            phoneInternetBanking:
              description: >-
                Phone/Internet Banking (ωράριο καταστήματος) / Phone &amp;
                Internet Banking (working hours)
              type: boolean
            workingDaysEN:
              description: Μέρες &amp; Ώρες Λειρουργίας Αγγλικά
              type: string
            workingDaysGR:
              description: Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours
              type: string
            canIssueTickets:
              description: >-
                Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket
                can be issued
              type: boolean
            isClosedForTickets:
              description: Indication wether the branch is closed for eQueue
              type: boolean
            canShowTimes:
              description: >-
                Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether
                a ticket can show waiting times
              type: boolean
            meanWaitingTime:
              format: int32
              description: >-
                Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in
                seconds)
              type: integer
            meanWaitingTimeNew:
              format: int32
              description: >-
                Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time
                (in seconds) NEW
              type: integer
            currentTicketNumber:
              description: Τρέχον αριθμός εισιτηρίου / Current Ticket Number
              type: string
            waitingCustomers:
              format: int32
              description: Πελάτες σε αναμονή / Waiting customers
              type: integer
            activeTellers:
              format: int32
              description: Tellers that are active and are servicing customers
              type: integer
            meanServiceTime:
              format: int32
              description: Estimated Service Time for a customer
              type: integer
            opensAt:
              format: date-time
              description: Opening Time for the branch for current day
              type: string
            closesAt:
              format: date-time
              description: Closing Time for the branch for current day
              type: string
            timeNow:
              format: date-time
              description: The current datetime (for client datetime offsets)
              type: string
            hasAppointments:
              description: Whether it has electronic appointment capability
              type: boolean
            code:
              description: Branch Code
              type: string
            latitude:
              format: double
              description: Latitude
              type: number
            longitude:
              format: double
              description: Longitude
              type: number
            area:
              format: int32
              description: Area Code (the system internal id for the area)
              type: integer
            nameGR:
              description: Name in Greek
              type: string
            nameEN:
              description: Name in English
              type: string
            addressGR:
              description: Address in Greek
              type: string
            addressEN:
              description: Address in English
              type: string
            zipCodePart1:
              description: Zip Code first part
              type: string
            zipCodePart2:
              description: Zip Code second part
              type: string
            phoneAreaCode:
              description: Phone - Area Code
              type: string
            phoneNumber:
              description: Phone - number without area code
              type: string
            distance:
              format: double
              description: Distance in meters (if the request was for nearest)
              type: number
            areaNameGR:
              description: Area Name in Greek
              type: string
            areaNameEN:
              description: Area Name in English
              type: string
      atms:
        description: Sandbox atms.
        type: array
        items:
          description: Atm Details
          type: object
          properties:
            atmServicesEL:
              description: Branch Services EL
              type: array
              items:
                type: string
            atmServicesEN:
              description: Branch Services EN
              type: array
              items:
                type: string
            withdrawals:
              description: Ανάληψη Μετρητών / Cash Withdrawal
              type: boolean
            transactionHistory:
              description: Τελευταίες κινήσεις λογαριασμού / Transaction History
              type: boolean
            deposits:
              description: Κατάθεση με φάκελο / Deposit (Envelope)
              type: boolean
            cashDeposits:
              description: Κατάθεση μετρητών / Deposits (Cash)
              type: boolean
            payments:
              description: 'Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) / Payments (Envelope)'
              type: boolean
            cashPayments:
              description: 'Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) με μετρητά / Payments (Cash)'
              type: boolean
            workingHours:
              description: Ώρες λειτουργίας / Working Hours
              type: string
            code:
              description: ATM Code
              type: string
            acceptsDeposits:
              description: Indication if it accepts deposits
              type: boolean
            latitude:
              format: double
              description: Latitude
              type: number
            longitude:
              format: double
              description: Longitude
              type: number
            area:
              format: int32
              description: Area Code (the system internal id for the area)
              type: integer
            nameGR:
              description: Name in Greek
              type: string
            nameEN:
              description: Name in English
              type: string
            addressGR:
              description: Address in Greek
              type: string
            addressEN:
              description: Address in English
              type: string
            is24Hours:
              description: Indication for 24 hour service
              type: boolean
            distance:
              format: double
              description: Distance in meters (if the request was for nearest)
              type: number
            areaNameGR:
              description: Area Name in Greek
              type: string
            areaNameEN:
              description: Area Name in English
              type: string
      branchTickets:
        description: Sandbox branch tickets.
        type: array
        items:
          description: Branch Tickets
          type: object
          properties:
            ticketId:
              description: Ticket identification
              type: string
            number:
              description: Ticket number
              type: string
            issueBranchCode:
              description: Branch where ticket was issued
              type: string
            issueDate:
              format: date-time
              description: Date when ticket was issued
              type: string
            deviceId:
              description: Device identifiaction that issued ticket
              type: string
            score:
              format: double
              description: Score
              type: number
            ratingComment:
              description: Tickets rating related comments
              type: string
            feedbackComment:
              description: Tickets feedback related comments
              type: string
            wasUseful:
              description: Indication whether ticket was useful
              type: boolean
            notUsefulReason:
              description: Not useful ticket reason
              enum:
                - NotInTime
                - WrongMeanTime
                - ServiceWithoutCashier
                - ServiceATMAPS
                - Other
              type: string
            ticketStatus:
              description: Ticket status
              enum:
                - Active
                - Cancelled
                - Expired
              type: string
  SandboxUser:
    description: Sandbox User
    type: object
    properties:
      Username:
        description: Sandbox username
        type: string
      ProviderId:
        description: Sandbox provider identifier (e.g NBG.gr)
        type: string
      Provider:
        description: Sandbox provider (e.g NBG)
        type: string
  SandboxRegion:
    description: Region Details
    type: object
    properties:
      type:
        description: Region Type
        enum:
          - WideRegion
          - Region
          - City
          - Area
        type: string
      id:
        format: int32
        description: Record ID (system internal reference id)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      parentId:
        format: int32
        description: 'Parent ID (for Area -&gt; City, for City -&gt; Region)'
        type: integer
  SandboxBranch:
    description: Branch Details
    type: object
    properties:
      branchServicesEL:
        description: Branch Services EL
        type: array
        items:
          type: string
      branchServicesEN:
        description: Branch Services EN
        type: array
        items:
          type: string
      branchEServicesEL:
        description: Branch EServices EL
        type: array
        items:
          type: string
      branchEServicesEN:
        description: Branch EServices EN
        type: array
        items:
          type: string
      openSaturday:
        description: Whether its open Saturday
        type: boolean
      openSunday:
        description: Whether its open Sunday
        type: boolean
      openTellers:
        format: int32
        description: Number of open tellers
        type: integer
      longestWaitingTimes:
        format: int32
        description: Longest waiting time
        type: integer
      deposits:
        type: boolean
      retailLoans:
        type: boolean
      corporateLoans:
        description: Δάνεια προς ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / Loans for SME
        type: boolean
      merchantCards:
        type: boolean
      corporateCustomers:
        description: >-
          Εξυπηρέτηση Επιχειρήσεων με κύκλο εργασιών άνω των 2.5 εκ. / Corporate
          services
        type: boolean
      importsExports:
        description: >-
          Εργασίες Εξωτερικού (Εισαγωγές - Εξαγωγές) / Foreign Services (Import
          Export)
        type: boolean
      payments:
        description: Εμβάσματα &amp; Πληρωμές / Payments
        type: boolean
      exchange:
        description: Αγορά Πώληση Συναλλάγματος / Money Exchange
        type: boolean
      personalBanking:
        description: Στέλεχος Personal Banking / Personal Banking Services
        type: boolean
      corporateConsulting:
        description: Σύμβουλος Πελατείας ΜΜΕ (κυκλ. Εργ. έως 2.5 εκ) / SME Services
        type: boolean
      safeDeposits:
        description: Θυρίδες Θησαυροφυλακίου / Safe Deposits
        type: boolean
      atm:
        description: ΑΤΜ (καθημερινά 24 ώρες) / ATM (24x7)
        type: boolean
      aps:
        description: APS (ωράριο καταστήματος) / APS (working hours)
        type: boolean
      phoneInternetBanking:
        description: >-
          Phone/Internet Banking (ωράριο καταστήματος) / Phone &amp; Internet
          Banking (working hours)
        type: boolean
      workingDaysEN:
        description: Μέρες &amp; Ώρες Λειρουργίας Αγγλικά
        type: string
      workingDaysGR:
        description: Μέρες &amp; Ώρες Λειρουργίας Ελληνικά / Working days &amp; hours
        type: string
      canIssueTickets:
        description: >-
          Ένδειξη μπορεί να βγει εισιτήριο / Indication whether a ticket can be
          issued
        type: boolean
      isClosedForTickets:
        description: Indication wether the branch is closed for eQueue
        type: boolean
      canShowTimes:
        description: >-
          Ένδειξη μπορεί να δείχνει χρόνους αναμονής / Indication whether a
          ticket can show waiting times
        type: boolean
      meanWaitingTime:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) / Mean waiting time (in
          seconds)
        type: integer
      meanWaitingTimeNew:
        format: int32
        description: >-
          Μέσος χρόνος αναμονής (σε δευτερόλεπτα) ΝΕΟ / Mean waiting time (in
          seconds) NEW
        type: integer
      currentTicketNumber:
        description: Τρέχον αριθμός εισιτηρίου / Current Ticket Number
        type: string
      waitingCustomers:
        format: int32
        description: Πελάτες σε αναμονή / Waiting customers
        type: integer
      activeTellers:
        format: int32
        description: Tellers that are active and are servicing customers
        type: integer
      meanServiceTime:
        format: int32
        description: Estimated Service Time for a customer
        type: integer
      opensAt:
        format: date-time
        description: Opening Time for the branch for current day
        type: string
      closesAt:
        format: date-time
        description: Closing Time for the branch for current day
        type: string
      timeNow:
        format: date-time
        description: The current datetime (for client datetime offsets)
        type: string
      hasAppointments:
        description: Whether it has electronic appointment capability
        type: boolean
      code:
        description: Branch Code
        type: string
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      zipCodePart1:
        description: Zip Code first part
        type: string
      zipCodePart2:
        description: Zip Code second part
        type: string
      phoneAreaCode:
        description: Phone - Area Code
        type: string
      phoneNumber:
        description: Phone - number without area code
        type: string
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  SandboxAtm:
    description: Atm Details
    type: object
    properties:
      atmServicesEL:
        description: Branch Services EL
        type: array
        items:
          type: string
      atmServicesEN:
        description: Branch Services EN
        type: array
        items:
          type: string
      withdrawals:
        description: Ανάληψη Μετρητών / Cash Withdrawal
        type: boolean
      transactionHistory:
        description: Τελευταίες κινήσεις λογαριασμού / Transaction History
        type: boolean
      deposits:
        description: Κατάθεση με φάκελο / Deposit (Envelope)
        type: boolean
      cashDeposits:
        description: Κατάθεση μετρητών / Deposits (Cash)
        type: boolean
      payments:
        description: 'Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) / Payments (Envelope)'
        type: boolean
      cashPayments:
        description: 'Πληρωμές (π.χ. ΔΕΗ, ΟΤΕ) με μετρητά / Payments (Cash)'
        type: boolean
      workingHours:
        description: Ώρες λειτουργίας / Working Hours
        type: string
      code:
        description: ATM Code
        type: string
      acceptsDeposits:
        description: Indication if it accepts deposits
        type: boolean
      latitude:
        format: double
        description: Latitude
        type: number
      longitude:
        format: double
        description: Longitude
        type: number
      area:
        format: int32
        description: Area Code (the system internal id for the area)
        type: integer
      nameGR:
        description: Name in Greek
        type: string
      nameEN:
        description: Name in English
        type: string
      addressGR:
        description: Address in Greek
        type: string
      addressEN:
        description: Address in English
        type: string
      is24Hours:
        description: Indication for 24 hour service
        type: boolean
      distance:
        format: double
        description: Distance in meters (if the request was for nearest)
        type: number
      areaNameGR:
        description: Area Name in Greek
        type: string
      areaNameEN:
        description: Area Name in English
        type: string
  SandboxBranchTicket:
    description: Branch Tickets
    type: object
    properties:
      ticketId:
        description: Ticket identification
        type: string
      number:
        description: Ticket number
        type: string
      issueBranchCode:
        description: Branch where ticket was issued
        type: string
      issueDate:
        format: date-time
        description: Date when ticket was issued
        type: string
      deviceId:
        description: Device identifiaction that issued ticket
        type: string
      score:
        format: double
        description: Score
        type: number
      ratingComment:
        description: Tickets rating related comments
        type: string
      feedbackComment:
        description: Tickets feedback related comments
        type: string
      wasUseful:
        description: Indication whether ticket was useful
        type: boolean
      notUsefulReason:
        description: Not useful ticket reason
        enum:
          - NotInTime
          - WrongMeanTime
          - ServiceWithoutCashier
          - ServiceATMAPS
          - Other
        type: string
      ticketStatus:
        description: Ticket status
        enum:
          - Active
          - Cancelled
          - Expired
        type: string
  CreateUserRequest:
    description: Create user for sandbox
    required:
      - username
    type: object
    properties:
      username:
        description: User unique username
        type: string
securityDefinitions:
  Client Id:
    type: apiKey
    description: Application's Id
    name: Client-Id
    in: header
security:
  - Client Id: []
