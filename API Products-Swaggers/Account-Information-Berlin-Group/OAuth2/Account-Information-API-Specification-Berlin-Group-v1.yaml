openapi: 3.0.1
info:
  title: Account Information API Specification - Berlin Group
  description: "## Functionality at a glance\r\n\r\nThe NBG \"Berlin Group Accounts Information\" API follows the \"Berlin Group Specification v1.3.6\".\r\n\r\nThis Accounts Information API Specification describes the flows and payloads for retrieving an Account's or Card's informations and trasnactions.\r\n\r\nThe API endpoints described here allow an AISP to:\r\n\r\n* Register an **intent** to retrieve Information and Transactions regarding Accounts and/or Cards (create **consent**)\r\n* **Authorize** the Consent\r\n* **Retrieve** the required Information (balances, beneficiaries, transactions, standing orders, scheduled payments)\r\n\r\n<br/>\r\n\r\n## Quick Getting Started\r\n1. <b>Login/Register</b> to the NBG Technology HUB\r\n\r\n2. Go to <b>\"APPS\"</b>\r\n\r\n3. Select your Organization and go to step 4. If you want to create a new Organization click <b>\"CREATE AN ORGANIZATION\"</b> and follow the steps below:\r\n\r\n    1. Enter the title of your Organization\r\n    1. Enter a short description of your Organization (optional)\r\n    2. Click \"SUBMIT\"\r\n\r\n4. Select the Organization of choice and click <b>\"ADD AN APPLICATION\"</b>\r\n\r\n    1. Fill in the forms (title and short description)\r\n    \r\n    2. Check <b>\"Authorization Code\"</b> and <b>\"Client Credentials\"</b>\r\n    \r\n    3. Enter the <b>OAuth Redirect and Post Logout URIs</b> (these are the URIs that we will redirect the user upon logging in and logging out respectively)\r\n    \r\n    4. *You can use the following redirect URL to easily test the API through the portal: https://developer.nbg.gr/oauth2/redoc-callback*\r\n    \r\n    6. Click <b>\"SUBMIT\"</b>\r\n    \r\n    7. Store the APPs <b>\"Client ID\"</b> and <b>\"Client Secret\"</b>\r\n\r\n5. Go to <b>\"API PRODUCTS\"</b> and select the <b> ACCOUNTS INFORMATION - BG OPEN BANKING API</b>\r\n\r\n6. Click <b>\"START USING THIS API\"</b>, choose your app and click <b>\"SUBSCRIBE\"</b>\r\n\r\n7. Get an <b>Access Token</b> using the Access Token Flow and the API scopes provided in the Authentication and Authorization (OAuth2) section below\r\n\r\n8. Create a <b>Sandbox</b>\r\n\r\n9. Play with the API\r\n\r\n<br/>\r\n\r\n### Sandbox Flow\r\nThe Sandbox Flow matches the Production Flow. The difference lies into the Data used. Instead of live data, the Sandbox flow uses mocked data.\r\n\r\n### Production Flow\r\nThe Production Flow is described in the Berlin Group Specification v1.3.6\r\n\r\nMore details about the implementation specifics followed, please visit section [Berlin Group Specification page](https://www.berlin-group.org/nextgenpsd2-downloads)\r\n\r\n<br/>\r\n\r\n### Authentication and Authorization (OAuth2)\r\nThe UK Open Banking v3.1.5 Specification uses the OAuth2 protocol for authentication and authorization, which means that a Bearer (access token) should be acquired. An access token can be retrieved using the client_id and client_secret of the APP that you created and subscribed in this API, and finally your own credentials (username, password) that you use to sign in the NBG Technology HUB.\r\n\r\nThe scopes are defined below:\r\n\r\nAuthorization Endpoint:\r\n\r\n    https://my.nbg.gr/identity/connect/authorize\r\nToken Endpoint:\r\n\r\n    https://my.nbg.gr/identity/connect/token\r\n\r\n**Authorization Code**\r\n\r\nSandbox Scopes:\r\n\r\n    sandbox-bg-ob-accounts offline_access\r\n\r\nProduction Scopes:\r\n\r\n    bg-ob-accounts offline_access\r\n\r\n**Client Credentials**\r\n\r\nSandbox Scopes:\r\n\r\n    sandbox-bg-ob-accounts\r\n\r\nProduction Scopes:\r\n\r\n    bg-ob-accounts\r\nSee more [here](https://developer.nbg.gr/oauth-document)\r\n\r\n<br/>\r\n\r\n### QWAC Certificates\r\nTPPs are required to present a QWAC certificate during API consumption. \r\nThe API checks that this certificate has been provided and is valid. \r\nIn sandbox mode the certificate validations are optional. \r\nTo validate your certificate in sandbox implementation, please send us your QWAC \r\ncertificate at developer@nbg.gr and set the HTTP Header **\"x-sandbox-qwac-certificate-check\"** with the value **\"true\"** in your requests.\r\n\r\n<br/>\r\n\r\n### SMS Challenge (One Time Password)\r\nIn order to successfully complete a Payment you will need to provide the SMS OTP (One Time Password) in the corresponding Payments Consent UI Screen.\r\n\r\nBy default the SMS OTP will be sent to the mobile number declared upon singing up in the NBG Technology HUB.\r\n\r\n<br/>\r\n\r\n### Create your Sandbox\r\nCreate a new Sandbox application by invoking the POST /sandbox. This call will generate a new Sandbox with a unique sandbox-id.\r\n\r\nWhen you create a sandbox, users and sandbox specific data are generated as sample data.\r\n\r\nImportant! Don't lose your sandbox_id, since you will need it for all the API calls. Sandbox endpoints are not included in the production version API.\r\n\r\n<br/>\r\n\r\n### Start Testing\r\nOnce you have your **sandbox-id**, you can start invoking the rest of the operations by providing the mandatory http header sandbox-id and the http headers described below.\r\n\r\n<br/>\r\n\r\n### Important notes\r\n**Request headers**\r\n\r\nThe following HTTP header parameters are required for every call:\r\n\r\n1. Authorization. The OAuth2 Token\r\n\r\n2. sandbox-id. Your Sandbox ID\r\n\r\n<br/><br/>\r\n\r\n## Berlin Group Specification Specifics Implementation\r\nIn the below section we describe the flow we follow regarding Account Information Retrieval among with any other specific information is needed in order for you to successfully use the Berlin Group Specification Accounts Information API.\r\n\r\n### General Flow\r\n1. TPP creates a Consent via the appropriate **Account Information Consent Endpoint**, using a Client Credentials Flow.\r\n\r\n2. Once the Consent is obtained the TPP initiates an \"Authorization Code Flow\" in order to obtain the needed Access Token.\r\n    \r\n    At this point the User will need to **Log In** to the required **Consent UI Screen** using their **Internet Banking credentials**.\r\n\r\n    If the User **grants** their **Consent** a successful Access Token is returned.\r\n\r\n    In order for this to happe, the TPP needs to follow the Authorization Endpoint by amending the generated \"Consent ID\", like this: https://my.nbg.gr/identity/connect/authorize?consent_id={{consent_id}}&client_id={{client_id}}&scope={{scope}}&redirect_uri={{redirect_uri}}&response_type=code\r\n\r\n3. Once the Authorization Access Token is obtained, the TPP may access the APIs Endpoints to retrieve the Information they desire.\r\n\r\n<br/>\r\n\r\n#### User Identification and Obtaining Token\r\nThe process is described in the \"Authentication and Authorization (OAuth2)\" Section.\r\n\r\n<br/>\r\n\r\n#### Accounts Consent UI\r\nFor a PSU to Authorize a Consent, they need to be redirected to the appropriate Consent UI.\r\n\r\nFor this redirection to take place the TPP needs to follow the Authorization Endpoint by amending the generated \"Consent ID\", like this: https://my.nbg.gr/identity/connect/authorize?consent_id={{consent_id}}&client_id={{client_id}}&scope={{scope}}&redirect_uri={{redirect_uri}}&response_type=code\r\n\r\nOnce the PSU is redirected to the Consent Authorization Screen, they need to enter their IBank (Production) or Developer Portal (Sandbox) Credentials and either Authorize or Reject the Consent.\r\n\r\nAt this point the Consent is binded with the PSU.\r\n\r\n<br/>\r\n\r\n#### Signing\r\nSigning is not used in this version. Securiy relys on QWAC certificates.\r\n\r\n<br/>\r\n\r\n#### SCA Processes\r\nCurrently, multiple SCA processes are not supported.\r\n\r\n<br/>\r\n\r\n#### Access Tokens and Endpoints\r\nThe Account Information Endpoints can be called only by using an Authorization Flow Access Token.\r\n\r\nThe Consent Endpoints can be called by using either a Client Credentials Access Token or an Authorization Flow Access Token.\r\n\r\n<br/><br/>\r\n\r\n\r\n### Implementation Specifics\r\n\r\n#### Consent Model\r\nAt this point we support the \"Detailed Consent\" Model, where the PSU may select the Accounts they wish to grant access through the Consent UI Screen.\r\n\r\n##### frequencyPerDay\r\nValue must be greater or equal to \"1\" and less or equal to \"4\". Default value and if not otherwise stated is “4”.\r\n\r\n##### recurringIndicator\r\nAt this point we don't support this functionality. The value must be \"false\".\r\n\r\n##### combinedServiceIndicator\r\nAt this point we don't support this functionality. The value must be \"false\".\r\n\r\n\r\n<br/><br/>\r\n\r\n#### Error Codes\r\nSome returned Error Codes have been modified for simplicity.\r\n\r\nMore specifically, the \"**401**\" and \"**403**\" Status Codes do not return the expected Return Data Type, but an empty response with the appropriate Status Code.\r\n\r\n\r\n ________________________________________\r\n\r\nCreated by [**NBG**](https://www.nbg.gr/).\r\n"
  contact:
    name: NBG
    url: 'https://developer.nbg.gr/'
    email: developer@nbg.gr
  version: v1.3.6
servers:
  - url: 'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1'
    description: Sandbox Server
  - url: 'https://services.nbg.gr/apis/bg-open-banking-aisp/v1'
    description: Production Server
paths:
  /consents:
    post:
      tags:
        - Account Access Consent
      summary: Creates an account access consent
      description: "This method create a consent resource, defining access rights to dedicated accounts of  a given PSU-ID. These accounts are addressed explicitly in the method as  parameters as a core function.<br /><br />\r\n**Side Effects** When this consent request is a request where the \"recurringIndicator\" equals \"true\", and if it exists already a former consent for recurring access on account information  for the addressed PSU, then the former consent automatically expires as soon as the new  consent request is authorised by the PSU.<br /><br />\r\nOptional Extension: As an option, an ASPSP might optionally accept a specific access right on the access on all PSD2 related services for all available accounts.<br /><br />\r\nAs another option an ASPSP might optionally also accept a command, where only access rights are inserted without mentioning the addressed account.\r\nThe relation to accounts is then handled afterwards between PSU and ASPSP.  This option is not supported for the Embedded SCA Approach.\r\nAs a last option, an ASPSP might in addition accept a command with access rights\r\n* to see the list of available payment accounts or\r\n* to see the list of available payment accounts with balances."
      security:
        - Client-Id: []
          Authorization-Code-Token:
            - sandbox-bg-ob-accounts offline_access
            - bg-ob-accounts offline_access
        - Client-Id: []
          Client-Credentials-Token:
            - sandbox-uk-payments-api-v1
            - payments
      operationId: CreateAccountAccessConsent
      parameters:
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: TPP-Callback-Url
          in: header
          description: >-
            The TPP callback url after consent authorization. If found will be
            attached to SCA Redirect Url
          schema:
            type: string
            example: 'https://www.nbg.gr/'
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      requestBody:
        description: Account Access Consent Json
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountAccessConsentRequest'
      responses:
        '201':
          description: Account Access Consent Created
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
            Location:
              description: Location of the created resource.
              schema:
                type: string
                description: Location of the created resource.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAccessConsentResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '415':
          description: Unsupported Media Type
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "tpp-callback-url:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"access\":{\"accounts\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"balances\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"transactions\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"availableAccounts\":\"allAccounts\"},\"recurringIndicator\":false,\"validUntil\":\"<ADD
            STRING
            VALUE>\",\"frequencyPerDay\":0,\"combinedServiceIndicator\":false}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("tpp-callback-url", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json",
            "{\"access\":{\"accounts\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"balances\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"transactions\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"availableAccounts\":\"allAccounts\"},\"recurringIndicator\":false,\"validUntil\":\"<ADD
            STRING
            VALUE>\",\"frequencyPerDay\":0,\"combinedServiceIndicator\":false}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents\"\n\n\tpayload := strings.NewReader(\"{\\\"access\\\":{\\\"accounts\\\":[{\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"pan\\\":\\\"<ADD STRING VALUE>\\\",\\\"currency\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"balances\\\":[{\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"pan\\\":\\\"<ADD STRING VALUE>\\\",\\\"currency\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"transactions\\\":[{\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"pan\\\":\\\"<ADD STRING VALUE>\\\",\\\"currency\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"availableAccounts\\\":\\\"allAccounts\\\"},\\\"recurringIndicator\\\":false,\\\"validUntil\\\":\\\"<ADD STRING VALUE>\\\",\\\"frequencyPerDay\\\":0,\\\"combinedServiceIndicator\\\":false}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"tpp-callback-url\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"access\":{\"accounts\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"balances\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"transactions\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"availableAccounts\":\"allAccounts\"},\"recurringIndicator\":false,\"validUntil\":\"<ADD
            STRING
            VALUE>\",\"frequencyPerDay\":0,\"combinedServiceIndicator\":false}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("tpp-callback-url", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'tpp-callback-url': 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { access:
                  { accounts:
                     [ { iban: '<ADD STRING VALUE>',
                         pan: '<ADD STRING VALUE>',
                         currency: '<ADD STRING VALUE>' } ],
                    balances:
                     [ { iban: '<ADD STRING VALUE>',
                         pan: '<ADD STRING VALUE>',
                         currency: '<ADD STRING VALUE>' } ],
                    transactions:
                     [ { iban: '<ADD STRING VALUE>',
                         pan: '<ADD STRING VALUE>',
                         currency: '<ADD STRING VALUE>' } ],
                    availableAccounts: 'allAccounts' },
                 recurringIndicator: false,
                 validUntil: '<ADD STRING VALUE>',
                 frequencyPerDay: 0,
                 combinedServiceIndicator: false },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"access\":{\"accounts\":[{\"iban\":\"<ADD STRING VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\"}],\"balances\":[{\"iban\":\"<ADD STRING VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\"}],\"transactions\":[{\"iban\":\"<ADD STRING VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING VALUE>\"}],\"availableAccounts\":\"allAccounts\"},\"recurringIndicator\":false,\"validUntil\":\"<ADD STRING VALUE>\",\"frequencyPerDay\":0,\"combinedServiceIndicator\":false}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "tpp-callback-url: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"access\":{\"accounts\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"balances\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"transactions\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"availableAccounts\":\"allAccounts\"},\"recurringIndicator\":false,\"validUntil\":\"<ADD
            STRING
            VALUE>\",\"frequencyPerDay\":0,\"combinedServiceIndicator\":false}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'tpp-callback-url': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/consents", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["tpp-callback-url"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"access\":{\"accounts\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"balances\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"transactions\":[{\"iban\":\"<ADD STRING
            VALUE>\",\"pan\":\"<ADD STRING VALUE>\",\"currency\":\"<ADD STRING
            VALUE>\"}],\"availableAccounts\":\"allAccounts\"},\"recurringIndicator\":false,\"validUntil\":\"<ADD
            STRING
            VALUE>\",\"frequencyPerDay\":0,\"combinedServiceIndicator\":false}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'tpp-callback-url: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE' \
              --data '{"access":{"accounts":[{"iban":"<ADD STRING VALUE>","pan":"<ADD STRING VALUE>","currency":"<ADD STRING VALUE>"}],"balances":[{"iban":"<ADD STRING VALUE>","pan":"<ADD STRING VALUE>","currency":"<ADD STRING VALUE>"}],"transactions":[{"iban":"<ADD STRING VALUE>","pan":"<ADD STRING VALUE>","currency":"<ADD STRING VALUE>"}],"availableAccounts":"allAccounts"},"recurringIndicator":false,"validUntil":"<ADD STRING VALUE>","frequencyPerDay":0,"combinedServiceIndicator":false}'
  '/consents/{consentId}':
    get:
      tags:
        - Account Access Consent
      summary: Retrieves information for an account access consent
      description: >-
        Returns the content of an account information consent object.  This is
        returning the data for the TPP especially in cases,  where the consent
        was directly managed between ASPSP and PSU e.g. in a redirect SCA
        Approach.
      security:
        - Client-Id: []
          Authorization-Code-Token:
            - sandbox-bg-ob-accounts offline_access
            - bg-ob-accounts offline_access
        - Client-Id: []
          Client-Credentials-Token:
            - sandbox-uk-payments-api-v1
            - payments
      operationId: GetAccountAccessConsentInformation
      parameters:
        - name: consentId
          in: path
          description: Consent Id
          required: true
          schema:
            type: string
            description: Consent Id
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Account Access Consent Information Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAccessConsentInformationResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
    delete:
      tags:
        - Account Access Consent
      summary: Deletes an account access consent
      description: The TPP can delete an account information consent object if needed.
      security:
        - Client-Id: []
          Authorization-Code-Token:
            - sandbox-bg-ob-accounts offline_access
            - bg-ob-accounts offline_access
        - Client-Id: []
          Client-Credentials-Token:
            - sandbox-uk-payments-api-v1
            - payments
      operationId: DeleteAccountAccessConsent
      parameters:
        - name: consentId
          in: path
          description: Consent Id
          required: true
          schema:
            type: string
            description: Consent Id
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '204':
          description: No Content
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D")
              .delete(null)
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("DELETE",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request DELETE \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  '/consents/{consentId}/status':
    get:
      tags:
        - Account Access Consent
      summary: Retrieves status for an account access consent
      description: Read the status of an account information consent resource.
      security:
        - Client-Id: []
          Authorization-Code-Token:
            - sandbox-bg-ob-accounts offline_access
            - bg-ob-accounts offline_access
        - Client-Id: []
          Client-Credentials-Token:
            - sandbox-uk-payments-api-v1
            - payments
      operationId: GetAccountAccessConsentStatus
      parameters:
        - name: consentId
          in: path
          description: Consent Id
          required: true
          schema:
            type: string
            description: Consent Id
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Account Access Consent Status Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountAccessConsentsStatusResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/consents/%7BconsentId%7D/status \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  /accounts:
    get:
      tags:
        - Accounts
      summary: Read account list
      description: "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.<br /><br />\r\nIt is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.\r\nThe addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId, respectively the OAuth2 access token.<br /><br />\r\nReturns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.<br /><br />\r\n**Remark:** Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP."
      operationId: GetAccountList
      parameters:
        - name: withBalance
          in: query
          description: >-
            If contained, this function reads the list of accessible payment
            accounts including the booking balance,  if granted by the PSU in
            the related consent and available by the ASPSP.  This parameter
            might be ignored by the ASPSP.
          schema:
            type: boolean
            description: >-
              If contained, this function reads the list of accessible payment
              accounts including the booking balance,  if granted by the PSU in
              the related consent and available by the ASPSP.  This parameter
              might be ignored by the ASPSP.
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts',
              qs: { withBalance: 'SOME_BOOLEAN_VALUE' },
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url 'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts?withBalance=SOME_BOOLEAN_VALUE' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  '/accounts/{accountId}':
    get:
      tags:
        - Accounts
      summary: Read account details
      description: "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.\r\nThe addressed details of this account depends then on the stored consent addressed by consentId, respectively the OAuth2 access token.<br /><br />\r\n**NOTE:** The account-id can represent a multicurrency account. In this case the currency code is set to \"XXX\".<br /><br />\r\nGive detailed information about the addressed account.  Give detailed information about the addressed account together with balance information"
      operationId: GetAccountDetails
      parameters:
        - name: accountId
          in: path
          description: Account Id
          required: true
          schema:
            type: string
            description: Account Id
            nullable: true
        - name: withBalance
          in: query
          description: >-
            If contained, this function reads the list of accessible payment
            accounts including the booking balance,  if granted by the PSU in
            the related consent and available by the ASPSP.  This parameter
            might be ignored by the ASPSP.
          schema:
            type: boolean
            description: >-
              If contained, this function reads the list of accessible payment
              accounts including the booking balance,  if granted by the PSU in
              the related consent and available by the ASPSP.  This parameter
              might be ignored by the ASPSP.
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountDetailsResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D',
              qs: { withBalance: 'SOME_BOOLEAN_VALUE' },
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url 'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D?withBalance=SOME_BOOLEAN_VALUE' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  '/accounts/{accountId}/balances':
    get:
      tags:
        - Balances
      summary: Read account balances
      description: "Reads account data from a given account addressed by \"account-id\".<br /><br />\r\n**Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"Get account list\" call.<br /><br />\r\nThe account-id is constant at least throughout the lifecycle of a given consent."
      operationId: GetAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Id
          required: true
          schema:
            type: string
            description: Account Id
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceDetailsResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/balances \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  '/card-accounts/{accountId}/balances':
    get:
      tags:
        - Balances
      summary: Read card account balances
      description: "Reads balance data from a given card account addressed by \"account-id\".\r\n**Remark:** This account-id can be a tokenised identification due  to data protection reason since the path information might be  logged on intermediary servers within the ASPSP sphere.\r\nThis account-id then can be retrieved by the  \"Get card account list\" call."
      operationId: GetCardAccountBalances
      parameters:
        - name: accountId
          in: path
          description: Account Id
          required: true
          schema:
            type: string
            description: Account Id
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceDetailsResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/balances \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  /card-accounts:
    get:
      tags:
        - Cards
      summary: Read a list of card accounts
      description: >-
        Reads a list of card accounts with additional information, e.g. balance
        information.  It is assumed that a consent of the PSU to this access is
        already given and stored on the ASPSP system.  The addressed list of
        card accounts depends then on the PSU ID and the stored consent
        addressed by consentId,  respectively the OAuth2 access token.
      operationId: GetCardAccountList
      parameters:
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardAccountList'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  '/card-accounts/{accountId}':
    get:
      tags:
        - Cards
      summary: Read details about a card account
      description: >-
        Reads details about a card account.  It is assumed that a consent of the
        PSU to this access is already given  and stored on the ASPSP system. The
        addressed details of this account depends  then on the stored consent
        addressed by consentId, respectively the OAuth2  access token.
      operationId: GetCardAccountDetails
      parameters:
        - name: accountId
          in: path
          description: >-
            This identification is denoting the addressed account.  The
            account-id is retrieved by using a "Read account list" call. The
            account-id is the "id" attribute of the account structure.  Its
            value is constant at least throughout the lifecycle of a given
            consent.
          required: true
          schema:
            type: string
            description: >-
              This identification is denoting the addressed account.  The
              account-id is retrieved by using a "Read account list" call. The
              account-id is the "id" attribute of the account structure.  Its
              value is constant at least throughout the lifecycle of a given
              consent.
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDetailsResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  /sandbox:
    post:
      tags:
        - Sandbox Operations
      summary: Create Sandbox
      description: Create Sandbox
      requestBody:
        description: SandboxRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SandboxRequest'
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/SandboxRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandbox'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Sandbox'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '405':
          description: Method Not Allowed
        '406':
          description: Not Acceptable
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"sandboxId\":\"<ADD
            STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"sandboxId\":\"<ADD
            STRING VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox\"\n\n\tpayload := strings.NewReader(\"{\\\"sandboxId\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"sandboxId\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body: { sandboxId: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"sandboxId\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"sandboxId\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"sandboxId\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"sandboxId":"<ADD STRING VALUE>"}'
    put:
      tags:
        - Sandbox Operations
      summary: Import Sandbox
      description: Import Sandbox
      requestBody:
        description: Sandbox
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sandbox'
          application/json; charset=utf-8:
            schema:
              $ref: '#/components/schemas/Sandbox'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
        '406':
          description: Not Acceptable
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"sandboxId\":\"<ADD
            STRING VALUE>\",\"users\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"smsOtpMobileNumber\":\"<ADD STRING
            VALUE>\",\"retryCacheEntries\":[{\"cacheKey\":\"<ADD STRING
            VALUE>\",\"count\":0,\"expirationTimestamp\":\"<ADD STRING
            VALUE>\"}],\"accounts\":[{\"info\":{\"currency\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"accountSubType\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"overdraftLimit\":0},\"beneficiaries\":[{\"name\":\"<ADD
            STRING VALUE>\"}],\"transactions\":[{\"id\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING
            VALUE>\"}],\"standingOrders\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"creationDate\":\"<ADD STRING
            VALUE>\",\"firstPaymentDate\":\"<ADD STRING
            VALUE>\",\"numberOfPayments\":0,\"amount\":0,\"creditorName\":\"<ADD
            STRING VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}],\"scheduledPayments\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"creationDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"creditorName\":\"<ADD STRING
            VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}]}],\"cards\":[{\"info\":{\"number\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"holderName\":\"<ADD STRING VALUE>\",\"expiration\":\"<ADD
            STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"subType\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"creditLimit\":0},\"transactions\":[{\"id\":\"<ADD
            STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}]}]}]}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"sandboxId\":\"<ADD
            STRING VALUE>\",\"users\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"smsOtpMobileNumber\":\"<ADD STRING
            VALUE>\",\"retryCacheEntries\":[{\"cacheKey\":\"<ADD STRING
            VALUE>\",\"count\":0,\"expirationTimestamp\":\"<ADD STRING
            VALUE>\"}],\"accounts\":[{\"info\":{\"currency\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"accountSubType\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"overdraftLimit\":0},\"beneficiaries\":[{\"name\":\"<ADD
            STRING VALUE>\"}],\"transactions\":[{\"id\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING
            VALUE>\"}],\"standingOrders\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"creationDate\":\"<ADD STRING
            VALUE>\",\"firstPaymentDate\":\"<ADD STRING
            VALUE>\",\"numberOfPayments\":0,\"amount\":0,\"creditorName\":\"<ADD
            STRING VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}],\"scheduledPayments\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"creationDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"creditorName\":\"<ADD STRING
            VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}]}],\"cards\":[{\"info\":{\"number\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"holderName\":\"<ADD STRING VALUE>\",\"expiration\":\"<ADD
            STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"subType\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"creditLimit\":0},\"transactions\":[{\"id\":\"<ADD
            STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}]}]}]}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox\"\n\n\tpayload := strings.NewReader(\"{\\\"sandboxId\\\":\\\"<ADD STRING VALUE>\\\",\\\"users\\\":[{\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"smsOtpMobileNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"retryCacheEntries\\\":[{\\\"cacheKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"count\\\":0,\\\"expirationTimestamp\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"accounts\\\":[{\\\"info\\\":{\\\"currency\\\":\\\"<ADD STRING VALUE>\\\",\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountType\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountSubType\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"alias\\\":\\\"<ADD STRING VALUE>\\\",\\\"availableBalance\\\":0,\\\"ledgerBalance\\\":0,\\\"overdraftLimit\\\":0},\\\"beneficiaries\\\":[{\\\"name\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"transactions\\\":[{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"amount\\\":0,\\\"currency\\\":\\\"<ADD STRING VALUE>\\\",\\\"creditDebit\\\":\\\"<ADD STRING VALUE>\\\",\\\"valueDateTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"bookingDateTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountingBalance\\\":0,\\\"relatedAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"relatedName\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionCode\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"standingOrders\\\":[{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"frequency\\\":0,\\\"creationDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"firstPaymentDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"numberOfPayments\\\":0,\\\"amount\\\":0,\\\"creditorName\\\":\\\"<ADD STRING VALUE>\\\",\\\"creditorAccount\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"scheduledPayments\\\":[{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"creationDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"executionDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"amount\\\":0,\\\"creditorName\\\":\\\"<ADD STRING VALUE>\\\",\\\"creditorAccount\\\":\\\"<ADD STRING VALUE>\\\"}]}],\\\"cards\\\":[{\\\"info\\\":{\\\"number\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"holderName\\\":\\\"<ADD STRING VALUE>\\\",\\\"expiration\\\":\\\"<ADD STRING VALUE>\\\",\\\"type\\\":\\\"<ADD STRING VALUE>\\\",\\\"subType\\\":\\\"<ADD STRING VALUE>\\\",\\\"availableBalance\\\":0,\\\"ledgerBalance\\\":0,\\\"creditLimit\\\":0},\\\"transactions\\\":[{\\\"id\\\":\\\"<ADD STRING VALUE>\\\",\\\"amount\\\":0,\\\"currency\\\":\\\"<ADD STRING VALUE>\\\",\\\"creditDebit\\\":\\\"<ADD STRING VALUE>\\\",\\\"valueDateTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"bookingDateTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountingBalance\\\":0,\\\"relatedAccount\\\":\\\"<ADD STRING VALUE>\\\",\\\"relatedName\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionCode\\\":\\\"<ADD STRING VALUE>\\\"}]}]}]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"sandboxId\":\"<ADD STRING VALUE>\",\"users\":[{\"userId\":\"<ADD
            STRING VALUE>\",\"smsOtpMobileNumber\":\"<ADD STRING
            VALUE>\",\"retryCacheEntries\":[{\"cacheKey\":\"<ADD STRING
            VALUE>\",\"count\":0,\"expirationTimestamp\":\"<ADD STRING
            VALUE>\"}],\"accounts\":[{\"info\":{\"currency\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"accountSubType\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"overdraftLimit\":0},\"beneficiaries\":[{\"name\":\"<ADD
            STRING VALUE>\"}],\"transactions\":[{\"id\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING
            VALUE>\"}],\"standingOrders\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"creationDate\":\"<ADD STRING
            VALUE>\",\"firstPaymentDate\":\"<ADD STRING
            VALUE>\",\"numberOfPayments\":0,\"amount\":0,\"creditorName\":\"<ADD
            STRING VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}],\"scheduledPayments\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"creationDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"creditorName\":\"<ADD STRING
            VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}]}],\"cards\":[{\"info\":{\"number\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"holderName\":\"<ADD STRING VALUE>\",\"expiration\":\"<ADD
            STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"subType\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"creditLimit\":0},\"transactions\":[{\"id\":\"<ADD
            STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}]}]}]}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { sandboxId: '<ADD STRING VALUE>',
                 users:
                  [ { userId: '<ADD STRING VALUE>',
                      smsOtpMobileNumber: '<ADD STRING VALUE>',
                      retryCacheEntries:
                       [ { cacheKey: '<ADD STRING VALUE>',
                           count: 0,
                           expirationTimestamp: '<ADD STRING VALUE>' } ],
                      accounts:
                       [ { info:
                            { currency: '<ADD STRING VALUE>',
                              iban: '<ADD STRING VALUE>',
                              accountType: '<ADD STRING VALUE>',
                              accountSubType: '<ADD STRING VALUE>',
                              description: '<ADD STRING VALUE>',
                              alias: '<ADD STRING VALUE>',
                              availableBalance: 0,
                              ledgerBalance: 0,
                              overdraftLimit: 0 },
                           beneficiaries: [ { name: '<ADD STRING VALUE>' } ],
                           transactions:
                            [ { id: '<ADD STRING VALUE>',
                                amount: 0,
                                currency: '<ADD STRING VALUE>',
                                creditDebit: '<ADD STRING VALUE>',
                                valueDateTime: '<ADD STRING VALUE>',
                                bookingDateTime: '<ADD STRING VALUE>',
                                description: '<ADD STRING VALUE>',
                                accountingBalance: 0,
                                relatedAccount: '<ADD STRING VALUE>',
                                relatedName: '<ADD STRING VALUE>',
                                transactionCode: '<ADD STRING VALUE>' } ],
                           standingOrders:
                            [ { id: '<ADD STRING VALUE>',
                                description: '<ADD STRING VALUE>',
                                frequency: 0,
                                creationDate: '<ADD STRING VALUE>',
                                firstPaymentDate: '<ADD STRING VALUE>',
                                numberOfPayments: 0,
                                amount: 0,
                                creditorName: '<ADD STRING VALUE>',
                                creditorAccount: '<ADD STRING VALUE>' } ],
                           scheduledPayments:
                            [ { id: '<ADD STRING VALUE>',
                                description: '<ADD STRING VALUE>',
                                creationDate: '<ADD STRING VALUE>',
                                executionDate: '<ADD STRING VALUE>',
                                amount: 0,
                                creditorName: '<ADD STRING VALUE>',
                                creditorAccount: '<ADD STRING VALUE>' } ] } ],
                      cards:
                       [ { info:
                            { number: '<ADD STRING VALUE>',
                              description: '<ADD STRING VALUE>',
                              holderName: '<ADD STRING VALUE>',
                              expiration: '<ADD STRING VALUE>',
                              type: '<ADD STRING VALUE>',
                              subType: '<ADD STRING VALUE>',
                              availableBalance: 0,
                              ledgerBalance: 0,
                              creditLimit: 0 },
                           transactions:
                            [ { id: '<ADD STRING VALUE>',
                                amount: 0,
                                currency: '<ADD STRING VALUE>',
                                creditDebit: '<ADD STRING VALUE>',
                                valueDateTime: '<ADD STRING VALUE>',
                                bookingDateTime: '<ADD STRING VALUE>',
                                description: '<ADD STRING VALUE>',
                                accountingBalance: 0,
                                relatedAccount: '<ADD STRING VALUE>',
                                relatedName: '<ADD STRING VALUE>',
                                transactionCode: '<ADD STRING VALUE>' } ] } ] } ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"sandboxId\":\"<ADD STRING VALUE>\",\"users\":[{\"userId\":\"<ADD STRING VALUE>\",\"smsOtpMobileNumber\":\"<ADD STRING VALUE>\",\"retryCacheEntries\":[{\"cacheKey\":\"<ADD STRING VALUE>\",\"count\":0,\"expirationTimestamp\":\"<ADD STRING VALUE>\"}],\"accounts\":[{\"info\":{\"currency\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD STRING VALUE>\",\"accountSubType\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD STRING VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"overdraftLimit\":0},\"beneficiaries\":[{\"name\":\"<ADD STRING VALUE>\"}],\"transactions\":[{\"id\":\"<ADD STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING VALUE>\",\"creditDebit\":\"<ADD STRING VALUE>\",\"valueDateTime\":\"<ADD STRING VALUE>\",\"bookingDateTime\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}],\"standingOrders\":[{\"id\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"frequency\":0,\"creationDate\":\"<ADD STRING VALUE>\",\"firstPaymentDate\":\"<ADD STRING VALUE>\",\"numberOfPayments\":0,\"amount\":0,\"creditorName\":\"<ADD STRING VALUE>\",\"creditorAccount\":\"<ADD STRING VALUE>\"}],\"scheduledPayments\":[{\"id\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"creationDate\":\"<ADD STRING VALUE>\",\"executionDate\":\"<ADD STRING VALUE>\",\"amount\":0,\"creditorName\":\"<ADD STRING VALUE>\",\"creditorAccount\":\"<ADD STRING VALUE>\"}]}],\"cards\":[{\"info\":{\"number\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"holderName\":\"<ADD STRING VALUE>\",\"expiration\":\"<ADD STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"subType\":\"<ADD STRING VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"creditLimit\":0},\"transactions\":[{\"id\":\"<ADD STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING VALUE>\",\"creditDebit\":\"<ADD STRING VALUE>\",\"valueDateTime\":\"<ADD STRING VALUE>\",\"bookingDateTime\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING VALUE>\",\"relatedName\":\"<ADD STRING VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}]}]}]}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"sandboxId\":\"<ADD STRING
            VALUE>\",\"users\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"smsOtpMobileNumber\":\"<ADD STRING
            VALUE>\",\"retryCacheEntries\":[{\"cacheKey\":\"<ADD STRING
            VALUE>\",\"count\":0,\"expirationTimestamp\":\"<ADD STRING
            VALUE>\"}],\"accounts\":[{\"info\":{\"currency\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"accountSubType\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"overdraftLimit\":0},\"beneficiaries\":[{\"name\":\"<ADD
            STRING VALUE>\"}],\"transactions\":[{\"id\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING
            VALUE>\"}],\"standingOrders\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"creationDate\":\"<ADD STRING
            VALUE>\",\"firstPaymentDate\":\"<ADD STRING
            VALUE>\",\"numberOfPayments\":0,\"amount\":0,\"creditorName\":\"<ADD
            STRING VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}],\"scheduledPayments\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"creationDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"creditorName\":\"<ADD STRING
            VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}]}],\"cards\":[{\"info\":{\"number\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"holderName\":\"<ADD STRING VALUE>\",\"expiration\":\"<ADD
            STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"subType\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"creditLimit\":0},\"transactions\":[{\"id\":\"<ADD
            STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}]}]}]}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"sandboxId\":\"<ADD STRING
            VALUE>\",\"users\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"smsOtpMobileNumber\":\"<ADD STRING
            VALUE>\",\"retryCacheEntries\":[{\"cacheKey\":\"<ADD STRING
            VALUE>\",\"count\":0,\"expirationTimestamp\":\"<ADD STRING
            VALUE>\"}],\"accounts\":[{\"info\":{\"currency\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"accountType\":\"<ADD
            STRING VALUE>\",\"accountSubType\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"alias\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"overdraftLimit\":0},\"beneficiaries\":[{\"name\":\"<ADD
            STRING VALUE>\"}],\"transactions\":[{\"id\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING
            VALUE>\"}],\"standingOrders\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"frequency\":0,\"creationDate\":\"<ADD STRING
            VALUE>\",\"firstPaymentDate\":\"<ADD STRING
            VALUE>\",\"numberOfPayments\":0,\"amount\":0,\"creditorName\":\"<ADD
            STRING VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}],\"scheduledPayments\":[{\"id\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"creationDate\":\"<ADD STRING
            VALUE>\",\"executionDate\":\"<ADD STRING
            VALUE>\",\"amount\":0,\"creditorName\":\"<ADD STRING
            VALUE>\",\"creditorAccount\":\"<ADD STRING
            VALUE>\"}]}],\"cards\":[{\"info\":{\"number\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"holderName\":\"<ADD STRING VALUE>\",\"expiration\":\"<ADD
            STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"subType\":\"<ADD
            STRING
            VALUE>\",\"availableBalance\":0,\"ledgerBalance\":0,\"creditLimit\":0},\"transactions\":[{\"id\":\"<ADD
            STRING VALUE>\",\"amount\":0,\"currency\":\"<ADD STRING
            VALUE>\",\"creditDebit\":\"<ADD STRING
            VALUE>\",\"valueDateTime\":\"<ADD STRING
            VALUE>\",\"bookingDateTime\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"accountingBalance\":0,\"relatedAccount\":\"<ADD STRING
            VALUE>\",\"relatedName\":\"<ADD STRING
            VALUE>\",\"transactionCode\":\"<ADD STRING VALUE>\"}]}]}]}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox \
              --header 'accept: application/json' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"sandboxId":"<ADD STRING VALUE>","users":[{"userId":"<ADD STRING VALUE>","smsOtpMobileNumber":"<ADD STRING VALUE>","retryCacheEntries":[{"cacheKey":"<ADD STRING VALUE>","count":0,"expirationTimestamp":"<ADD STRING VALUE>"}],"accounts":[{"info":{"currency":"<ADD STRING VALUE>","iban":"<ADD STRING VALUE>","accountType":"<ADD STRING VALUE>","accountSubType":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","alias":"<ADD STRING VALUE>","availableBalance":0,"ledgerBalance":0,"overdraftLimit":0},"beneficiaries":[{"name":"<ADD STRING VALUE>"}],"transactions":[{"id":"<ADD STRING VALUE>","amount":0,"currency":"<ADD STRING VALUE>","creditDebit":"<ADD STRING VALUE>","valueDateTime":"<ADD STRING VALUE>","bookingDateTime":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","accountingBalance":0,"relatedAccount":"<ADD STRING VALUE>","relatedName":"<ADD STRING VALUE>","transactionCode":"<ADD STRING VALUE>"}],"standingOrders":[{"id":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","frequency":0,"creationDate":"<ADD STRING VALUE>","firstPaymentDate":"<ADD STRING VALUE>","numberOfPayments":0,"amount":0,"creditorName":"<ADD STRING VALUE>","creditorAccount":"<ADD STRING VALUE>"}],"scheduledPayments":[{"id":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","creationDate":"<ADD STRING VALUE>","executionDate":"<ADD STRING VALUE>","amount":0,"creditorName":"<ADD STRING VALUE>","creditorAccount":"<ADD STRING VALUE>"}]}],"cards":[{"info":{"number":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","holderName":"<ADD STRING VALUE>","expiration":"<ADD STRING VALUE>","type":"<ADD STRING VALUE>","subType":"<ADD STRING VALUE>","availableBalance":0,"ledgerBalance":0,"creditLimit":0},"transactions":[{"id":"<ADD STRING VALUE>","amount":0,"currency":"<ADD STRING VALUE>","creditDebit":"<ADD STRING VALUE>","valueDateTime":"<ADD STRING VALUE>","bookingDateTime":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","accountingBalance":0,"relatedAccount":"<ADD STRING VALUE>","relatedName":"<ADD STRING VALUE>","transactionCode":"<ADD STRING VALUE>"}]}]}]}'
  '/sandbox/{sandboxId}':
    get:
      tags:
        - Sandbox Operations
      summary: Export Sandbox
      description: Export Sandbox
      parameters:
        - name: sandboxId
          in: path
          description: Sandbox Id
          required: true
          schema:
            type: string
            description: Sandbox Id
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandbox'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Sandbox'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
        '406':
          description: Not Acceptable
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
    delete:
      tags:
        - Sandbox Operations
      summary: Delete Sandbox
      description: Delete Sandbox
      parameters:
        - name: sandboxId
          in: path
          description: Sandbox Id
          required: true
          schema:
            type: string
            description: Sandbox Id
            nullable: true
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '405':
          description: Method Not Allowed
        '406':
          description: Not Acceptable
        '415':
          description: Unsupported Media Type
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D")
              .delete(null)
              .addHeader("content-type", "application/json")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'authorization': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("DELETE",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request DELETE \
              --url https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/sandbox/%7BsandboxId%7D \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
  '/accounts/{accountId}/transactions':
    get:
      tags:
        - Transactions
      summary: Read transaction list of an account
      description: "Read transaction reports or transaction lists of a given account addressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.<br /><br />\r\nFor a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported."
      operationId: GetAccountTransactions
      parameters:
        - name: accountId
          in: path
          description: Account Id
          required: true
          schema:
            type: string
            description: Account Id
            nullable: true
        - name: bookingStatus
          in: query
          description: "Permitted codes are\r\n* \"information\",\r\n* \"booked\",\r\n* \"pending\", and\r\n* \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend"
          required: true
          schema:
            type: string
            description: "Permitted codes are\r\n* \"information\",\r\n* \"booked\",\r\n* \"pending\", and\r\n* \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend"
        - name: dateFrom
          in: query
          description: >-
            Conditional: Starting date (inclusive the date dateFrom) of the
            transaction list, mandated if no delta access is required and if
            bookingStatus does not equal "information.  For booked transactions,
            the relevant date is the booking date.   For pending transactions,
            the relevant date is the entry date, which may not be transparent 
            neither in this API nor other channels of the ASPSP.
          schema:
            type: string
            description: >-
              Conditional: Starting date (inclusive the date dateFrom) of the
              transaction list, mandated if no delta access is required and if
              bookingStatus does not equal "information.  For booked
              transactions, the relevant date is the booking date.   For pending
              transactions, the relevant date is the entry date, which may not
              be transparent  neither in this API nor other channels of the
              ASPSP.
            format: date-time
            nullable: true
        - name: dateTo
          in: query
          description: >-
            End date (inclusive the data dateTo) of the transaction list,
            default is "now" if not given.   Might be ignored if a delta
            function is used.  For booked transactions, the relevant date is the
            booking date.   For pending transactions, the relevant date is the
            entry date, which may not be transparent  neither in this API nor
            other channels of the ASPSP.
          schema:
            type: string
            description: >-
              End date (inclusive the data dateTo) of the transaction list,
              default is "now" if not given.   Might be ignored if a delta
              function is used.  For booked transactions, the relevant date is
              the booking date.   For pending transactions, the relevant date is
              the entry date, which may not be transparent  neither in this API
              nor other channels of the ASPSP.
            format: date-time
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountTransactionsResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions',
              qs:
               { bookingStatus: 'SOME_STRING_VALUE',
                 dateFrom: 'SOME_STRING_VALUE',
                 dateTo: 'SOME_STRING_VALUE' },
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url 'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
  '/card-accounts/{accountId}/transactions':
    get:
      tags:
        - Transactions
      summary: Read transaction list of a card account
      description: "Read transaction reports or transaction lists of a given account addressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.<br /><br />\r\nFor a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported."
      operationId: GetCardAccountTransactions
      parameters:
        - name: accountId
          in: path
          description: Account Id
          required: true
          schema:
            type: string
            description: Account Id
            nullable: true
        - name: bookingStatus
          in: query
          description: "Permitted codes are\r\n* \"information\",\r\n* \"booked\",\r\n* \"pending\", and\r\n* \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend"
          required: true
          schema:
            type: string
            description: "Permitted codes are\r\n* \"information\",\r\n* \"booked\",\r\n* \"pending\", and\r\n* \"both\" \"booked\" shall be supported by the ASPSP. To support the \"pending\" and \"both\" feature is optional for the ASPSP,  Error code if not supported in the online banking frontend"
        - name: dateFrom
          in: query
          description: >-
            Conditional: Starting date (inclusive the date dateFrom) of the
            transaction list, mandated if no delta access is required and if
            bookingStatus does not equal "information.  For booked transactions,
            the relevant date is the booking date.   For pending transactions,
            the relevant date is the entry date, which may not be transparent 
            neither in this API nor other channels of the ASPSP.
          schema:
            type: string
            description: >-
              Conditional: Starting date (inclusive the date dateFrom) of the
              transaction list, mandated if no delta access is required and if
              bookingStatus does not equal "information.  For booked
              transactions, the relevant date is the booking date.   For pending
              transactions, the relevant date is the entry date, which may not
              be transparent  neither in this API nor other channels of the
              ASPSP.
            format: date-time
            nullable: true
        - name: dateTo
          in: query
          description: >-
            End date (inclusive the data dateTo) of the transaction list,
            default is "now" if not given.   Might be ignored if a delta
            function is used.  For booked transactions, the relevant date is the
            booking date.   For pending transactions, the relevant date is the
            entry date, which may not be transparent  neither in this API nor
            other channels of the ASPSP.
          schema:
            type: string
            description: >-
              End date (inclusive the data dateTo) of the transaction list,
              default is "now" if not given.   Might be ignored if a delta
              function is used.  For booked transactions, the relevant date is
              the booking date.   For pending transactions, the relevant date is
              the entry date, which may not be transparent  neither in this API
              nor other channels of the ASPSP.
            format: date-time
            nullable: true
        - name: X-Request-ID
          in: header
          description: >-
            ID of the request, unique to the call, as determined by the
            initiating party.
          required: true
          schema:
            type: string
            example: 88579F09-1FE5-4286-9DE4-4EE5270A3667
        - name: Consent-ID
          in: header
          description: Acquired consent value.
          required: true
          schema:
            type: string
            example: 24457C13-CFBF-40C4-8E23-669BC437A676
        - name: PSU-IP-Address
          in: header
          description: >-
            The forwarded IP Address header field consists of the corresponding
            http request IP Address field between PSU and TPP. If not available,
            the TPP shall use the IP Address used by the TPP when submitting
            this request.
          schema:
            type: string
            example: 192.168.8.78
        - name: sandbox-id
          in: header
          description: The unique id of the sandbox to be used
          required: true
          schema:
            type: string
            example: my-payments-sandbox
      responses:
        '200':
          description: Accounts
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardTransactionsResponse'
        '400':
          description: Bad request
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
        '401':
          description: Unauthorized
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '403':
          description: Forbidden
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403NGAIS'
        '404':
          description: Not Found
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NGAIS'
        '405':
          description: Method Not Allowed
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '406':
          description: Not Acceptable
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        '429':
          description: Too Many Requests
        '500':
          description: Internal Server Error
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
        default:
          description: Error Response
          headers:
            X-Request-ID:
              description: >-
                ID of the request, unique to the call, as determined by the
                initiating party.
              schema:
                type: string
                description: >-
                  ID of the request, unique to the call, as determined by the
                  initiating party.
                format: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400NGAIS'
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "sandbox-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "authorization:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "psu-ip-address:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "consent-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "x-request-id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("sandbox-id", "SOME_STRING_VALUE");

            request.AddHeader("authorization", "SOME_STRING_VALUE");

            request.AddHeader("psu-ip-address", "SOME_STRING_VALUE");

            request.AddHeader("consent-id", "SOME_STRING_VALUE");

            request.AddHeader("x-request-id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-request-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"consent-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"psu-ip-address\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"authorization\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"sandbox-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("x-request-id", "SOME_STRING_VALUE")
              .addHeader("consent-id", "SOME_STRING_VALUE")
              .addHeader("psu-ip-address", "SOME_STRING_VALUE")
              .addHeader("authorization", "SOME_STRING_VALUE")
              .addHeader("sandbox-id", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions',
              qs:
               { bookingStatus: 'SOME_STRING_VALUE',
                 dateFrom: 'SOME_STRING_VALUE',
                 dateTo: 'SOME_STRING_VALUE' },
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'sandbox-id': 'SOME_STRING_VALUE',
                 authorization: 'SOME_STRING_VALUE',
                 'psu-ip-address': 'SOME_STRING_VALUE',
                 'consent-id': 'SOME_STRING_VALUE',
                 'x-request-id': 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "authorization: SOME_STRING_VALUE",
                "client-id: SOME_APIKEY_VALUE",
                "consent-id: SOME_STRING_VALUE",
                "content-type: application/json",
                "psu-ip-address: SOME_STRING_VALUE",
                "sandbox-id: SOME_STRING_VALUE",
                "x-request-id: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'x-request-id': "SOME_STRING_VALUE",
                'consent-id': "SOME_STRING_VALUE",
                'psu-ip-address': "SOME_STRING_VALUE",
                'authorization': "SOME_STRING_VALUE",
                'sandbox-id': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["x-request-id"] = 'SOME_STRING_VALUE'

            request["consent-id"] = 'SOME_STRING_VALUE'

            request["psu-ip-address"] = 'SOME_STRING_VALUE'

            request["authorization"] = 'SOME_STRING_VALUE'

            request["sandbox-id"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url 'https://apis.nbg.gr/sandbox/bg.openbanking.accounts/oauth2/v1/card-accounts/%7BaccountId%7D/transactions?bookingStatus=SOME_STRING_VALUE&dateFrom=SOME_STRING_VALUE&dateTo=SOME_STRING_VALUE' \
              --header 'authorization: SOME_STRING_VALUE' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'consent-id: SOME_STRING_VALUE' \
              --header 'content-type: application/json' \
              --header 'psu-ip-address: SOME_STRING_VALUE' \
              --header 'sandbox-id: SOME_STRING_VALUE' \
              --header 'x-request-id: SOME_STRING_VALUE'
components:
  schemas:
    AccountReference:
      type: object
      properties:
        iban:
          pattern: '[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}'
          type: string
          description: IBAN of an account
          nullable: true
          example: GR3201106970000069774934603
        pan:
          maxLength: 35
          minLength: 1
          type: string
          description: Primary Account Number according to ISO/IEC 7812.
          nullable: true
        currency:
          pattern: '[A-Z]{3}'
          type: string
          description: ISO 4217 Alpha 3 currency code
          nullable: true
          example: EUR
      additionalProperties: false
      description: "Reference to an account by either\r\n* IBAN, of a payment accounts, or\r\n* BBAN, for payment accounts if there is no IBAN"
    AccountsIndicator:
      enum:
        - allAccounts
        - allAccountsWithOwnerName
      type: string
      description: "Optional if supported by API provider.\r\nThe values \"allAccounts\" and \"allAccountsWithOwnerName\" are admitted.\r\nThe support of the \"allAccountsWithOwnerName\" value by the ASPSP is optional."
    AccountAccess:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountReference'
          description: "Is asking for detailed account information.\r\nIf the array is empty in a request, the TPP is asking for an accessible account list.\r\nThis may be restricted in a PSU/ASPSP authorization dialogue.\r\nIf the array is empty, also the arrays for balances, additionalInformation sub attributes or transactions shall be empty, if used."
          nullable: true
        balances:
          type: array
          items:
            $ref: '#/components/schemas/AccountReference'
          description: "Is asking for balances of the addressed accounts.\r\nIf the array is empty in the request, the TPP is asking for the balances of all accessible account lists.\r\nThis may be restricted in a PSU/ASPSP authorization dialogue.\r\nIf the array is empty, also the arrays for accounts, additionalInformation sub attributes or transactions shall be empty, if used."
          nullable: true
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/AccountReference'
          description: "Is asking for transactions of the addressed accounts.\r\nIf the array is empty in the request, the TPP is asking for the transactions of all accessible account lists.\r\nThis may be restricted in a PSU/ASPSP authorization dialogue.\r\nIf the array is empty, also the arrays for accounts, additionalInformation sub attributes or balances shall be empty, if used."
          nullable: true
        availableAccounts:
          $ref: '#/components/schemas/AccountsIndicator'
      additionalProperties: false
    AccountAccessConsentRequest:
      required:
        - access
        - combinedServiceIndicator
        - frequencyPerDay
        - recurringIndicator
        - validUntil
      type: object
      properties:
        access:
          $ref: '#/components/schemas/AccountAccess'
        recurringIndicator:
          type: boolean
          description: "\"true\", if the consent is for recurring access to the account data.\r\n\"false\", if the consent is for one access to the account data."
          example: true
        validUntil:
          type: string
          description: "This parameter is defining a valid until date (including the mentioned date) for the requested consent. The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.\r\nFuture dates might get adjusted by ASPSP.\r\nIf a maximal available date is requested, a date in far future is to be used: \"9999-12-31\".\r\nIn both cases the consent object to be retrieved by the get consent request will contain the adjusted date."
          format: date-time
          example: '2020-12-31T00:00:00.0000000'
        frequencyPerDay:
          type: integer
          description: "This field indicates the requested maximum frequency for an access without PSU involvement per day. For a one-off access, this attribute is set to \"1\".\r\nThe frequency needs to be greater equal to one.\r\nIf not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4."
          format: int32
          example: 4
        combinedServiceIndicator:
          type: boolean
          description: >-
            If "true" indicates that a payment initiation service will be
            addressed in the same "session".
          example: false
      additionalProperties: false
      description: Content of the body of a consent request.
    AccountAccessConsentStatus:
      enum:
        - received
        - rejected
        - valid
        - revokedByPsu
        - expired
        - terminatedByTpp
        - partiallyAuthorised
      type: string
      description: "This is the overall lifecycle status of the consent.\r\nValid values are:\r\n- 'received': The consent data have been received and are technically correct. The data is not authorised yet.\r\n- 'rejected': The consent data have been rejected e.g. since no successful authorisation has taken place.\r\n- 'valid': The consent is accepted and valid for GET account data calls and others as specified in the consent object.\r\n- 'revokedByPsu': The consent has been revoked by the PSU towards the ASPSP.\r\n- 'expired': The consent expired.\r\n- 'terminatedByTpp': The corresponding TPP has terminated the consent by applying the DELETE method to the consent resource.\r\n- 'partiallyAuthorised': The consent is due to a multi-level authorisation, some but not all mandated authorisations have been performed yet.\r\nThe ASPSP might add further codes. These codes then shall be contained in the ASPSP's documentation of the XS2A interface  and has to be added to this API definition as well."
    HrefType:
      type: object
      properties:
        href:
          type: string
          description: ''
          nullable: true
      additionalProperties: false
      description: Link to a resource.
    LinksConsent:
      type: object
      properties:
        scaRedirect:
          $ref: '#/components/schemas/HrefType'
        self:
          $ref: '#/components/schemas/HrefType'
        status:
          $ref: '#/components/schemas/HrefType'
      additionalProperties: false
      description: "A list of hyperlinks to be recognised by the TPP. The actual hyperlinks used in the response depend on the dynamical decisions of the ASPSP when processing the request.\r\n<br /><b>Remark:</b> All links can be relative or full links, to be decided by the ASPSP.<br />\r\nType of links admitted in this response, (further links might be added for ASPSP defined extensions):\r\n- 'scaRedirect': In case of an SCA Redirect Approach, the ASPSP is transmitting the link to which to redirect the PSU browser.\r\n- 'self': The link to the payment initiation resource created by this request.This link can be used to retrieve the resource data.\r\n- 'status': The link to retrieve the transaction status of the payment initiation."
    AccountAccessConsentResponse:
      required:
        - _links
        - consentId
        - consentStatus
      type: object
      properties:
        consentId:
          type: string
          description: >-
            ID of the corresponding consent object as returned by an account
            information consent request
        consentStatus:
          $ref: '#/components/schemas/AccountAccessConsentStatus'
        _links:
          $ref: '#/components/schemas/LinksConsent'
      additionalProperties: false
      description: Content of the body of a consent request.
    TppMessageCategory:
      enum:
        - ERROR
        - WARNING
      type: string
      description: Category of the TPP message category.
    MessageCode400AIS:
      enum:
        - FORMAT_ERROR
        - PARAMETER_NOT_CONSISTENT
        - PARAMETER_NOT_SUPPORTED
        - SERVICE_INVALID
        - RESOURCE_UNKNOWN
        - RESOURCE_EXPIRED
        - RESOURCE_BLOCKED
        - TIMESTAMP_INVALID
        - PERIOD_INVALID
        - SCA_METHOD_UNKNOWN
        - SCA_INVALID
        - CONSENT_UNKNOWN
        - SESSIONS_NOT_SUPPORTED
      type: string
      description: Message codes defined for AIS for HTTP Error code 400 (BAD_REQUEST).
    TppMessage400AIS:
      required:
        - category
        - code
      type: object
      properties:
        category:
          $ref: '#/components/schemas/TppMessageCategory'
        code:
          $ref: '#/components/schemas/MessageCode400AIS'
        path:
          type: string
          description: ''
          nullable: true
        text:
          type: string
          description: Additional explaining text to the TPP
          nullable: true
      additionalProperties: false
      description: ''
    Error400NGAIS:
      type: object
      properties:
        tppMessages:
          type: array
          items:
            $ref: '#/components/schemas/TppMessage400AIS'
          description: Gets or Sets TppMessages
          nullable: true
      additionalProperties: false
      description: >-
        NextGenPSD2 specific definition of reporting error information in case
        of a HTTP error code 400.
    AccountAccessConsentInformationResponse:
      required:
        - access
        - consentId
        - consentStatus
        - frequencyPerDay
        - lastActionDate
        - recurringIndicator
        - validUntil
      type: object
      properties:
        consentId:
          type: string
          description: >-
            ID of the corresponding consent object as returned by an account
            information consent request
        consentStatus:
          $ref: '#/components/schemas/AccountAccessConsentStatus'
        access:
          $ref: '#/components/schemas/AccountAccess'
        recurringIndicator:
          type: boolean
          description: "\"true\", if the consent is for recurring access to the account data.\r\n\"false\", if the consent is for one access to the account data."
          example: true
        validUntil:
          type: string
          description: "This parameter is defining a valid until date (including the mentioned date) for the requested consent. The content is the local ASPSP date in ISO-Date format, e.g. 2017-10-30.\r\nFuture dates might get adjusted by ASPSP.\r\nIf a maximal available date is requested, a date in far future is to be used: \"9999-12-31\".\r\nIn both cases the consent object to be retrieved by the get consent request will contain the adjusted date."
          format: date-time
          example: '2020-12-31T00:00:00.0000000'
        frequencyPerDay:
          type: integer
          description: "This field indicates the requested maximum frequency for an access without PSU involvement per day. For a one-off access, this attribute is set to \"1\".\r\nThe frequency needs to be greater equal to one.\r\nIf not otherwise agreed bilaterally between TPP and ASPSP, the frequency is less equal to 4."
          format: int32
          example: 4
        lastActionDate:
          type: string
          description: >-
            This date is containing the date of the last action on the consent
            object either through the XS2A interface or the PSU/ASPSP interface
            having an impact on the status.
          format: date-time
      additionalProperties: false
      description: Body of the JSON response for a successfull get consent request.
    MessageCode404AIS:
      enum:
        - RESOURCE_UNKNOWN
      type: string
      description: Message codes defined for AIS for HTTP Error code 404 (NOT FOUND).
    TppMessage404AIS:
      required:
        - category
        - code
      type: object
      properties:
        category:
          $ref: '#/components/schemas/TppMessageCategory'
        code:
          $ref: '#/components/schemas/MessageCode404AIS'
        path:
          type: string
          description: ''
          nullable: true
        text:
          type: string
          description: Additional explaining text to the TPP
          nullable: true
      additionalProperties: false
      description: ''
    Error404NGAIS:
      type: object
      properties:
        tppMessages:
          type: array
          items:
            $ref: '#/components/schemas/TppMessage404AIS'
          description: Gets or Sets TppMessages
          nullable: true
      additionalProperties: false
      description: >-
        NextGenPSD2 specific definition of reporting error information in case
        of a HTTP error code 400.
    AccountAccessConsentsStatusResponse:
      required:
        - consentId
        - consentStatus
      type: object
      properties:
        consentId:
          type: string
          description: >-
            ID of the corresponding consent object as returned by an account
            information consent request
        consentStatus:
          $ref: '#/components/schemas/AccountAccessConsentStatus'
      additionalProperties: false
    CashAccountType:
      enum:
        - CACC
        - SVGS
      type: string
      description: "Specifies the cach account type:\r\n* CACC: Current account\r\n* SVGS: Savings account"
    AccountStatus:
      enum:
        - enabled
        - deleted
        - blocked
      type: string
      description: "Account status. The value is one of the following:\r\n- \"enabled\": account is available\r\n- \"deleted\": account is terminated\r\n- \"blocked\": account is blocked e.g. for legal reasons If this field is not used, than the account is available in the sense of this specification."
    UsageType:
      enum:
        - PRIV
        - ORGA
      type: string
      description: "Specifies the usage of the account:\r\n* PRIV: private personal account\r\n* ORGA: professional account"
    Amount:
      required:
        - amount
        - currency
      type: object
      properties:
        currency:
          pattern: '[A-Z]{3}'
          type: string
          description: ISO 4217 Alpha 3 currency code
          example: EUR
        amount:
          pattern: '-?[0-9]{1,14}(\.[0-9]{1,3})?'
          type: string
          description: "The amount given with fractional digits, where fractions must be compliant to the currency definition. Up to 14 significant figures.\r\nNegative amounts are signed by minus.\r\nThe decimal separator is a dot."
      additionalProperties: false
      description: ''
    BalanceType:
      enum:
        - closingBooked
        - expected
        - openingBooked
        - interimAvailable
        - interimBooked
        - forwardAvailable
        - nonInvoiced
      type: string
      description: "The following balance types are defined:\r\n- \"closingBooked\": Balance of the account at the end of the pre-agreed account reporting period.\r\nIt is the sum of the opening booked balance at the beginning of the period and all entries booked to the account during the pre-agreed account reporting period.\r\n<br /><br />\r\nFor card-accounts, this is composed of\r\n    - invoiced, but not yet paid entries\r\n<br /><br />\r\n- \"expected\": Balance composed of booked entries and pending items known at the time of calculation,\r\nwhich projects the end of day balance if everything is booked on the account and no other entry is posted.\r\n<br /><br />\r\nFor card accounts, this is composed of:\r\n    - invoiced, but not yet paid entries\r\n    - not yet invoiced but already booked entries and\r\n    - pending items (not yet booked)\r\nFor card-accounts: \"money to spend with the value of a pre-approved credit limit on the card account\"\r\n<br /><br />\r\n- \"openingBooked\": Book balance of the account at the beginning of the account reporting period. It always equals the closing book balance from the previous report.\r\n<br /><br />\r\n- \"interimAvailable\": Available balance calculated in the course of the account ?servicer?s business day, at the time specified, and subject to further changes during the business day.\r\nThe interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n<br /><br />\r\nFor card-accounts, this is composed of:\r\n    - invoiced, but not yet paid entries\r\n    - not yet invoiced but already booked entries\r\n<br /><br />\r\n- \"interimBooked\": Balance calculated in the course of the account servicer's business day, at the time specified, and subject to further changes during the business day.\r\nThe interim balance is calculated on the basis of booked credit and debit items during the calculation time/period specified.\r\n<br /><br />\r\n- \"forwardAvailable\":Forward available balance of money that is at the disposal of the account owner on the date specified.\r\n<br /><br />\r\n- \"nonInvoiced\": Only for card accounts, to be checked yet."
    Balance:
      required:
        - balanceAmount
        - balanceType
      type: object
      properties:
        balanceAmount:
          $ref: '#/components/schemas/Amount'
        balanceType:
          $ref: '#/components/schemas/BalanceType'
      additionalProperties: false
      description: A single balance element.
    LinksAccountDetails:
      type: object
      properties:
        balances:
          $ref: '#/components/schemas/HrefType'
        transactions:
          $ref: '#/components/schemas/HrefType'
      additionalProperties: false
      description: "Links to the account, which can be directly used for retrieving account information from this dedicated account.\r\nLinks to \"balances\" and/or \"transactions\"\r\nThese links are only supported, when the corresponding consent has been already granted."
    AccountDetails:
      required:
        - currency
      type: object
      properties:
        resourceId:
          type: string
          description: >-
            This shall be filled, if addressable resource are created by the
            ASPSP on the /accounts or /card-accounts endpoint.
          nullable: true
        iban:
          pattern: '[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}'
          type: string
          description: IBAN of an account
          nullable: true
          example: GR3201106970000069774934603
        currency:
          pattern: '[A-Z]{3}'
          type: string
          description: ISO 4217 Alpha 3 currency code
          example: EUR
        ownerName:
          maxLength: 140
          minLength: 1
          type: string
          description: "Name of the legal account owner. If there is more than one owner, then e.g. two names might be noted here.\r\n<br />\r\nFor a corporate account, the corporate name is used for this attribute.\r\nEven if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU."
          nullable: true
        displayName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of the account as defined by the PSU within online channels.
          nullable: true
        product:
          maxLength: 35
          minLength: 1
          type: string
          description: 'Product name of the bank for this account, proprietary definition.'
          nullable: true
        cashAccountType:
          $ref: '#/components/schemas/CashAccountType'
        status:
          $ref: '#/components/schemas/AccountStatus'
        bic:
          pattern: '[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}'
          type: string
          description: BICFI
          nullable: true
        usage:
          $ref: '#/components/schemas/UsageType'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: >-
            A list of balances regarding this account, e.g. the current balance,
            the last booked balance. The list might be restricted to the current
            balance.
          nullable: true
        _links:
          $ref: '#/components/schemas/LinksAccountDetails'
      additionalProperties: false
      description: "The ASPSP shall give at least one of the account reference identifiers:\r\n- iban"
    AccountList:
      required:
        - accounts
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountDetails'
          description: ''
      additionalProperties: false
      description: List of accounts with details.
    MessageCode403AIS:
      enum:
        - CONSENT_UNKNOWN
        - SERVICE_BLOCKED
        - RESOURCE_UNKNOWN
        - RESOURCE_EXPIRED
      type: string
      description: Message codes defined for AIS for HTTP Error code 403 (FORBIDDEN).
    TppMessage403AIS:
      required:
        - category
        - code
      type: object
      properties:
        category:
          $ref: '#/components/schemas/TppMessageCategory'
        code:
          $ref: '#/components/schemas/MessageCode403AIS'
        path:
          type: string
          description: ''
          nullable: true
        text:
          type: string
          description: Additional explaining text to the TPP
          nullable: true
      additionalProperties: false
      description: ''
    Error403NGAIS:
      type: object
      properties:
        tppMessages:
          type: array
          items:
            $ref: '#/components/schemas/TppMessage403AIS'
          description: Gets or Sets TppMessages
          nullable: true
      additionalProperties: false
      description: >-
        NextGenPSD2 specific definition of reporting error information in case
        of a HTTP error code 403.
    AccountDetailsResponse:
      required:
        - account
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountDetails'
      additionalProperties: false
      description: ''
    BalanceDetailsResponse:
      required:
        - balances
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountReference'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: ''
      additionalProperties: false
      description: >-
        Body of the response for a successful read balance for an account
        request.
    CardAccountDetails:
      required:
        - currency
        - pan
      type: object
      properties:
        resourceId:
          type: string
          description: "This is the data element to be used in the path when retrieving data from a dedicated account. This shall be filled,\r\nif addressable resource are created by the ASPSP on the /card-accounts endpoint."
          nullable: true
        pan:
          maxLength: 35
          minLength: 1
          type: string
          description: Primary Account Number
        currency:
          pattern: '[A-Z]{3}'
          type: string
          description: ISO 4217 Alpha 3 currency code
          example: EUR
        ownerName:
          maxLength: 140
          minLength: 1
          type: string
          description: "Name of the legal account owner. If there is more than one owner, then e.g. two names might be noted here.\r\n<br />\r\nFor a corporate account, the corporate name is used for this attribute.\r\nEven if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU."
          nullable: true
        displayName:
          maxLength: 70
          minLength: 1
          type: string
          description: Name of the account as defined by the PSU within online channels.
          nullable: true
        product:
          maxLength: 35
          minLength: 1
          type: string
          description: 'Product name of the bank for this account, proprietary definition.'
          nullable: true
        status:
          $ref: '#/components/schemas/AccountStatus'
        usage:
          $ref: '#/components/schemas/UsageType'
        creditLimit:
          $ref: '#/components/schemas/Amount'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: >-
            A list of balances regarding this account, e.g. the current balance,
            the last booked balance. The list might be restricted to the current
            balance.
          nullable: true
        _links:
          $ref: '#/components/schemas/LinksAccountDetails'
      additionalProperties: false
      description: Card account details.
    CardAccountList:
      required:
        - cardAccounts
      type: object
      properties:
        cardAccounts:
          type: array
          items:
            $ref: '#/components/schemas/CardAccountDetails'
          description: ''
      additionalProperties: false
      description: List of card accounts with details.
    CardDetailsResponse:
      required:
        - cardAccount
      type: object
      properties:
        cardAccount:
          $ref: '#/components/schemas/CardAccountDetails'
      additionalProperties: false
      description: ''
    SandboxRequest:
      required:
        - sandboxId
      type: object
      properties:
        sandboxId:
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
          description: Sandbox id
      additionalProperties: false
      description: Sandbox request
    SandboxRetryCacheEntry:
      type: object
      properties:
        cacheKey:
          type: string
          description: Cache key
          nullable: true
        count:
          type: integer
          description: Number of retries ( up to 4 )
          format: int32
        expirationTimestamp:
          type: string
          description: Expiration timestamp of the entry
          format: date-time
      additionalProperties: false
      description: >-
        Keeps the number of calls without x-fapi-customer-ip-address header
        present
    SandboxBankAccountInfo:
      required:
        - accountSubType
        - accountType
        - currency
        - iban
      type: object
      properties:
        currency:
          pattern: '^[A-Z]{3,3}$'
          type: string
          description: 'Currency (EUR, USD ...)'
        iban:
          type: string
          description: Account's IBAN
        accountType:
          type: string
          description: 'Account''s type (Business, Personal)'
        accountSubType:
          type: string
          description: 'Account''s sub-type (ChargeCard, CreditCard, CurrentAccount ...)'
        description:
          maxLength: 35
          minLength: 1
          type: string
          description: Account's description
          nullable: true
        alias:
          maxLength: 70
          minLength: 1
          type: string
          description: Account's alias
          nullable: true
        availableBalance:
          type: number
          description: Account's available balance
          format: double
          nullable: true
        ledgerBalance:
          type: number
          description: Account's ledger balance
          format: double
          nullable: true
        overdraftLimit:
          type: number
          description: Account's overdraft limit
          format: double
          nullable: true
      additionalProperties: false
      description: General account information
    SandboxBeneficiary:
      type: object
      properties:
        name:
          type: string
          description: Beneficiary name
          nullable: true
      additionalProperties: false
      description: Beneficiary information
    SandboxTransaction:
      type: object
      properties:
        id:
          type: string
          description: Transaction id
          nullable: true
        amount:
          type: number
          description: Amount
          format: double
        currency:
          type: string
          description: 'Currency (EUR, USD ...)'
          nullable: true
        creditDebit:
          type: string
          description: Credit / Debit indicator
          nullable: true
        valueDateTime:
          type: string
          description: Valeur
          format: date-time
          nullable: true
        bookingDateTime:
          type: string
          description: Booking date time
          format: date-time
        description:
          type: string
          description: Description
          nullable: true
        accountingBalance:
          type: number
          description: Balance
          format: double
        relatedAccount:
          type: string
          description: Related account
          nullable: true
        relatedName:
          type: string
          description: Related account
          nullable: true
        transactionCode:
          type: string
          description: Transaction code
          nullable: true
      additionalProperties: false
      description: Transaction information
    SandboxStandingOrder:
      required:
        - frequency
      type: object
      properties:
        id:
          type: string
          description: Standing order id
          nullable: true
        description:
          type: string
          description: Standing order short description
          nullable: true
        frequency:
          type: integer
          description: Standing order frequency
          format: int32
        creationDate:
          type: string
          description: Standing order creation date
          format: date-time
          nullable: true
        firstPaymentDate:
          type: string
          description: Standing order first collection date
          format: date-time
          nullable: true
        numberOfPayments:
          type: integer
          description: Standing order number of payments
          format: int32
        amount:
          type: number
          description: Standing order amount
          format: double
        creditorName:
          type: string
          description: Creditor name
          nullable: true
        creditorAccount:
          type: string
          description: Creditor account
          nullable: true
      additionalProperties: false
      description: Standing order information
    SandboxScheduledPayment:
      type: object
      properties:
        id:
          type: string
          description: Scheduled payment id
          nullable: true
        description:
          maxLength: 35
          minLength: 1
          type: string
          description: Scheduled payment's short description
          nullable: true
        creationDate:
          type: string
          description: Scheduled payment's creation date
          format: date-time
          nullable: true
        executionDate:
          type: string
          description: Scheduled payment's execution date
          format: date-time
          nullable: true
        amount:
          type: number
          description: Amount
          format: double
        creditorName:
          type: string
          description: Creditor name
          nullable: true
        creditorAccount:
          type: string
          description: Creditor account
          nullable: true
      additionalProperties: false
      description: Scheduled payment information
    SandboxBankAccount:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/SandboxBankAccountInfo'
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/SandboxBeneficiary'
          description: List of account's beneficiaries
          nullable: true
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/SandboxTransaction'
          description: List of account's transactions
          nullable: true
        standingOrders:
          type: array
          items:
            $ref: '#/components/schemas/SandboxStandingOrder'
          description: List of account's standing orders
          nullable: true
        scheduledPayments:
          type: array
          items:
            $ref: '#/components/schemas/SandboxScheduledPayment'
          description: List of account's scheduled payments
          nullable: true
      additionalProperties: false
      description: Sandbox bank account
    SandboxCardInfo:
      required:
        - expiration
        - holderName
        - number
      type: object
      properties:
        number:
          maxLength: 16
          minLength: 1
          type: string
          description: Card number
        description:
          type: string
          description: Description
          nullable: true
        holderName:
          type: string
          description: Holder name
        expiration:
          maxLength: 7
          minLength: 1
          type: string
          description: Expiration date (05/2022)
        type:
          type: string
          description: Type
          nullable: true
        subType:
          type: string
          description: Sub type
          nullable: true
        availableBalance:
          type: number
          description: Available balance
          format: double
          nullable: true
        ledgerBalance:
          type: number
          description: Ledger balance
          format: double
          nullable: true
        creditLimit:
          type: number
          description: Credit limit ( applicable to credit cards )
          format: double
          nullable: true
      additionalProperties: false
      description: Sandbox card information
    SandboxCard:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/SandboxCardInfo'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/SandboxTransaction'
          description: Card transactions
          nullable: true
      additionalProperties: false
      description: Sandbox card
    SandboxUser:
      type: object
      properties:
        userId:
          type: string
          description: User Id
          nullable: true
        smsOtpMobileNumber:
          type: string
          description: Phone mobile number used for SMS OTPs
          nullable: true
        retryCacheEntries:
          type: array
          items:
            $ref: '#/components/schemas/SandboxRetryCacheEntry'
          description: Retry cache entries
          nullable: true
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/SandboxBankAccount'
          description: List of accounts
          nullable: true
        cards:
          type: array
          items:
            $ref: '#/components/schemas/SandboxCard'
          description: List of cards
          nullable: true
      additionalProperties: false
      description: Sandbox user
    Sandbox:
      required:
        - sandboxId
      type: object
      properties:
        sandboxId:
          pattern: '^[a-zA-Z0-9_-]+$'
          type: string
          description: Sandbox id
        users:
          type: array
          items:
            $ref: '#/components/schemas/SandboxUser'
          description: List of users
          nullable: true
      additionalProperties: false
      description: Sandbox model
    ErrorResponse:
      type: object
      properties:
        errorMessage:
          type: string
          nullable: true
      additionalProperties: false
    FrequencyCode:
      enum:
        - Monthly
        - EveryTwoMonths
        - Quarterly
        - SemiAnnual
        - Annual
      type: string
      description: "The following codes from the \\\"EventFrequency7Code\\\" of ISO 20022 are supported:\r\n- \\\"Monthly\\\"\r\n- \\\"EveryTwoMonths\\\"\r\n- \\\"Quarterly\\\"\r\n- \\\"SemiAnnual\\\"\r\n- \\\"Annual\\\""
    StandingOrderDetails:
      required:
        - frequency
        - startDate
      type: object
      properties:
        startDate:
          type: string
          description: >-
            The first applicable day of execution starting from this date is the
            first payment.
          format: date-time
        frequency:
          $ref: '#/components/schemas/FrequencyCode'
        numberOfPayments:
          type: integer
          description: "The total number of payments.\r\nIf not provided, the maximum allowed number will be assigned"
          format: int32
          nullable: true
      additionalProperties: false
      description: Details of underlying standing orders.
    AdditionalInformationStructured:
      required:
        - standingOrderDetails
      type: object
      properties:
        standingOrderDetails:
          $ref: '#/components/schemas/StandingOrderDetails'
      additionalProperties: false
      description: "Is used if and only if the bookingStatus entry equals \"information\".\r\nEvery active standing order related to the dedicated payment account result into one entry."
    TransactionDetails:
      required:
        - transactionAmount
      type: object
      properties:
        transactionId:
          type: string
          description: >-
            This identification is given by the attribute transactionId of the
            corresponding entry of a transaction list.
          nullable: true
        bookingDate:
          type: string
          description: The date when an entry is posted to an account on the ASPSPs books.
          format: date-time
          nullable: true
        valueDate:
          type: string
          description: >-
            The Date at which assets become available to the account owner in
            case of a credit.
          format: date-time
          nullable: true
        transactionAmount:
          $ref: '#/components/schemas/Amount'
        creditorName:
          maxLength: 70
          minLength: 1
          type: string
          description: ''
          nullable: true
        creditorAccount:
          $ref: '#/components/schemas/AccountReference'
        debtorName:
          maxLength: 70
          minLength: 1
          type: string
          description: ''
          nullable: true
        debtorAccount:
          $ref: '#/components/schemas/AccountReference'
        remittanceInformationUnstructured:
          maxLength: 140
          minLength: 1
          type: string
          description: Unstructured remittance information
          nullable: true
        additionalInformationStructured:
          $ref: '#/components/schemas/AdditionalInformationStructured'
        proprietaryBankTransactionCode:
          maxLength: 35
          minLength: 1
          type: string
          description: >-
            Proprietary bank transaction code as used within a community or
            within an ASPSP e.g. for MT94x based transaction reports.
          nullable: true
        balanceAfterTransaction:
          $ref: '#/components/schemas/Balance'
      additionalProperties: false
      description: Transaction details.
    LinksAccountReport:
      required:
        - account
      type: object
      properties:
        account:
          $ref: '#/components/schemas/HrefType'
      additionalProperties: false
      description: ''
    AccountReport:
      required:
        - _links
      type: object
      properties:
        booked:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetails'
          description: Array of transaction details
          nullable: true
        pending:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetails'
          description: Array of transaction details
          nullable: true
        information:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetails'
          description: Array of transaction details
          nullable: true
        _links:
          $ref: '#/components/schemas/LinksAccountReport'
      additionalProperties: false
      description: "JSON based account report. This account report contains transactions resulting from the query parameters.\r\n'booked' shall be contained if bookingStatus parameter is set to \"booked\" or \"both\".\r\n'pending' is not contained if the bookingStatus parameter is set to \"booked\"."
    AccountTransactionsResponse:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/AccountReference'
        transactions:
          $ref: '#/components/schemas/AccountReport'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: ''
          nullable: true
      additionalProperties: false
      description: >-
        Body of the JSON response for a successful read transaction list
        request. This account report contains transactions resulting from the
        query parameters.
    CardTransaction:
      required:
        - transactionAmount
      type: object
      properties:
        cardTransactionId:
          type: string
          description: Unique end to end identity.
          nullable: true
        transactionDate:
          type: string
          description: Date of the actual card transaction.
          format: date-time
          nullable: true
        bookingDate:
          type: string
          description: The date when an entry is posted to an account on the ASPSPs books.
          format: date-time
          nullable: true
        transactionAmount:
          $ref: '#/components/schemas/Amount'
        maskedPAN:
          maxLength: 35
          minLength: 1
          type: string
          description: Masked Primary Account Number.
          nullable: true
        transactionDetails:
          maxLength: 140
          minLength: 1
          type: string
          description: ''
          nullable: true
      additionalProperties: false
      description: Card transaction information.
    LinksCardAccountReport:
      required:
        - cardAccount
      type: object
      properties:
        cardAccount:
          $ref: '#/components/schemas/HrefType'
      additionalProperties: false
      description: ''
    CardAccountReport:
      required:
        - _links
      type: object
      properties:
        booked:
          type: array
          items:
            $ref: '#/components/schemas/CardTransaction'
          description: Array of transaction details
          nullable: true
        _links:
          $ref: '#/components/schemas/LinksCardAccountReport'
      additionalProperties: false
      description: "JSON based card account report.\r\nThis card account report contains transactions resulting from the query parameters."
    CardTransactionsResponse:
      type: object
      properties:
        cardAccount:
          $ref: '#/components/schemas/AccountReference'
        cardTransactions:
          $ref: '#/components/schemas/CardAccountReport'
        balances:
          type: array
          items:
            $ref: '#/components/schemas/Balance'
          description: ''
          nullable: true
      additionalProperties: false
      description: >-
        Body of the JSON response for a successful read card account transaction
        list request. This card account report contains transactions resulting
        from the query parameters.
  securitySchemes:
    Client-Id:
      type: apiKey
      description: Application's Id
      name: Client-Id
      in: header
    Authorization-Code-Token:
      type: oauth2
      description: OAuth2 Authorization Code Flow
      flows:
        authorizationCode:
          authorizationUrl: https://my.nbg.gr/identity/connect/authorize
          tokenUrl: https://my.nbg.gr/identity/connect/token
          scopes:
            sandbox-bg-ob-accounts offline_access: Sandbox Scope
            bg-ob-accounts offline_access: Production Scope
    Client-Credentials-Token:
      type: oauth2
      description: OAuth2 Client Credentials Flow
      flows:
        clientCredentials: 
          tokenUrl: https://my.nbg.gr/identity/connect/token
          scopes:
            sandbox-bg-ob-accounts: Sandbox Scope
            bg-ob-accounts: Production Scope
security:
  - Client-Id: []
    Authorization-Code-Token:
      - sandbox-bg-ob-accounts offline_access
      - bg-ob-accounts offline_access