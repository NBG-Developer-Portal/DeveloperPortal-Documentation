swagger: '2.0'
info:
  title: Crowdfunding API
  version: v1.2
  description: "## Functionality at a glance\n\nStart integrating your application with NBG Bank and be able to:\n\nCreate and manage your own **Crowdfunding platform** that allows you to:\n\n**1.**\tInitiate new:\n   \n* Actions \n* Thematic areas\n* Donation promises \n* Newsletter Requests\n\n**2.**\tGet information about:\n \n* Actions\n* Thematic areas\n* Donation promises\n* Accounts\n* Transactions  \n* Newsletter Requests \n\n**3.**\tGet content from the Content Management System (CMS)\n\nThe **main entities** of the API are the following: \n\n**Thematic areas** \n Thematic areas are categories of actions. Each thematic area has one or more actions. An example of a thematic area may be 'Environmental causes'.\n\n**Actions** \n Action is the main entity of the crowdfunding platform. \n \n An example of an action may be 'Post wildfire reforestation'. An action belongs to a thematic area and it has properties like: \n\n* Name, \n* Starting date, \n* Ending date, \n* Target Amount \n\n**Donation promises** \n Is the promise that a registered user will pay the amount he promised for a specific action. Donation promises can be paid either by credit/debit card or by deposit. \n\n## Quick Getting Started\n\n1. Login/Register to the NBG Developer Portal\n2. Go to APPS and click \"Create New App\"\n3. Go to API PRODUCTS and select an API\n4. Click \"Subscribe\" and choose your app\n5. Create a Sandbox\n6. Play with the API\n\n## Create your Sandbox\nSandboxes are self - contained testing environments that provide a simple way of testing the API without any real impact, meaning that no personal or financial data is used.\nYou can create **your Sandbox** by invoking the **POST** /api/sandbox call. This call will generate a new Sandbox with a **unique sandbox_id**.\nImportant! Don't lose your sandbox_id, since you will need it for all the API calls. Sandbox endpoints are not included in the production version API.\n\nWhen you create a sandbox, users and sandbox specific data are generated as sample data.\n\nThe following HTTP header parameters are required for every call (except for sandbox operations) and can be obtained at sandbox creation:\n\n1. sandbox_id = the name of the sandbox you created\n2. application_id = the client id of your app\n3. user_id = The user id of your sandbox test user\n4. username = The user name of your sandbox test user\n5. provider_id = The user-id issued by the provider (NBG.gr)\n6. provider = The provider name (NBG)\n\nGet to know the Sandbox Operations in the related section. \n\n## Start Testing\nOnce you have your sandbox_id, you can start invoking the rest of the operations by providing all the mandatory information in the http header. \n\n## Important notes\nHere come some tips about the API endpoints: \n\n**For Crowdfunding Data**\n\n* Create Action:In order to create a new action call POST /backoffice/actions. \n* List Actions: To list all the available actions call GET /action/actions. Additionaly, to get details for an action call the /action/actions/**{actionId}** endpoint \n* Create donation:  To create a new donation for a specific action call POST /action/actions/**{actionId}**/donations \n* List Wall Donation: To list all public donations call GET /action/donations/wall \n* List User Donation: To list all user donations call GET /action/donations \n\nYou will find more information in the **Action section** of the swagger operations \n\n\n**For CMS Content**\n\n* TAGs: The content in the CMS is categorized into **tags**. To list all the tags use GET /cmscontent/tags endpoint. To list all the content with a certain tag use GET /cmscontent/tags/**{langId}**/**{tag}** endpoint specified by language ID (**en** for english, **el** for greek).  \n* Get content from the CMS: To get content from the CMS, call the GET /cmscontent/content/**{langId}**/**{nodeId}** endpoint, specified by an existing **nodeID** (generated by the CMS). For example   GET /cmscontent/content/en/167 .\n* Create content: To create new content call POST /sandbox/{sandbox_id}/cmscontent/content\n\n\n_**Important!**_ To gather the content of an action choose as tag the action's Short Name. For example /cmscontent/tags/el/Action_therapydogs \n\n\n\n\n## Error Codes:\n* CMS-001: Invalid base URL. Please specify a valid value for base URL\n* CMS-002: Invalid tag. Please specify a valid value for tag\n* CMS-003: Invalid node id. Please specify a valid value for node id\n* CMS-004: Invalid lang id. Please specify a valid value for language id\n* CMS-005: Invalid target_id in type. Please specify a valid value for target_id\n* CMS-006: Tags not found for the specific action\n* CMS-007: Node not found\n\n\n## Feedback and Questions\n\nWe would love to hear your feedback and answer your questions. Send us at [developer@nbg.gr](developer@nbg.gr)\n\n\nCheck out our [Sandbox Postman Collection](https://github.com/myNBGcode/PostmanCollections/tree/master/Crowdfunding%20API)!\n\n------------------------------------------------------------------------------------------ \n\nCreated by [**NBG**](https://www.nbg.gr/).\n\n------------------------------------------------------------------------------------------ \n------------------------------------------------------------------------------------------\n\n\n\n\n # Entities \n\n Below, the main entities are documented.\n <a name=Response[AccountInfoResponse]></a> \n## Response[AccountInfoResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[AccountInfoResponse](#AccountInfoResponse)</summary><ul><li><details><summary>account [[AccountShortInfo](#AccountShortInfo)]</summary><ul><li>accountId [string]</li> <li>accountNumber [string]</li> <li>iban [string]</li> <li>currencyISO [string]</li> <li>description [string]</li> <li>status [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=AccountInfoResponse></a> \n## AccountInfoResponse \nAccount short data response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| account | Entity | <details><summary>[AccountShortInfo](#AccountShortInfo)</summary><ul><li>accountId [string]</li> <li>accountNumber [string]</li> <li>iban [string]</li> <li>currencyISO [string]</li> <li>description [string]</li> <li>status [string]</li> </ul></details> | \n\n <a name=ResponseMessage></a> \n## ResponseMessage \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| id| -| string|\n| code| -| string|\n| desc| -| string|\n| sev| -| string|\n| cat| -| string|\n\n <a name=AccountShortInfo></a> \n## AccountShortInfo \nAccount short data information \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| accountId| The account id (UUID)| string|\n| accountNumber| The account number| string|\n| iban| IBAN of account| string|\n| currencyISO| Currency of the account (EUR/USD...)| string|\n| description| Description of the account| string|\n| status| Status of the account (Active/Inactive)| string|\n\n <a name=Response[ThematicAreasResponse]></a> \n## Response[ThematicAreasResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ThematicAreasResponse](#ThematicAreasResponse)</summary><ul><li>thematicAreas [array[[ThematicArea](#ThematicArea)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ThematicAreasResponse></a> \n## ThematicAreasResponse \nResponse list of a thematic areas \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| thematicAreas| List of thematic areas data| array[[ThematicArea](#ThematicArea)]|\n\n <a name=ThematicArea></a> \n## ThematicArea \nThematic area data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| thematicAreaId| Thematic area unique identifier.| string|\n| shortName| Short name of thematic area. Used for Content Tag| string|\n| name| Thematic area name / title.  eg: Welfare, Health and Solidarity| string|\n| description| Short description of thematic area| string|\n| logoUrl| URL of a logo image| string|\n| status| Current status of thematic area - Draft - Active - Archived| string|\n| actions| List of actions that belongs to the thematic area| array|\n\n <a name=ActionDataShortInfoResponse></a> \n## ActionDataShortInfoResponse \nAction short info. \r\n- Action data id\r\n- Action short name \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionDataId| Action data ID| string|\n| shortName| Action data short name| string|\n\n <a name=Response[ThematicAreaResponse]></a> \n## Response[ThematicAreaResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ThematicAreaResponse](#ThematicAreaResponse)</summary><ul><li><details><summary>thematicArea [[ThematicArea](#ThematicArea)]</summary><ul><li>thematicAreaId [string]</li> <li>shortName [string]</li> <li>name [string]</li> <li>description [string]</li> <li>logoUrl [string]</li> <li>status [string]</li> <li>actions [array]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ThematicAreaResponse></a> \n## ThematicAreaResponse \nResponse of a thematic area \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| thematicArea | Entity | <details><summary>[ThematicArea](#ThematicArea)</summary><ul><li>thematicAreaId [string]</li> <li>shortName [string]</li> <li>name [string]</li> <li>description [string]</li> <li>logoUrl [string]</li> <li>status [string]</li> <li>actions [array]</li> </ul></details> | \n\n <a name=Response[ActionsDataResponse]></a> \n## Response[ActionsDataResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ActionsDataResponse](#ActionsDataResponse)</summary><ul><li>actionsData [array[[ActionDataResponseDetails](#ActionDataResponseDetails)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ActionsDataResponse></a> \n## ActionsDataResponse \nList of actions sensitive data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionsData| List of actions sensitive data| array[[ActionDataResponseDetails](#ActionDataResponseDetails)]|\n\n <a name=ActionDataResponseDetails></a> \n## ActionDataResponseDetails \nAction sensitive data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionDataId| Action sensitive data Id| string|\n| actionShortName| Short name or an action. The value of this property is autogenerated by the API.| string|\n| actionName| Name or title of an action| string|\n| dateStart| Start date of an action| string|\n| dateEnd| End date of an action| string|\n| targetAmount| Target Amount| number|\n| status| Status of the action - Draft - Active - Expired - Archived| string|\n| publicAmount| Public amount.| number|\n\n <a name=Response[ActionDataResponse]></a> \n## Response[ActionDataResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ActionDataResponse](#ActionDataResponse)</summary><ul><li><details><summary>actionData [[ActionDataResponseDetails](#ActionDataResponseDetails)]</summary><ul><li>actionDataId [string]</li> <li>actionShortName [string]</li> <li>actionName [string]</li> <li>dateStart [string]</li> <li>dateEnd [string]</li> <li>targetAmount [number]</li> <li>status [string]</li> <li>publicAmount [number]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ActionDataResponse></a> \n## ActionDataResponse \nResponse of an action sensitive data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionData | Entity | <details><summary>[ActionDataResponseDetails](#ActionDataResponseDetails)</summary><ul><li>actionDataId [string]</li> <li>actionShortName [string]</li> <li>actionName [string]</li> <li>dateStart [string]</li> <li>dateEnd [string]</li> <li>targetAmount [number]</li> <li>status [string]</li> <li>publicAmount [number]</li> </ul></details> | \n\n <a name=Response[DonationPromisesResponse]></a> \n## Response[DonationPromisesResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[DonationPromisesResponse](#DonationPromisesResponse)</summary><ul><li>donationPromises [array[[DonationPromise](#DonationPromise)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=DonationPromisesResponse></a> \n## DonationPromisesResponse \nList of Donation Promises \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| donationPromises| List of donations promises| array[[DonationPromise](#DonationPromise)]|\n\n <a name=DonationPromise></a> \n## DonationPromise \nDonation Promise data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| donationPromiseId| Donation promise ID| string|\n| actionKey| key to match donation to an action| string|\n| categoryMoneyFound| Any category bank want to store to trace back the transaction| string|\n| donationTime| Donation timestamp| string|\n| payType| From where the pay must be  card/deposit| string|\n| publish| is this published| boolean|\n| theChallenge| challenge key| string|\n| transactionKey| transaction key| string|\n| transactionReceiptKey| transaction receipt key| string|\n| userKey| User key is the UserID| string|\n| xpAmount| Amount of money that is promised for the donation| number|\n| status| Status of the donation promise - Pending - Paid_Matched - Paid_Not_Matched - Pending_3dSecure - Fail_Cancelled_By_User - ...| string|\n| displayName| Public display name| string|\n\n <a name=Response[DonationPromisesResponseWall]></a> \n## Response[DonationPromisesResponseWall] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[DonationPromisesResponseWall](#DonationPromisesResponseWall)</summary><ul><li>donationPromises [array[[DonationPromiseWall](#DonationPromiseWall)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=DonationPromisesResponseWall></a> \n## DonationPromisesResponseWall \nDonation Promise Response Wall \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| donationPromises| Donation promises response| array[[DonationPromiseWall](#DonationPromiseWall)]|\n\n <a name=DonationPromiseWall></a> \n## DonationPromiseWall \nDonation Promise Wall \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionKey| key to match donation to an action| string|\n| donationTime| Donation timestamp| string|\n| xpAmount| Amount of money that is promised for the donation| number|\n| displayName| Public display name| string|\n\n <a name=DonationPromisesRequest></a> \n## DonationPromisesRequest \nDonation promise request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payType| From where the pay must be: Card, Deposit| string|\n| publish| is this published| boolean|\n| xpAmount| Amount of the money that is promised for the donation| number|\n| displayName| Public display name| string|\n\n <a name=Response[DonationPromiseResponse]></a> \n## Response[DonationPromiseResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[DonationPromiseResponse](#DonationPromiseResponse)</summary><ul><li><details><summary>donationPromise [[DonationPromise](#DonationPromise)]</summary><ul><li>donationPromiseId [string]</li> <li>actionKey [string]</li> <li>categoryMoneyFound [string]</li> <li>donationTime [string]</li> <li>payType [string]</li> <li>publish [boolean]</li> <li>theChallenge [string]</li> <li>transactionKey [string]</li> <li>transactionReceiptKey [string]</li> <li>userKey [string]</li> <li>xpAmount [number]</li> <li>status [string]</li> <li>displayName [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=DonationPromiseResponse></a> \n## DonationPromiseResponse \nDonation Promise Response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| donationPromise | Entity | <details><summary>[DonationPromise](#DonationPromise)</summary><ul><li>donationPromiseId [string]</li> <li>actionKey [string]</li> <li>categoryMoneyFound [string]</li> <li>donationTime [string]</li> <li>payType [string]</li> <li>publish [boolean]</li> <li>theChallenge [string]</li> <li>transactionKey [string]</li> <li>transactionReceiptKey [string]</li> <li>userKey [string]</li> <li>xpAmount [number]</li> <li>status [string]</li> <li>displayName [string]</li> </ul></details> | \n\n <a name=Response[NewsletterUser]></a> \n## Response[NewsletterUser] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[NewsletterUser](#NewsletterUser)</summary><ul><li>userId [string]</li> <li>actionDataId [string]</li> <li>createdDate [string]</li> <li>active [boolean]</li> <li>updatedDate [string]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=NewsletterUser></a> \n## NewsletterUser \nRegistered users for newsletters per action \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| userId| User Id| string|\n| actionDataId| Action data ID| string|\n| createdDate| Inserted Date| string|\n| active| Active| boolean|\n| updatedDate| Updated Date. This property has value when a user becomes inactive| string|\n\n <a name=NewsletterUserRequestUpdate></a> \n## NewsletterUserRequestUpdate \nNewsletter User Request for Update \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| active| Set activation (true/false)| boolean|\n\n <a name=Response[BoolResponse]></a> \n## Response[BoolResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[BoolResponse](#BoolResponse)</summary><ul><li>result [boolean]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=BoolResponse></a> \n## BoolResponse \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| result| -| boolean|\n\n <a name=ContactUsRequest></a> \n## ContactUsRequest \nContact us request data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| surname| Surname| string|\n| firstname| Firstname| string|\n| email| Email| string|\n| message| Message| string|\n\n <a name=Response[ContactUsResponse]></a> \n## Response[ContactUsResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ContactUsResponse](#ContactUsResponse)</summary><ul><li><details><summary>ContactUs [[ContactUs](#ContactUs)]</summary><ul><li>contactUsId [string]</li> <li>surname [string]</li> <li>firstname [string]</li> <li>email [string]</li> <li>message [string]</li> <li>createdDate [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ContactUsResponse></a> \n## ContactUsResponse \nContact us response data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| ContactUs | Entity | <details><summary>[ContactUs](#ContactUs)</summary><ul><li>contactUsId [string]</li> <li>surname [string]</li> <li>firstname [string]</li> <li>email [string]</li> <li>message [string]</li> <li>createdDate [string]</li> </ul></details> | \n\n <a name=ContactUs></a> \n## ContactUs \nContact us data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| contactUsId| Contact us ID (UUID)| string|\n| surname| Surname| string|\n| firstname| Firstname| string|\n| email| Email| string|\n| message| Message| string|\n| createdDate| Created Date| string|\n\n <a name=Response[UserDataResponse]></a> \n## Response[UserDataResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[UserDataResponse](#UserDataResponse)</summary><ul><li><details><summary>user [[UserDataModel](#UserDataModel)]</summary><ul><li>userId [string]</li> <li>email [string]</li> <li>username [string]</li> <li>firstname [string]</li> <li>lastname [string]</li> <li>userRole [string]</li> <li>status [string]</li> <li>newsletterActions [array[[ActionDataShortInfoResponse](#ActionDataShortInfoResponse)]]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=UserDataResponse></a> \n## UserDataResponse \nUser data response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| user | Entity | <details><summary>[UserDataModel](#UserDataModel)</summary><ul><li>userId [string]</li> <li>email [string]</li> <li>username [string]</li> <li>firstname [string]</li> <li>lastname [string]</li> <li>userRole [string]</li> <li>status [string]</li> <li>newsletterActions [array[[ActionDataShortInfoResponse](#ActionDataShortInfoResponse)]]</li> </ul></details> | \n\n <a name=UserDataModel></a> \n## UserDataModel \nUser data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| userId| User id (UUID)| string|\n| email| Email| string|\n| username| user name| string|\n| firstname| First name| string|\n| lastname| Last name| string|\n| userRole| User role  - User - Backoffice| string|\n| status| User status - Active - Blocked| string|\n| newsletterActions| List of actions that user has subscribed for newsletter.| array[[ActionDataShortInfoResponse](#ActionDataShortInfoResponse)]|\n\n <a name=DatacashRequest></a> \n## DatacashRequest \nDatacash Request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| amount| Payment amount| number|\n| cardProduct| Card product model| object|\n\n <a name=CardProductModel></a> \n## CardProductModel \nCard product model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| type| product type (type=&gt; 'card')| string|\n| number| Card number| string|\n| details| Card Details Model| object|\n\n <a name=CardDetailsModel></a> \n## CardDetailsModel \nCard Details Model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| cvv| Card CVV| string|\n| cardHolder| Card holder name| string|\n| expiryDate| Card expiration date| string|\n\n <a name=Response[DatacashReferenceResponse]></a> \n## Response[DatacashReferenceResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[DatacashReferenceResponse](#DatacashReferenceResponse)</summary><ul><li>datacashReference [string]</li> <li>status [integer]</li> <li>reason [string]</li> <li><details><summary>threeDSecure [[ThreeDSecureModel](#ThreeDSecureModel)]</summary><ul><li>merchantUrl [string]</li> <li>requiredThreeDSecure [boolean]</li> <li>description [string]</li> <li>ascUrl [string]</li> <li>pareq_message [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=DatacashReferenceResponse></a> \n## DatacashReferenceResponse \nDatacash reference response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| datacashReference| Datacash reference| string|\n| status| Transaction response status| integer|\n| reason| Transaction response reason description| string|\n| threeDSecure | Entity | <details><summary>[ThreeDSecureModel](#ThreeDSecureModel)</summary><ul><li>merchantUrl [string]</li> <li>requiredThreeDSecure [boolean]</li> <li>description [string]</li> <li>ascUrl [string]</li> <li>pareq_message [string]</li> </ul></details> | \n\n <a name=ThreeDSecureModel></a> \n## ThreeDSecureModel \n3D Secure Model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| merchantUrl| MerchantUrl| string|\n| requiredThreeDSecure| If merchant is 3d secure then value must be true else false (Bool)| boolean|\n| description| Description| string|\n| ascUrl| AscUrl| string|\n| pareq_message| PareqMessage| string|\n\n <a name=Response[NewsletterUsersResponse]></a> \n## Response[NewsletterUsersResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[NewsletterUsersResponse](#NewsletterUsersResponse)</summary><ul><li>newslettersUsers [array[[NewsletterUser](#NewsletterUser)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=NewsletterUsersResponse></a> \n## NewsletterUsersResponse \nList of users that are registered to newsletter \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| newslettersUsers| List of users that are registered to newsletter| array[[NewsletterUser](#NewsletterUser)]|\n\n <a name=Response[ContactUsResponseEntries]></a> \n## Response[ContactUsResponseEntries] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ContactUsResponseEntries](#ContactUsResponseEntries)</summary><ul><li>ContactUsEntries [array[[ContactUs](#ContactUs)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ContactUsResponseEntries></a> \n## ContactUsResponseEntries \nContact us entries response data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| ContactUsEntries| List of contact us entries| array[[ContactUs](#ContactUs)]|\n\n <a name=Response[AccountsResponse]></a> \n## Response[AccountsResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[AccountsResponse](#AccountsResponse)</summary><ul><li>accounts [array[[AccountModel](#AccountModel)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=AccountsResponse></a> \n## AccountsResponse \nAccounts Response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| accounts| List of accounts| array[[AccountModel](#AccountModel)]|\n\n <a name=AccountModel></a> \n## AccountModel \nAccount Model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| availableBalance| Available balance of the account| number|\n| ledgerBalance| Ledger balance of the account| number|\n| transactions| List of transactions| array|\n| accountId| The account id (UUID)| string|\n| accountNumber| The account number| string|\n| iban| IBAN of account| string|\n| currencyISO| Currency of the account (EUR/USD...)| string|\n| description| Description of the account| string|\n| status| Status of the account (Active/Inactive)| string|\n\n <a name=Transaction></a> \n## Transaction \nTransaction data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| amount| Transaction Amount| number|\n| ledgerBalance| Account ledger balance| number|\n| transactionDatetime| Transaction date| string|\n| timeStamp| Transaction datetime (timestamp)| string|\n| reasonCode| Transaction reason code| number|\n| reasonDescription| Reason description| string|\n| origin| Transaction origin| string|\n| valeur| Transaction valeur| string|\n| currencyISO| Transaction currency| string|\n| reference| Transaction reference| string|\n| branch| Transaction branch| string|\n| relatedAccount| Transaction related account| string|\n\n <a name=AccountDbRequest></a> \n## AccountDbRequest \nAccount request data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| accountNumber| Account number| string|\n| description| Account description| string|\n\n <a name=Response[AccountResponse]></a> \n## Response[AccountResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[AccountResponse](#AccountResponse)</summary><ul><li><details><summary>account [[AccountModel](#AccountModel)]</summary><ul><li>availableBalance [number]</li> <li>ledgerBalance [number]</li> <li>transactions [array]</li> <li>accountId [string]</li> <li>accountNumber [string]</li> <li>iban [string]</li> <li>currencyISO [string]</li> <li>description [string]</li> <li>status [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=AccountResponse></a> \n## AccountResponse \nAccount Response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| account | Entity | <details><summary>[AccountModel](#AccountModel)</summary><ul><li>availableBalance [number]</li> <li>ledgerBalance [number]</li> <li>transactions [array]</li> <li>accountId [string]</li> <li>accountNumber [string]</li> <li>iban [string]</li> <li>currencyISO [string]</li> <li>description [string]</li> <li>status [string]</li> </ul></details> | \n\n <a name=AccountUpdateRequest></a> \n## AccountUpdateRequest \nAccount update request data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| accountNumber| Account number| string|\n| description| Account description| string|\n| iban| IBAN| string|\n| status| Account status (Active, Inactive)| string|\n\n <a name=Response[TransactionResponse]></a> \n## Response[TransactionResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[TransactionResponse](#TransactionResponse)</summary><ul><li>transactions [array[[Transaction](#Transaction)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=TransactionResponse></a> \n## TransactionResponse \nTransaction Response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| transactions| List of transactions| array[[Transaction](#Transaction)]|\n\n <a name=ActionDataRequest></a> \n## ActionDataRequest \nRequest of a new action \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionName| Name or title of an action| string|\n| accountKey| Account key is a key to find the account on the nbg account api| string|\n| cardsAccountKey| Key to find the cards account on ete account api| string|\n| dateStart| Start date of an action| string|\n| dateEnd| End date of an action| string|\n| offsetAmount| An offset for the amount. Is used for business proposed like money withdraws before an action is closed| number|\n| targetAmount| Target Amount| number|\n| merchantDataId| Merchant id (uuid). Used for datacash payment.| string|\n| publicAmount| Public amount.| number|\n\n <a name=Response[ActionDataResponseFull]></a> \n## Response[ActionDataResponseFull] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ActionDataResponseFull](#ActionDataResponseFull)</summary><ul><li><details><summary>actionData [[ActionDataResponseFullDetails](#ActionDataResponseFullDetails)]</summary><ul><li>accountKey [string]</li> <li>cardsAccountKey [string]</li> <li>offsetAmount [number]</li> <li>merchantDataId [string]</li> <li>actionDataId [string]</li> <li>actionShortName [string]</li> <li>actionName [string]</li> <li>dateStart [string]</li> <li>dateEnd [string]</li> <li>targetAmount [number]</li> <li>status [string]</li> <li>publicAmount [number]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ActionDataResponseFull></a> \n## ActionDataResponseFull \nAction data response full (for backoffice) \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionData | Entity | <details><summary>[ActionDataResponseFullDetails](#ActionDataResponseFullDetails)</summary><ul><li>accountKey [string]</li> <li>cardsAccountKey [string]</li> <li>offsetAmount [number]</li> <li>merchantDataId [string]</li> <li>actionDataId [string]</li> <li>actionShortName [string]</li> <li>actionName [string]</li> <li>dateStart [string]</li> <li>dateEnd [string]</li> <li>targetAmount [number]</li> <li>status [string]</li> <li>publicAmount [number]</li> </ul></details> | \n\n <a name=ActionDataResponseFullDetails></a> \n## ActionDataResponseFullDetails \nAction Data Response Full Details \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| accountKey| Account key is a key to find the account on the nbg account api| string|\n| cardsAccountKey| Key to find the cards account on ete account api| string|\n| offsetAmount| An offset for the amount . Is used for business proposed like money withdraws before an action is closed| number|\n| merchantDataId| Merchant Id for datacash.| string|\n| actionDataId| Action sensitive data Id| string|\n| actionShortName| Short name or an action. The value of this property is autogenerated by the API.| string|\n| actionName| Name or title of an action| string|\n| dateStart| Start date of an action| string|\n| dateEnd| End date of an action| string|\n| targetAmount| Target Amount| number|\n| status| Status of the action - Draft - Active - Expired - Archived| string|\n| publicAmount| Public amount.| number|\n\n <a name=Response[ActionsDataResponseFull]></a> \n## Response[ActionsDataResponseFull] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[ActionsDataResponseFull](#ActionsDataResponseFull)</summary><ul><li>actionsData [array[[ActionDataResponseFullDetails](#ActionDataResponseFullDetails)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=ActionsDataResponseFull></a> \n## ActionsDataResponseFull \nList of actions data response full (for backoffice) \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionsData| Action data| array[[ActionDataResponseFullDetails](#ActionDataResponseFullDetails)]|\n\n <a name=ActionDataUpdateRequest></a> \n## ActionDataUpdateRequest \nUpdate request of an action \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| status| Status of the action| string|\n| actionName| Name or title of an action| string|\n| accountKey| Account key is a key to find the account on the nbg account api| string|\n| cardsAccountKey| Key to find the cards account on ete account api| string|\n| dateStart| Start date of an action| string|\n| dateEnd| End date of an action| string|\n| offsetAmount| An offset for the amount. Is used for business proposed like money withdraws before an action is closed| number|\n| targetAmount| Target Amount| number|\n| merchantDataId| Merchant id (uuid). Used for datacash payment.| string|\n| publicAmount| Public amount.| number|\n\n <a name=ThematicAreaRequest></a> \n## ThematicAreaRequest \nThematic area request data model for insert \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| name| Thematic area name / title.  eg: Welfare, Health and Solidarity| string|\n| description| Short description of thematic area| string|\n| logoUrl| URL of a logo image| string|\n| actions| List of actions ids| array|\n\n <a name=ThematicAreaUpdateRequest></a> \n## ThematicAreaUpdateRequest \nThematic area request data model for update \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| status| Status of thematic area - Draft - Active - Archived| string|\n| name| Thematic area name / title.  eg: Welfare, Health and Solidarity| string|\n| description| Short description of thematic area| string|\n| logoUrl| URL of a logo image| string|\n| actions| List of actions ids| array|\n\n <a name=Response[UserDataListResponse]></a> \n## Response[UserDataListResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[UserDataListResponse](#UserDataListResponse)</summary><ul><li>users [array[[UserDataModel](#UserDataModel)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=UserDataListResponse></a> \n## UserDataListResponse \nUser data list response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| users| Users list| array[[UserDataModel](#UserDataModel)]|\n\n <a name=UserDataUpdateRequest></a> \n## UserDataUpdateRequest \nUser data update request data model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| email| Email| string|\n| username| user name| string|\n| firstname| First name| string|\n| lastname| Last name| string|\n| userRole| User role  - User - Backoffice| string|\n| status| User status - Active - Blocked| string|\n\n <a name=Response[MerchantsResponse]></a> \n## Response[MerchantsResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[MerchantsResponse](#MerchantsResponse)</summary><ul><li>merchants [array[[MerchantDetails](#MerchantDetails)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=MerchantsResponse></a> \n## MerchantsResponse \nMerchants response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| merchants| List of merchants| array[[MerchantDetails](#MerchantDetails)]|\n\n <a name=MerchantDetails></a> \n## MerchantDetails \nMerchant details \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| merchantDataId| Merchant data id (UUID)| string|\n| merchantId| Merchant Id| string|\n| merchantName| Merchant name| string|\n| username| Username for datacash| string|\n| password| Password for datacash| string|\n| status| Merchant status (Active/Inactive)| string|\n| merchantUrl| Merchant Url| string|\n| required3DSecure| Required3DSecure| boolean|\n\n <a name=MerchantInsertRequest></a> \n## MerchantInsertRequest \nMerchant insert request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| merchantId| Merchant id| string|\n| merchantName| Merchant name| string|\n| username| Username of merchant| string|\n| password| Password of merchant| string|\n| merchantUrl| Merchant Url| string|\n| required3DSecure| Required3DSecure| boolean|\n\n <a name=Response[MerchantResponse]></a> \n## Response[MerchantResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[MerchantResponse](#MerchantResponse)</summary><ul><li><details><summary>merchant [[MerchantDetails](#MerchantDetails)]</summary><ul><li>merchantDataId [string]</li> <li>merchantId [string]</li> <li>merchantName [string]</li> <li>username [string]</li> <li>password [string]</li> <li>status [string]</li> <li>merchantUrl [string]</li> <li>required3DSecure [boolean]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=MerchantResponse></a> \n## MerchantResponse \nMerchant response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| merchant | Entity | <details><summary>[MerchantDetails](#MerchantDetails)</summary><ul><li>merchantDataId [string]</li> <li>merchantId [string]</li> <li>merchantName [string]</li> <li>username [string]</li> <li>password [string]</li> <li>status [string]</li> <li>merchantUrl [string]</li> <li>required3DSecure [boolean]</li> </ul></details> | \n\n <a name=MerchantUpdateRequest></a> \n## MerchantUpdateRequest \nMerchant update request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| status| Merchant status (Active/Inactive)| string|\n| merchantId| Merchant id| string|\n| merchantName| Merchant name| string|\n| username| Username of merchant| string|\n| password| Password of merchant| string|\n| merchantUrl| Merchant Url| string|\n| required3DSecure| Required3DSecure| boolean|\n\n <a name=Response[AlertsResponse]></a> \n## Response[AlertsResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[AlertsResponse](#AlertsResponse)</summary><ul><li>alerts [array[[AlertModel](#AlertModel)]]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=AlertsResponse></a> \n## AlertsResponse \nAlerts response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| alerts| List of alerts| array[[AlertModel](#AlertModel)]|\n\n <a name=AlertModel></a> \n## AlertModel \nAlert model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| alertId| Alert Id (UUID)| string|\n| name| Name of alert| string|\n| type| Alert type (Green | Yellow | Orange | Red)| string|\n| description| Alert description| string|\n| tags| Search helping text(s)| string|\n| sourceType| Source of the alert (Batch | API | UI)| string|\n| sourceClient| Application id (ex: uuid)| string|\n| sourceDescription| Source id| string|\n| insertDate| Insert date| string|\n| insertedByUserId| User Id| string|\n\n <a name=AlertRequest></a> \n## AlertRequest \nAlert request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| name| Name of alert| string|\n| type| Alert type (Green | Yellow | Orange | Red)| string|\n| description| Alert description| string|\n| tags| Search helping text(s)| string|\n| sourceType| Source of the alert (Batch | API | UI)| string|\n| sourceClient| Application id (ex: uuid)| string|\n| sourceDescription| Source id| string|\n\n <a name=Response[AlertResponse]></a> \n## Response[AlertResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[AlertResponse](#AlertResponse)</summary><ul><li><details><summary>alert [[AlertModel](#AlertModel)]</summary><ul><li>alertId [string]</li> <li>name [string]</li> <li>type [string]</li> <li>description [string]</li> <li>tags [string]</li> <li>sourceType [string]</li> <li>sourceClient [string]</li> <li>sourceDescription [string]</li> <li>insertDate [string]</li> <li>insertedByUserId [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=AlertResponse></a> \n## AlertResponse \nAlert response \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| alert | Entity | <details><summary>[AlertModel](#AlertModel)</summary><ul><li>alertId [string]</li> <li>name [string]</li> <li>type [string]</li> <li>description [string]</li> <li>tags [string]</li> <li>sourceType [string]</li> <li>sourceClient [string]</li> <li>sourceDescription [string]</li> <li>insertDate [string]</li> <li>insertedByUserId [string]</li> </ul></details> | \n\n <a name=Response[CmsNodeResponse]></a> \n## Response[CmsNodeResponse] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[CmsNodeResponse](#CmsNodeResponse)</summary><ul><li><details><summary>article [[CmsArticle](#CmsArticle)]</summary><ul><li>body [object]</li> <li>tags [array]</li> <li>metadata [array]</li> <li>externalSensitiveData [array]</li> <li>fieldImage [array]</li> </ul></details></li><li><details><summary>link [[CmsLink](#CmsLink)]</summary><ul><li><details><summary>body [[NodeBody](#NodeBody)]</summary><ul><li>value [string]</li> <li>format [string]</li> <li>summary [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>imageUrl [[NodeFieldImageUrl](#NodeFieldImageUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>url [[NodeFieldLinkUrl](#NodeFieldLinkUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>videoUrl [[NodeFieldVideoUrl](#NodeFieldVideoUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>order [[NodeFieldLinkOrder](#NodeFieldLinkOrder)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li>tags [array[[NodeFieldTags](#NodeFieldTags)]]</li> </ul></details></li><li><details><summary>action_additional_data [[CmsActionAdditionalData](#CmsActionAdditionalData)]</summary><ul><li><details><summary>field_action_video [[NodeFieldActionVideo](#NodeFieldActionVideo)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_base_color [[NodeFieldBaseColor](#NodeFieldBaseColor)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_big_image_url [[NodeFieldBigImageUrl](#NodeFieldBigImageUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li>field_images_extra_images_url [array[[NodeFieldImagesExtraImagesUrl](#NodeFieldImagesExtraImagesUrl)]]</li> <li><details><summary>field_page_template [[NodeFieldPageTemplate](#NodeFieldPageTemplate)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_small_logo_colorful_url [[NodeFieldSmallLogoColorfulUrl](#NodeFieldSmallLogoColorfulUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_small_logo_negative_url [[NodeFieldSmallLogoNegativeUrl](#NodeFieldSmallLogoNegativeUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_supporters_keys [[NodeFieldSupportersKeys](#NodeFieldSupportersKeys)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_synoptic_text [[NodeFieldSynopticText](#NodeFieldSynopticText)]</summary><ul><li>value [string]</li> <li>format [string]</li> <li>lang [string]</li> </ul></details></li><li>field_videos [array[[NodeFieldVideos](#NodeFieldVideos)]]</li> <li>field_tags [array[[NodeFieldTags](#NodeFieldTags)]]</li> </ul></details></li><li><details><summary>nid [[NodeNodeId](#NodeNodeId)]</summary><ul><li>value [string]</li> </ul></details></li><li><details><summary>title [[NodeTitle](#NodeTitle)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>type [[NodeType](#NodeType)]</summary><ul><li>target_id [string]</li> </ul></details></li><li><details><summary>status [[NodeStatus](#NodeStatus)]</summary><ul><li>value [string]</li> </ul></details></li><li><details><summary>created [[NodeCreated](#NodeCreated)]</summary><ul><li>value [string]</li> <li>format [string]</li> </ul></details></li><li><details><summary>changed [[NodeChanged](#NodeChanged)]</summary><ul><li>value [string]</li> <li>format [string]</li> </ul></details></li></ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=CmsNodeResponse></a> \n## CmsNodeResponse \nCMS Node Request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| article | Entity | <details><summary>[CmsArticle](#CmsArticle)</summary><ul><li>body [object]</li> <li>tags [array]</li> <li>metadata [array]</li> <li>externalSensitiveData [array]</li> <li>fieldImage [array]</li> </ul></details> | \n| link | Entity | <details><summary>[CmsLink](#CmsLink)</summary><ul><li><details><summary>body [[NodeBody](#NodeBody)]</summary><ul><li>value [string]</li> <li>format [string]</li> <li>summary [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>imageUrl [[NodeFieldImageUrl](#NodeFieldImageUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>url [[NodeFieldLinkUrl](#NodeFieldLinkUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>videoUrl [[NodeFieldVideoUrl](#NodeFieldVideoUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>order [[NodeFieldLinkOrder](#NodeFieldLinkOrder)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li>tags [array[[NodeFieldTags](#NodeFieldTags)]]</li> </ul></details> | \n| action_additional_data | Entity | <details><summary>[CmsActionAdditionalData](#CmsActionAdditionalData)</summary><ul><li><details><summary>field_action_video [[NodeFieldActionVideo](#NodeFieldActionVideo)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_base_color [[NodeFieldBaseColor](#NodeFieldBaseColor)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_big_image_url [[NodeFieldBigImageUrl](#NodeFieldBigImageUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li>field_images_extra_images_url [array[[NodeFieldImagesExtraImagesUrl](#NodeFieldImagesExtraImagesUrl)]]</li> <li><details><summary>field_page_template [[NodeFieldPageTemplate](#NodeFieldPageTemplate)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_small_logo_colorful_url [[NodeFieldSmallLogoColorfulUrl](#NodeFieldSmallLogoColorfulUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_small_logo_negative_url [[NodeFieldSmallLogoNegativeUrl](#NodeFieldSmallLogoNegativeUrl)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_supporters_keys [[NodeFieldSupportersKeys](#NodeFieldSupportersKeys)]</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details></li><li><details><summary>field_synoptic_text [[NodeFieldSynopticText](#NodeFieldSynopticText)]</summary><ul><li>value [string]</li> <li>format [string]</li> <li>lang [string]</li> </ul></details></li><li>field_videos [array[[NodeFieldVideos](#NodeFieldVideos)]]</li> <li>field_tags [array[[NodeFieldTags](#NodeFieldTags)]]</li> </ul></details> | \n| nid | Entity | <details><summary>[NodeNodeId](#NodeNodeId)</summary><ul><li>value [string]</li> </ul></details> | \n| title | Entity | <details><summary>[NodeTitle](#NodeTitle)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| type | Entity | <details><summary>[NodeType](#NodeType)</summary><ul><li>target_id [string]</li> </ul></details> | \n| status | Entity | <details><summary>[NodeStatus](#NodeStatus)</summary><ul><li>value [string]</li> </ul></details> | \n| created | Entity | <details><summary>[NodeCreated](#NodeCreated)</summary><ul><li>value [string]</li> <li>format [string]</li> </ul></details> | \n| changed | Entity | <details><summary>[NodeChanged](#NodeChanged)</summary><ul><li>value [string]</li> <li>format [string]</li> </ul></details> | \n\n <a name=CmsArticle></a> \n## CmsArticle \nCMS Article \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| body| NodeBody| object|\n| tags| Article tags| array|\n| metadata| Article metadata| array|\n| externalSensitiveData| External sensitive data| array|\n| fieldImage| Image data| array|\n\n <a name=CmsLink></a> \n## CmsLink \nCMS Link \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| body | Entity | <details><summary>[NodeBody](#NodeBody)</summary><ul><li>value [string]</li> <li>format [string]</li> <li>summary [string]</li> <li>lang [string]</li> </ul></details> | \n| imageUrl | Entity | <details><summary>[NodeFieldImageUrl](#NodeFieldImageUrl)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| url | Entity | <details><summary>[NodeFieldLinkUrl](#NodeFieldLinkUrl)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| videoUrl | Entity | <details><summary>[NodeFieldVideoUrl](#NodeFieldVideoUrl)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| order | Entity | <details><summary>[NodeFieldLinkOrder](#NodeFieldLinkOrder)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| tags| Supporter tags| array[[NodeFieldTags](#NodeFieldTags)]|\n\n <a name=CmsActionAdditionalData></a> \n## CmsActionAdditionalData \nCMS Action additional data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| field_action_video | Entity | <details><summary>[NodeFieldActionVideo](#NodeFieldActionVideo)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_base_color | Entity | <details><summary>[NodeFieldBaseColor](#NodeFieldBaseColor)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_big_image_url | Entity | <details><summary>[NodeFieldBigImageUrl](#NodeFieldBigImageUrl)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_images_extra_images_url| List of extra images URL| array[[NodeFieldImagesExtraImagesUrl](#NodeFieldImagesExtraImagesUrl)]|\n| field_page_template | Entity | <details><summary>[NodeFieldPageTemplate](#NodeFieldPageTemplate)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_small_logo_colorful_url | Entity | <details><summary>[NodeFieldSmallLogoColorfulUrl](#NodeFieldSmallLogoColorfulUrl)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_small_logo_negative_url | Entity | <details><summary>[NodeFieldSmallLogoNegativeUrl](#NodeFieldSmallLogoNegativeUrl)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_supporters_keys | Entity | <details><summary>[NodeFieldSupportersKeys](#NodeFieldSupportersKeys)</summary><ul><li>value [string]</li> <li>lang [string]</li> </ul></details> | \n| field_synoptic_text | Entity | <details><summary>[NodeFieldSynopticText](#NodeFieldSynopticText)</summary><ul><li>value [string]</li> <li>format [string]</li> <li>lang [string]</li> </ul></details> | \n| field_videos| List of action videos URL| array[[NodeFieldVideos](#NodeFieldVideos)]|\n| field_tags| Content Tags| array[[NodeFieldTags](#NodeFieldTags)]|\n\n <a name=NodeNodeId></a> \n## NodeNodeId \nNodeNodeId \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n\n <a name=NodeTitle></a> \n## NodeTitle \nNodeTitle \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeType></a> \n## NodeType \nNodeType \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| target_id| TargetId| string|\n\n <a name=NodeStatus></a> \n## NodeStatus \nNodeStatus \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n\n <a name=NodeCreated></a> \n## NodeCreated \nNodeCreated \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| format| Format| string|\n\n <a name=NodeChanged></a> \n## NodeChanged \nNodeChanged \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| format| Format| string|\n\n <a name=NodeBody></a> \n## NodeBody \nNodeBody \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| format| Format| string|\n| summary| Summary| string|\n| lang| Language| string|\n\n <a name=NodeFieldTags></a> \n## NodeFieldTags \nNodeFieldTags \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| target_id| TargetId| integer|\n| value| Value| string|\n\n <a name=NodeFieldMetadata></a> \n## NodeFieldMetadata \nNodeFieldMetadata \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| target_id| TargetId| integer|\n\n <a name=NodeExternalSensitiveData></a> \n## NodeExternalSensitiveData \nNodeExternalSensitiveData \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n\n <a name=NodeFieldImage></a> \n## NodeFieldImage \nNodeFieldImage \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| target_id| TargetId| string|\n| alt| Alt| string|\n| title| Title| string|\n| width| Width| string|\n| height| Height| string|\n| target_type| Target Type| string|\n| url| URL| string|\n\n <a name=NodeFieldImageUrl></a> \n## NodeFieldImageUrl \nNodeFieldImageUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldLinkUrl></a> \n## NodeFieldLinkUrl \nNodeFieldLinkUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldVideoUrl></a> \n## NodeFieldVideoUrl \nNodeFieldVideoUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldLinkOrder></a> \n## NodeFieldLinkOrder \nNodeFieldLinkOrder \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldActionVideo></a> \n## NodeFieldActionVideo \nNodeFieldActionVideo \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldBaseColor></a> \n## NodeFieldBaseColor \nNodeFieldBaseColor \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldBigImageUrl></a> \n## NodeFieldBigImageUrl \nNodeFieldBigImageUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldImagesExtraImagesUrl></a> \n## NodeFieldImagesExtraImagesUrl \nNodeFieldImagesExtraImagesUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldPageTemplate></a> \n## NodeFieldPageTemplate \nNodeFieldPageTemplate \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldSmallLogoColorfulUrl></a> \n## NodeFieldSmallLogoColorfulUrl \nNodeFieldSmallLogoColorfulUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldSmallLogoNegativeUrl></a> \n## NodeFieldSmallLogoNegativeUrl \nNodeFieldSmallLogoNegativeUrl \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldSupportersKeys></a> \n## NodeFieldSupportersKeys \nNodeFieldSupportersKeys \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=NodeFieldSynopticText></a> \n## NodeFieldSynopticText \nNodeFieldSynopticText \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| format| Format| string|\n| lang| Language| string|\n\n <a name=NodeFieldVideos></a> \n## NodeFieldVideos \nNodeFieldVideos \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| value| Value| string|\n| lang| Language| string|\n\n <a name=Response[List[CmsTag]]></a> \n## Response[List[CmsTag]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[CmsTag](#CmsTag)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=CmsTag></a> \n## CmsTag \nCMS Tag \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| tid| Tag ID| string|\n| name| Tag name| string|\n\n <a name=Response[List[CmsNodes]]></a> \n## Response[List[CmsNodes]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[CmsNodes](#CmsNodes)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=CmsNodes></a> \n## CmsNodes \nCMS Nodes \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| nid| Node ID| string|\n| title| Node title| string|\n\n <a name=Response[List[CmsNodeResponse]]></a> \n## Response[List[CmsNodeResponse]] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload| -| array[[CmsNodeResponse](#CmsNodeResponse)]|\n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=SandboxRequest></a> \n## SandboxRequest \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| sandboxId| Sandbox ID| string|\n\n <a name=Response[SandboxDataModel]></a> \n## Response[SandboxDataModel] \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| payload | Entity | <details><summary>[SandboxDataModel](#SandboxDataModel)</summary><ul><li>SandboxID [string]</li> <li>Users [array]</li> <li>Accounts [array]</li> <li>ActionData [array]</li> <li>DonationPromises [array]</li> <li>ThematicAreas [array]</li> <li>ContactUsEntries [array]</li> <li>Merchants [array]</li> <li>Alerts [array]</li> <li>cmsData [object]</li> </ul></details> | \n| exception | Entity | <details><summary>[ResponseMessage](#ResponseMessage)</summary><ul><li>id [string]</li> <li>code [string]</li> <li>desc [string]</li> <li>sev [string]</li> <li>cat [string]</li> </ul></details> | \n| messages| -| array[[ResponseMessage](#ResponseMessage)]|\n| executionTime| -| number|\n\n <a name=SandboxDataModel></a> \n## SandboxDataModel \n\n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| SandboxID| Sandbox ID| string|\n| Users| List of users inside sandbox data model| array|\n| Accounts| List of accounts| array|\n| ActionData| List of actions with data| array|\n| DonationPromises| List of donation promises| array|\n| ThematicAreas| List of thematic areas| array|\n| ContactUsEntries| List of contact us entries| array|\n| Merchants| List of merchants| array|\n| Alerts| List of alerts| array|\n| cmsData| Cms related data| object|\n\n <a name=SandboxUserExtended></a> \n## SandboxUserExtended \nSandbox user extended properties \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| name| User's first name| string|\n| surname| User's surname| string|\n| phone| User's phone| string|\n| job| User's profession| string|\n| activity| Activity| string|\n| afm| Tax Identification Number| string|\n| doy| User's tax office| string|\n| address| User's address| string|\n| area| User's address area| string|\n| postal| User's address postal code| string|\n| state| User's address state| string|\n| phone_nomikou| Business phone| string|\n| email_nomikou| Business email| string|\n| url| User's web site| string|\n| country| User's address country| string|\n| legal_status| User's legal type (Individual, Legal Entity, Organisations/NGOs)| string|\n| userRole| User role  - User - Backoffice| string|\n| status| User status - Active - Blocked| string|\n| userId| The user id| string|\n| userName| The user name| string|\n| email| The user's email| string|\n| providerId| Provider id| string|\n| provider| Provider name| string|\n\n <a name=ActionData></a> \n## ActionData \nProperties of an action \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| actionDataId| Action sensitive data Id| string|\n| actionShortName| Short name or an action. The value of this property is autogenerated by the API.| string|\n| actionName| Name or title of an action| string|\n| accountKey| Account key is a key to find the account on the nbg account api| string|\n| cardsAccountKey| Key to find the cards account on ete account api| string|\n| dateStart| Start date of an action| string|\n| dateEnd| End date of an action| string|\n| offsetAmount| An offset for the amount . Is used for business proposed like money withdraws before an action is closed| number|\n| targetAmount| Target Amount| number|\n| status| Status of the action - Draft - Active - Expired - Archived| string|\n| newsletterUsers| Registered users for newsletter| array|\n| merchantDataId| Merchant id (uuid). Used for datacash payment.| string|\n| publicAmount| Public amount.| number|\n\n <a name=SandboxCms></a> \n## SandboxCms \nCms related data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| tagsData| Tags| array|\n| nodesData| Nodes| array|\n| articlesData| Articles| array|\n\n <a name=NodeData></a> \n## NodeData \nNodes data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| tag| tag Id| string|\n| nodes| CMS Tags| array|\n\n <a name=ArticleData></a> \n## ArticleData \nArticle data \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| node| CMS Nodes| object|\n| created| CreatedDate| string|\n| changed| ChangedDate| string|\n| article| CMS Article| object|\n\n <a name=TransferRequest></a> \n## TransferRequest \nTransfer Request model \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| amount| Amount of transfer| number|\n| withCompleteDepositDonation| Donation Promise id| string|\n| withAction| Action ID| string|\n| fromAccountIBAN| Source account IBAN| string|\n| toAccountIBAN| Destination account IBAN| string|\n| description| Description of transfer| string|\n\n <a name=CmsArticleRequest></a> \n## CmsArticleRequest \nArticle Request type \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| tag| Tag name| string|\n| title| Title of the article| string|\n| body| Body of the article| string|\n| summary| Summary of the article| string|\n\n <a name=CmsArticleRequestUpdate></a> \n## CmsArticleRequestUpdate \nArticle Request for update type \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| title| Title of the article| string|\n| body| Body of the article| string|\n| summary| Summary of the article| string|\n| image| Cms Article Image Request| object|\n\n <a name=CmsArticleImageRequest></a> \n## CmsArticleImageRequest \nCms Article Image Request \n\n### Attributes \n\n| Name| Description| Values|\n| -----| -----| -----|\n| alt| Alt image text| string|\n| title| Title of the image| string|\n| url| Image url| string|\n"
  contact: {}
host: apis.nbg.gr
basePath: /sandbox/crowdfunding/headers/v1.2
schemes:
  - https
paths:
  /sandbox:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: request
          description: "- sandboxId: Sandbox ID (string) <br />\r\nOnly latin characters without spaces and special characters are accepted."
          schema:
            $ref: '#/definitions/SandboxRequest'
          in: body
          required: true
      responses:
        '200':
          description: Created
          schema:
            $ref: '#/definitions/Response[SandboxDataModel]'
      operationId: Sandbox_CreateSandbox
      summary: Create Sandbox
      description: >-
        Creates a sandbox with unique sandbox id. This call can be used to
        create a "starter" package of data that includes users, accounts,
        transactions.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"sandboxId\":\"<ADD
            STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"sandboxId\":\"<ADD
            STRING VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox\"\n\n\tpayload := strings.NewReader(\"{\\\"sandboxId\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"sandboxId\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body: { sandboxId: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"sandboxId\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"sandboxId\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST", "/sandbox/crowdfunding/headers/v1.2/sandbox",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"sandboxId\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"sandboxId":"<ADD STRING VALUE>"}'
  '/sandbox/{sandbox_id}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox ID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SandboxDataModel'
      operationId: Sandbox_ExportSandbox
      summary: Export Sandbox
      description: This service is called to get sandbox data specified by sandbox id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox ID
          in: path
          required: true
          type: string
        - name: request
          description: ''
          schema:
            $ref: '#/definitions/SandboxDataModel'
          in: body
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SandboxDataModel'
      operationId: Sandbox_ImportSandbox
      summary: Import Sandbox
      description: This service is called to import sandbox data to a specific sandbox id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"SandboxID\":\"<ADD
            STRING VALUE>\",\"Users\":[{\"name\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"phone\":\"<ADD STRING
            VALUE>\",\"job\":\"<ADD STRING VALUE>\",\"activity\":\"<ADD STRING
            VALUE>\",\"afm\":\"<ADD STRING VALUE>\",\"doy\":\"<ADD STRING
            VALUE>\",\"address\":\"<ADD STRING VALUE>\",\"area\":\"<ADD STRING
            VALUE>\",\"postal\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING
            VALUE>\",\"phone_nomikou\":\"<ADD STRING
            VALUE>\",\"email_nomikou\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\",\"country\":\"<ADD STRING
            VALUE>\",\"legal_status\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD
            STRING VALUE>\",\"userName\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING
            VALUE>\",\"provider\":\"<ADD STRING
            VALUE>\"}],\"Accounts\":[{\"availableBalance\":0,\"ledgerBalance\":0,\"transactions\":[{\"amount\":0,\"ledgerBalance\":0,\"transactionDatetime\":\"<ADD
            STRING VALUE>\",\"timeStamp\":\"<ADD STRING
            VALUE>\",\"reasonCode\":0,\"reasonDescription\":\"<ADD STRING
            VALUE>\",\"origin\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING
            VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"reference\":\"<ADD
            STRING VALUE>\",\"branch\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\"}],\"accountId\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currencyISO\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"status\":\"Active\"}],\"ActionData\":[{\"actionDataId\":\"<ADD
            STRING VALUE>\",\"actionShortName\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"newsletterUsers\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"actionDataId\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"active\":false,\"updatedDate\":\"<ADD STRING
            VALUE>\"}],\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"publicAmount\":0}],\"DonationPromises\":[{\"donationPromiseId\":\"<ADD
            STRING VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING
            VALUE>\"}],\"ThematicAreas\":[{\"thematicAreaId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"actions\":[{\"actionDataId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING
            VALUE>\"}]}],\"ContactUsEntries\":[{\"contactUsId\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD
            STRING VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\"}],\"Merchants\":[{\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD
            STRING
            VALUE>\",\"required3DSecure\":false}],\"Alerts\":[{\"alertId\":\"<ADD
            STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD
            STRING VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING
            VALUE>\",\"insertDate\":\"<ADD STRING
            VALUE>\",\"insertedByUserId\":\"<ADD STRING
            VALUE>\"}],\"cmsData\":{\"tagsData\":[{\"tid\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\"}],\"nodesData\":[{\"tag\":\"<ADD STRING
            VALUE>\",\"nodes\":[{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\"}]}],\"articlesData\":[{\"node\":{\"nid\":\"<ADD
            STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"},\"created\":\"<ADD
            STRING VALUE>\",\"changed\":\"<ADD STRING
            VALUE>\",\"article\":{\"body\":{\"value\":\"<ADD STRING
            VALUE>\",\"format\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"lang\":\"<ADD STRING
            VALUE>\"},\"tags\":[{\"target_id\":0,\"value\":\"<ADD STRING
            VALUE>\"}],\"metadata\":[{\"target_id\":0}],\"externalSensitiveData\":[{\"value\":\"<ADD
            STRING VALUE>\"}],\"fieldImage\":[{\"target_id\":\"<ADD STRING
            VALUE>\",\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING
            VALUE>\",\"width\":\"<ADD STRING VALUE>\",\"height\":\"<ADD STRING
            VALUE>\",\"target_type\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\"}]}}]}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"SandboxID\":\"<ADD
            STRING VALUE>\",\"Users\":[{\"name\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"phone\":\"<ADD STRING
            VALUE>\",\"job\":\"<ADD STRING VALUE>\",\"activity\":\"<ADD STRING
            VALUE>\",\"afm\":\"<ADD STRING VALUE>\",\"doy\":\"<ADD STRING
            VALUE>\",\"address\":\"<ADD STRING VALUE>\",\"area\":\"<ADD STRING
            VALUE>\",\"postal\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING
            VALUE>\",\"phone_nomikou\":\"<ADD STRING
            VALUE>\",\"email_nomikou\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\",\"country\":\"<ADD STRING
            VALUE>\",\"legal_status\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD
            STRING VALUE>\",\"userName\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING
            VALUE>\",\"provider\":\"<ADD STRING
            VALUE>\"}],\"Accounts\":[{\"availableBalance\":0,\"ledgerBalance\":0,\"transactions\":[{\"amount\":0,\"ledgerBalance\":0,\"transactionDatetime\":\"<ADD
            STRING VALUE>\",\"timeStamp\":\"<ADD STRING
            VALUE>\",\"reasonCode\":0,\"reasonDescription\":\"<ADD STRING
            VALUE>\",\"origin\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING
            VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"reference\":\"<ADD
            STRING VALUE>\",\"branch\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\"}],\"accountId\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currencyISO\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"status\":\"Active\"}],\"ActionData\":[{\"actionDataId\":\"<ADD
            STRING VALUE>\",\"actionShortName\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"newsletterUsers\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"actionDataId\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"active\":false,\"updatedDate\":\"<ADD STRING
            VALUE>\"}],\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"publicAmount\":0}],\"DonationPromises\":[{\"donationPromiseId\":\"<ADD
            STRING VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING
            VALUE>\"}],\"ThematicAreas\":[{\"thematicAreaId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"actions\":[{\"actionDataId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING
            VALUE>\"}]}],\"ContactUsEntries\":[{\"contactUsId\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD
            STRING VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\"}],\"Merchants\":[{\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD
            STRING
            VALUE>\",\"required3DSecure\":false}],\"Alerts\":[{\"alertId\":\"<ADD
            STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD
            STRING VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING
            VALUE>\",\"insertDate\":\"<ADD STRING
            VALUE>\",\"insertedByUserId\":\"<ADD STRING
            VALUE>\"}],\"cmsData\":{\"tagsData\":[{\"tid\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\"}],\"nodesData\":[{\"tag\":\"<ADD STRING
            VALUE>\",\"nodes\":[{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\"}]}],\"articlesData\":[{\"node\":{\"nid\":\"<ADD
            STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"},\"created\":\"<ADD
            STRING VALUE>\",\"changed\":\"<ADD STRING
            VALUE>\",\"article\":{\"body\":{\"value\":\"<ADD STRING
            VALUE>\",\"format\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"lang\":\"<ADD STRING
            VALUE>\"},\"tags\":[{\"target_id\":0,\"value\":\"<ADD STRING
            VALUE>\"}],\"metadata\":[{\"target_id\":0}],\"externalSensitiveData\":[{\"value\":\"<ADD
            STRING VALUE>\"}],\"fieldImage\":[{\"target_id\":\"<ADD STRING
            VALUE>\",\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING
            VALUE>\",\"width\":\"<ADD STRING VALUE>\",\"height\":\"<ADD STRING
            VALUE>\",\"target_type\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\"}]}}]}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"SandboxID\\\":\\\"<ADD STRING VALUE>\\\",\\\"Users\\\":[{\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"surname\\\":\\\"<ADD STRING VALUE>\\\",\\\"phone\\\":\\\"<ADD STRING VALUE>\\\",\\\"job\\\":\\\"<ADD STRING VALUE>\\\",\\\"activity\\\":\\\"<ADD STRING VALUE>\\\",\\\"afm\\\":\\\"<ADD STRING VALUE>\\\",\\\"doy\\\":\\\"<ADD STRING VALUE>\\\",\\\"address\\\":\\\"<ADD STRING VALUE>\\\",\\\"area\\\":\\\"<ADD STRING VALUE>\\\",\\\"postal\\\":\\\"<ADD STRING VALUE>\\\",\\\"state\\\":\\\"<ADD STRING VALUE>\\\",\\\"phone_nomikou\\\":\\\"<ADD STRING VALUE>\\\",\\\"email_nomikou\\\":\\\"<ADD STRING VALUE>\\\",\\\"url\\\":\\\"<ADD STRING VALUE>\\\",\\\"country\\\":\\\"<ADD STRING VALUE>\\\",\\\"legal_status\\\":\\\"<ADD STRING VALUE>\\\",\\\"userRole\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"userName\\\":\\\"<ADD STRING VALUE>\\\",\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"providerId\\\":\\\"<ADD STRING VALUE>\\\",\\\"provider\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"Accounts\\\":[{\\\"availableBalance\\\":0,\\\"ledgerBalance\\\":0,\\\"transactions\\\":[{\\\"amount\\\":0,\\\"ledgerBalance\\\":0,\\\"transactionDatetime\\\":\\\"<ADD STRING VALUE>\\\",\\\"timeStamp\\\":\\\"<ADD STRING VALUE>\\\",\\\"reasonCode\\\":0,\\\"reasonDescription\\\":\\\"<ADD STRING VALUE>\\\",\\\"origin\\\":\\\"<ADD STRING VALUE>\\\",\\\"valeur\\\":\\\"<ADD STRING VALUE>\\\",\\\"currencyISO\\\":\\\"<ADD STRING VALUE>\\\",\\\"reference\\\":\\\"<ADD STRING VALUE>\\\",\\\"branch\\\":\\\"<ADD STRING VALUE>\\\",\\\"relatedAccount\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"accountId\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"currencyISO\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"Active\\\"}],\\\"ActionData\\\":[{\\\"actionDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionShortName\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionName\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"cardsAccountKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"dateStart\\\":\\\"<ADD STRING VALUE>\\\",\\\"dateEnd\\\":\\\"<ADD STRING VALUE>\\\",\\\"offsetAmount\\\":0,\\\"targetAmount\\\":0,\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"newsletterUsers\\\":[{\\\"userId\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"createdDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"active\\\":false,\\\"updatedDate\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"merchantDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"publicAmount\\\":0}],\\\"DonationPromises\\\":[{\\\"donationPromiseId\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"categoryMoneyFound\\\":\\\"<ADD STRING VALUE>\\\",\\\"donationTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"payType\\\":\\\"<ADD STRING VALUE>\\\",\\\"publish\\\":false,\\\"theChallenge\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionReceiptKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"userKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"xpAmount\\\":0,\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"displayName\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"ThematicAreas\\\":[{\\\"thematicAreaId\\\":\\\"<ADD STRING VALUE>\\\",\\\"shortName\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"logoUrl\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"actions\\\":[{\\\"actionDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"shortName\\\":\\\"<ADD STRING VALUE>\\\"}]}],\\\"ContactUsEntries\\\":[{\\\"contactUsId\\\":\\\"<ADD STRING VALUE>\\\",\\\"surname\\\":\\\"<ADD STRING VALUE>\\\",\\\"firstname\\\":\\\"<ADD STRING VALUE>\\\",\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"message\\\":\\\"<ADD STRING VALUE>\\\",\\\"createdDate\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"Merchants\\\":[{\\\"merchantDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantId\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantName\\\":\\\"<ADD STRING VALUE>\\\",\\\"username\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantUrl\\\":\\\"<ADD STRING VALUE>\\\",\\\"required3DSecure\\\":false}],\\\"Alerts\\\":[{\\\"alertId\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"type\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"tags\\\":\\\"<ADD STRING VALUE>\\\",\\\"sourceType\\\":\\\"<ADD STRING VALUE>\\\",\\\"sourceClient\\\":\\\"<ADD STRING VALUE>\\\",\\\"sourceDescription\\\":\\\"<ADD STRING VALUE>\\\",\\\"insertDate\\\":\\\"<ADD STRING VALUE>\\\",\\\"insertedByUserId\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"cmsData\\\":{\\\"tagsData\\\":[{\\\"tid\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"nodesData\\\":[{\\\"tag\\\":\\\"<ADD STRING VALUE>\\\",\\\"nodes\\\":[{\\\"nid\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"}]}],\\\"articlesData\\\":[{\\\"node\\\":{\\\"nid\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\"},\\\"created\\\":\\\"<ADD STRING VALUE>\\\",\\\"changed\\\":\\\"<ADD STRING VALUE>\\\",\\\"article\\\":{\\\"body\\\":{\\\"value\\\":\\\"<ADD STRING VALUE>\\\",\\\"format\\\":\\\"<ADD STRING VALUE>\\\",\\\"summary\\\":\\\"<ADD STRING VALUE>\\\",\\\"lang\\\":\\\"<ADD STRING VALUE>\\\"},\\\"tags\\\":[{\\\"target_id\\\":0,\\\"value\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"metadata\\\":[{\\\"target_id\\\":0}],\\\"externalSensitiveData\\\":[{\\\"value\\\":\\\"<ADD STRING VALUE>\\\"}],\\\"fieldImage\\\":[{\\\"target_id\\\":\\\"<ADD STRING VALUE>\\\",\\\"alt\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\",\\\"width\\\":\\\"<ADD STRING VALUE>\\\",\\\"height\\\":\\\"<ADD STRING VALUE>\\\",\\\"target_type\\\":\\\"<ADD STRING VALUE>\\\",\\\"url\\\":\\\"<ADD STRING VALUE>\\\"}]}}]}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"SandboxID\":\"<ADD STRING VALUE>\",\"Users\":[{\"name\":\"<ADD
            STRING VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"phone\":\"<ADD
            STRING VALUE>\",\"job\":\"<ADD STRING VALUE>\",\"activity\":\"<ADD
            STRING VALUE>\",\"afm\":\"<ADD STRING VALUE>\",\"doy\":\"<ADD STRING
            VALUE>\",\"address\":\"<ADD STRING VALUE>\",\"area\":\"<ADD STRING
            VALUE>\",\"postal\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING
            VALUE>\",\"phone_nomikou\":\"<ADD STRING
            VALUE>\",\"email_nomikou\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\",\"country\":\"<ADD STRING
            VALUE>\",\"legal_status\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD
            STRING VALUE>\",\"userName\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING
            VALUE>\",\"provider\":\"<ADD STRING
            VALUE>\"}],\"Accounts\":[{\"availableBalance\":0,\"ledgerBalance\":0,\"transactions\":[{\"amount\":0,\"ledgerBalance\":0,\"transactionDatetime\":\"<ADD
            STRING VALUE>\",\"timeStamp\":\"<ADD STRING
            VALUE>\",\"reasonCode\":0,\"reasonDescription\":\"<ADD STRING
            VALUE>\",\"origin\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING
            VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"reference\":\"<ADD
            STRING VALUE>\",\"branch\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\"}],\"accountId\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currencyISO\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"status\":\"Active\"}],\"ActionData\":[{\"actionDataId\":\"<ADD
            STRING VALUE>\",\"actionShortName\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"newsletterUsers\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"actionDataId\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"active\":false,\"updatedDate\":\"<ADD STRING
            VALUE>\"}],\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"publicAmount\":0}],\"DonationPromises\":[{\"donationPromiseId\":\"<ADD
            STRING VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING
            VALUE>\"}],\"ThematicAreas\":[{\"thematicAreaId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"actions\":[{\"actionDataId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING
            VALUE>\"}]}],\"ContactUsEntries\":[{\"contactUsId\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD
            STRING VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\"}],\"Merchants\":[{\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD
            STRING
            VALUE>\",\"required3DSecure\":false}],\"Alerts\":[{\"alertId\":\"<ADD
            STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD
            STRING VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING
            VALUE>\",\"insertDate\":\"<ADD STRING
            VALUE>\",\"insertedByUserId\":\"<ADD STRING
            VALUE>\"}],\"cmsData\":{\"tagsData\":[{\"tid\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\"}],\"nodesData\":[{\"tag\":\"<ADD STRING
            VALUE>\",\"nodes\":[{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\"}]}],\"articlesData\":[{\"node\":{\"nid\":\"<ADD
            STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"},\"created\":\"<ADD
            STRING VALUE>\",\"changed\":\"<ADD STRING
            VALUE>\",\"article\":{\"body\":{\"value\":\"<ADD STRING
            VALUE>\",\"format\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"lang\":\"<ADD STRING
            VALUE>\"},\"tags\":[{\"target_id\":0,\"value\":\"<ADD STRING
            VALUE>\"}],\"metadata\":[{\"target_id\":0}],\"externalSensitiveData\":[{\"value\":\"<ADD
            STRING VALUE>\"}],\"fieldImage\":[{\"target_id\":\"<ADD STRING
            VALUE>\",\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING
            VALUE>\",\"width\":\"<ADD STRING VALUE>\",\"height\":\"<ADD STRING
            VALUE>\",\"target_type\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\"}]}}]}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { SandboxID: '<ADD STRING VALUE>',
                 Users:
                  [ { name: '<ADD STRING VALUE>',
                      surname: '<ADD STRING VALUE>',
                      phone: '<ADD STRING VALUE>',
                      job: '<ADD STRING VALUE>',
                      activity: '<ADD STRING VALUE>',
                      afm: '<ADD STRING VALUE>',
                      doy: '<ADD STRING VALUE>',
                      address: '<ADD STRING VALUE>',
                      area: '<ADD STRING VALUE>',
                      postal: '<ADD STRING VALUE>',
                      state: '<ADD STRING VALUE>',
                      phone_nomikou: '<ADD STRING VALUE>',
                      email_nomikou: '<ADD STRING VALUE>',
                      url: '<ADD STRING VALUE>',
                      country: '<ADD STRING VALUE>',
                      legal_status: '<ADD STRING VALUE>',
                      userRole: '<ADD STRING VALUE>',
                      status: '<ADD STRING VALUE>',
                      userId: '<ADD STRING VALUE>',
                      userName: '<ADD STRING VALUE>',
                      email: '<ADD STRING VALUE>',
                      providerId: '<ADD STRING VALUE>',
                      provider: '<ADD STRING VALUE>' } ],
                 Accounts:
                  [ { availableBalance: 0,
                      ledgerBalance: 0,
                      transactions:
                       [ { amount: 0,
                           ledgerBalance: 0,
                           transactionDatetime: '<ADD STRING VALUE>',
                           timeStamp: '<ADD STRING VALUE>',
                           reasonCode: 0,
                           reasonDescription: '<ADD STRING VALUE>',
                           origin: '<ADD STRING VALUE>',
                           valeur: '<ADD STRING VALUE>',
                           currencyISO: '<ADD STRING VALUE>',
                           reference: '<ADD STRING VALUE>',
                           branch: '<ADD STRING VALUE>',
                           relatedAccount: '<ADD STRING VALUE>' } ],
                      accountId: '<ADD STRING VALUE>',
                      accountNumber: '<ADD STRING VALUE>',
                      iban: '<ADD STRING VALUE>',
                      currencyISO: '<ADD STRING VALUE>',
                      description: '<ADD STRING VALUE>',
                      status: 'Active' } ],
                 ActionData:
                  [ { actionDataId: '<ADD STRING VALUE>',
                      actionShortName: '<ADD STRING VALUE>',
                      actionName: '<ADD STRING VALUE>',
                      accountKey: '<ADD STRING VALUE>',
                      cardsAccountKey: '<ADD STRING VALUE>',
                      dateStart: '<ADD STRING VALUE>',
                      dateEnd: '<ADD STRING VALUE>',
                      offsetAmount: 0,
                      targetAmount: 0,
                      status: '<ADD STRING VALUE>',
                      newsletterUsers:
                       [ { userId: '<ADD STRING VALUE>',
                           actionDataId: '<ADD STRING VALUE>',
                           createdDate: '<ADD STRING VALUE>',
                           active: false,
                           updatedDate: '<ADD STRING VALUE>' } ],
                      merchantDataId: '<ADD STRING VALUE>',
                      publicAmount: 0 } ],
                 DonationPromises:
                  [ { donationPromiseId: '<ADD STRING VALUE>',
                      actionKey: '<ADD STRING VALUE>',
                      categoryMoneyFound: '<ADD STRING VALUE>',
                      donationTime: '<ADD STRING VALUE>',
                      payType: '<ADD STRING VALUE>',
                      publish: false,
                      theChallenge: '<ADD STRING VALUE>',
                      transactionKey: '<ADD STRING VALUE>',
                      transactionReceiptKey: '<ADD STRING VALUE>',
                      userKey: '<ADD STRING VALUE>',
                      xpAmount: 0,
                      status: '<ADD STRING VALUE>',
                      displayName: '<ADD STRING VALUE>' } ],
                 ThematicAreas:
                  [ { thematicAreaId: '<ADD STRING VALUE>',
                      shortName: '<ADD STRING VALUE>',
                      name: '<ADD STRING VALUE>',
                      description: '<ADD STRING VALUE>',
                      logoUrl: '<ADD STRING VALUE>',
                      status: '<ADD STRING VALUE>',
                      actions:
                       [ { actionDataId: '<ADD STRING VALUE>',
                           shortName: '<ADD STRING VALUE>' } ] } ],
                 ContactUsEntries:
                  [ { contactUsId: '<ADD STRING VALUE>',
                      surname: '<ADD STRING VALUE>',
                      firstname: '<ADD STRING VALUE>',
                      email: '<ADD STRING VALUE>',
                      message: '<ADD STRING VALUE>',
                      createdDate: '<ADD STRING VALUE>' } ],
                 Merchants:
                  [ { merchantDataId: '<ADD STRING VALUE>',
                      merchantId: '<ADD STRING VALUE>',
                      merchantName: '<ADD STRING VALUE>',
                      username: '<ADD STRING VALUE>',
                      password: '<ADD STRING VALUE>',
                      status: '<ADD STRING VALUE>',
                      merchantUrl: '<ADD STRING VALUE>',
                      required3DSecure: false } ],
                 Alerts:
                  [ { alertId: '<ADD STRING VALUE>',
                      name: '<ADD STRING VALUE>',
                      type: '<ADD STRING VALUE>',
                      description: '<ADD STRING VALUE>',
                      tags: '<ADD STRING VALUE>',
                      sourceType: '<ADD STRING VALUE>',
                      sourceClient: '<ADD STRING VALUE>',
                      sourceDescription: '<ADD STRING VALUE>',
                      insertDate: '<ADD STRING VALUE>',
                      insertedByUserId: '<ADD STRING VALUE>' } ],
                 cmsData:
                  { tagsData:
                     [ { tid: '<ADD STRING VALUE>', name: '<ADD STRING VALUE>' } ],
                    nodesData:
                     [ { tag: '<ADD STRING VALUE>',
                         nodes:
                          [ { nid: '<ADD STRING VALUE>', title: '<ADD STRING VALUE>' } ] } ],
                    articlesData:
                     [ { node: { nid: '<ADD STRING VALUE>', title: '<ADD STRING VALUE>' },
                         created: '<ADD STRING VALUE>',
                         changed: '<ADD STRING VALUE>',
                         article:
                          { body:
                             { value: '<ADD STRING VALUE>',
                               format: '<ADD STRING VALUE>',
                               summary: '<ADD STRING VALUE>',
                               lang: '<ADD STRING VALUE>' },
                            tags: [ { target_id: 0, value: '<ADD STRING VALUE>' } ],
                            metadata: [ { target_id: 0 } ],
                            externalSensitiveData: [ { value: '<ADD STRING VALUE>' } ],
                            fieldImage:
                             [ { target_id: '<ADD STRING VALUE>',
                                 alt: '<ADD STRING VALUE>',
                                 title: '<ADD STRING VALUE>',
                                 width: '<ADD STRING VALUE>',
                                 height: '<ADD STRING VALUE>',
                                 target_type: '<ADD STRING VALUE>',
                                 url: '<ADD STRING VALUE>' } ] } } ] } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"SandboxID\":\"<ADD STRING VALUE>\",\"Users\":[{\"name\":\"<ADD STRING VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"phone\":\"<ADD STRING VALUE>\",\"job\":\"<ADD STRING VALUE>\",\"activity\":\"<ADD STRING VALUE>\",\"afm\":\"<ADD STRING VALUE>\",\"doy\":\"<ADD STRING VALUE>\",\"address\":\"<ADD STRING VALUE>\",\"area\":\"<ADD STRING VALUE>\",\"postal\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING VALUE>\",\"phone_nomikou\":\"<ADD STRING VALUE>\",\"email_nomikou\":\"<ADD STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\",\"country\":\"<ADD STRING VALUE>\",\"legal_status\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD STRING VALUE>\",\"userName\":\"<ADD STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"providerId\":\"<ADD STRING VALUE>\",\"provider\":\"<ADD STRING VALUE>\"}],\"Accounts\":[{\"availableBalance\":0,\"ledgerBalance\":0,\"transactions\":[{\"amount\":0,\"ledgerBalance\":0,\"transactionDatetime\":\"<ADD STRING VALUE>\",\"timeStamp\":\"<ADD STRING VALUE>\",\"reasonCode\":0,\"reasonDescription\":\"<ADD STRING VALUE>\",\"origin\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"reference\":\"<ADD STRING VALUE>\",\"branch\":\"<ADD STRING VALUE>\",\"relatedAccount\":\"<ADD STRING VALUE>\"}],\"accountId\":\"<ADD STRING VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"status\":\"Active\"}],\"ActionData\":[{\"actionDataId\":\"<ADD STRING VALUE>\",\"actionShortName\":\"<ADD STRING VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD STRING VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"status\":\"<ADD STRING VALUE>\",\"newsletterUsers\":[{\"userId\":\"<ADD STRING VALUE>\",\"actionDataId\":\"<ADD STRING VALUE>\",\"createdDate\":\"<ADD STRING VALUE>\",\"active\":false,\"updatedDate\":\"<ADD STRING VALUE>\"}],\"merchantDataId\":\"<ADD STRING VALUE>\",\"publicAmount\":0}],\"DonationPromises\":[{\"donationPromiseId\":\"<ADD STRING VALUE>\",\"actionKey\":\"<ADD STRING VALUE>\",\"categoryMoneyFound\":\"<ADD STRING VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING VALUE>\",\"transactionKey\":\"<ADD STRING VALUE>\",\"transactionReceiptKey\":\"<ADD STRING VALUE>\",\"userKey\":\"<ADD STRING VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}],\"ThematicAreas\":[{\"thematicAreaId\":\"<ADD STRING VALUE>\",\"shortName\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"actions\":[{\"actionDataId\":\"<ADD STRING VALUE>\",\"shortName\":\"<ADD STRING VALUE>\"}]}],\"ContactUsEntries\":[{\"contactUsId\":\"<ADD STRING VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD STRING VALUE>\",\"createdDate\":\"<ADD STRING VALUE>\"}],\"Merchants\":[{\"merchantDataId\":\"<ADD STRING VALUE>\",\"merchantId\":\"<ADD STRING VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD STRING VALUE>\",\"required3DSecure\":false}],\"Alerts\":[{\"alertId\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD STRING VALUE>\",\"sourceClient\":\"<ADD STRING VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\",\"insertDate\":\"<ADD STRING VALUE>\",\"insertedByUserId\":\"<ADD STRING VALUE>\"}],\"cmsData\":{\"tagsData\":[{\"tid\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\"}],\"nodesData\":[{\"tag\":\"<ADD STRING VALUE>\",\"nodes\":[{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"}]}],\"articlesData\":[{\"node\":{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"},\"created\":\"<ADD STRING VALUE>\",\"changed\":\"<ADD STRING VALUE>\",\"article\":{\"body\":{\"value\":\"<ADD STRING VALUE>\",\"format\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING VALUE>\",\"lang\":\"<ADD STRING VALUE>\"},\"tags\":[{\"target_id\":0,\"value\":\"<ADD STRING VALUE>\"}],\"metadata\":[{\"target_id\":0}],\"externalSensitiveData\":[{\"value\":\"<ADD STRING VALUE>\"}],\"fieldImage\":[{\"target_id\":\"<ADD STRING VALUE>\",\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"width\":\"<ADD STRING VALUE>\",\"height\":\"<ADD STRING VALUE>\",\"target_type\":\"<ADD STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\"}]}}]}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"SandboxID\":\"<ADD STRING
            VALUE>\",\"Users\":[{\"name\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"phone\":\"<ADD STRING
            VALUE>\",\"job\":\"<ADD STRING VALUE>\",\"activity\":\"<ADD STRING
            VALUE>\",\"afm\":\"<ADD STRING VALUE>\",\"doy\":\"<ADD STRING
            VALUE>\",\"address\":\"<ADD STRING VALUE>\",\"area\":\"<ADD STRING
            VALUE>\",\"postal\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING
            VALUE>\",\"phone_nomikou\":\"<ADD STRING
            VALUE>\",\"email_nomikou\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\",\"country\":\"<ADD STRING
            VALUE>\",\"legal_status\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD
            STRING VALUE>\",\"userName\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING
            VALUE>\",\"provider\":\"<ADD STRING
            VALUE>\"}],\"Accounts\":[{\"availableBalance\":0,\"ledgerBalance\":0,\"transactions\":[{\"amount\":0,\"ledgerBalance\":0,\"transactionDatetime\":\"<ADD
            STRING VALUE>\",\"timeStamp\":\"<ADD STRING
            VALUE>\",\"reasonCode\":0,\"reasonDescription\":\"<ADD STRING
            VALUE>\",\"origin\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING
            VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"reference\":\"<ADD
            STRING VALUE>\",\"branch\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\"}],\"accountId\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currencyISO\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"status\":\"Active\"}],\"ActionData\":[{\"actionDataId\":\"<ADD
            STRING VALUE>\",\"actionShortName\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"newsletterUsers\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"actionDataId\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"active\":false,\"updatedDate\":\"<ADD STRING
            VALUE>\"}],\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"publicAmount\":0}],\"DonationPromises\":[{\"donationPromiseId\":\"<ADD
            STRING VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING
            VALUE>\"}],\"ThematicAreas\":[{\"thematicAreaId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"actions\":[{\"actionDataId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING
            VALUE>\"}]}],\"ContactUsEntries\":[{\"contactUsId\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD
            STRING VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\"}],\"Merchants\":[{\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD
            STRING
            VALUE>\",\"required3DSecure\":false}],\"Alerts\":[{\"alertId\":\"<ADD
            STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD
            STRING VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING
            VALUE>\",\"insertDate\":\"<ADD STRING
            VALUE>\",\"insertedByUserId\":\"<ADD STRING
            VALUE>\"}],\"cmsData\":{\"tagsData\":[{\"tid\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\"}],\"nodesData\":[{\"tag\":\"<ADD STRING
            VALUE>\",\"nodes\":[{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\"}]}],\"articlesData\":[{\"node\":{\"nid\":\"<ADD
            STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"},\"created\":\"<ADD
            STRING VALUE>\",\"changed\":\"<ADD STRING
            VALUE>\",\"article\":{\"body\":{\"value\":\"<ADD STRING
            VALUE>\",\"format\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"lang\":\"<ADD STRING
            VALUE>\"},\"tags\":[{\"target_id\":0,\"value\":\"<ADD STRING
            VALUE>\"}],\"metadata\":[{\"target_id\":0}],\"externalSensitiveData\":[{\"value\":\"<ADD
            STRING VALUE>\"}],\"fieldImage\":[{\"target_id\":\"<ADD STRING
            VALUE>\",\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING
            VALUE>\",\"width\":\"<ADD STRING VALUE>\",\"height\":\"<ADD STRING
            VALUE>\",\"target_type\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\"}]}}]}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"SandboxID\":\"<ADD STRING
            VALUE>\",\"Users\":[{\"name\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"phone\":\"<ADD STRING
            VALUE>\",\"job\":\"<ADD STRING VALUE>\",\"activity\":\"<ADD STRING
            VALUE>\",\"afm\":\"<ADD STRING VALUE>\",\"doy\":\"<ADD STRING
            VALUE>\",\"address\":\"<ADD STRING VALUE>\",\"area\":\"<ADD STRING
            VALUE>\",\"postal\":\"<ADD STRING VALUE>\",\"state\":\"<ADD STRING
            VALUE>\",\"phone_nomikou\":\"<ADD STRING
            VALUE>\",\"email_nomikou\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\",\"country\":\"<ADD STRING
            VALUE>\",\"legal_status\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"userId\":\"<ADD
            STRING VALUE>\",\"userName\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"providerId\":\"<ADD STRING
            VALUE>\",\"provider\":\"<ADD STRING
            VALUE>\"}],\"Accounts\":[{\"availableBalance\":0,\"ledgerBalance\":0,\"transactions\":[{\"amount\":0,\"ledgerBalance\":0,\"transactionDatetime\":\"<ADD
            STRING VALUE>\",\"timeStamp\":\"<ADD STRING
            VALUE>\",\"reasonCode\":0,\"reasonDescription\":\"<ADD STRING
            VALUE>\",\"origin\":\"<ADD STRING VALUE>\",\"valeur\":\"<ADD STRING
            VALUE>\",\"currencyISO\":\"<ADD STRING VALUE>\",\"reference\":\"<ADD
            STRING VALUE>\",\"branch\":\"<ADD STRING
            VALUE>\",\"relatedAccount\":\"<ADD STRING
            VALUE>\"}],\"accountId\":\"<ADD STRING
            VALUE>\",\"accountNumber\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"currencyISO\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"status\":\"Active\"}],\"ActionData\":[{\"actionDataId\":\"<ADD
            STRING VALUE>\",\"actionShortName\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"status\":\"<ADD
            STRING VALUE>\",\"newsletterUsers\":[{\"userId\":\"<ADD STRING
            VALUE>\",\"actionDataId\":\"<ADD STRING
            VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\",\"active\":false,\"updatedDate\":\"<ADD STRING
            VALUE>\"}],\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"publicAmount\":0}],\"DonationPromises\":[{\"donationPromiseId\":\"<ADD
            STRING VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING
            VALUE>\"}],\"ThematicAreas\":[{\"thematicAreaId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\",\"actions\":[{\"actionDataId\":\"<ADD STRING
            VALUE>\",\"shortName\":\"<ADD STRING
            VALUE>\"}]}],\"ContactUsEntries\":[{\"contactUsId\":\"<ADD STRING
            VALUE>\",\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD
            STRING VALUE>\",\"createdDate\":\"<ADD STRING
            VALUE>\"}],\"Merchants\":[{\"merchantDataId\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD
            STRING
            VALUE>\",\"required3DSecure\":false}],\"Alerts\":[{\"alertId\":\"<ADD
            STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD
            STRING VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING
            VALUE>\",\"insertDate\":\"<ADD STRING
            VALUE>\",\"insertedByUserId\":\"<ADD STRING
            VALUE>\"}],\"cmsData\":{\"tagsData\":[{\"tid\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING
            VALUE>\"}],\"nodesData\":[{\"tag\":\"<ADD STRING
            VALUE>\",\"nodes\":[{\"nid\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\"}]}],\"articlesData\":[{\"node\":{\"nid\":\"<ADD
            STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\"},\"created\":\"<ADD
            STRING VALUE>\",\"changed\":\"<ADD STRING
            VALUE>\",\"article\":{\"body\":{\"value\":\"<ADD STRING
            VALUE>\",\"format\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"lang\":\"<ADD STRING
            VALUE>\"},\"tags\":[{\"target_id\":0,\"value\":\"<ADD STRING
            VALUE>\"}],\"metadata\":[{\"target_id\":0}],\"externalSensitiveData\":[{\"value\":\"<ADD
            STRING VALUE>\"}],\"fieldImage\":[{\"target_id\":\"<ADD STRING
            VALUE>\",\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING
            VALUE>\",\"width\":\"<ADD STRING VALUE>\",\"height\":\"<ADD STRING
            VALUE>\",\"target_type\":\"<ADD STRING VALUE>\",\"url\":\"<ADD
            STRING VALUE>\"}]}}]}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"SandboxID":"<ADD STRING VALUE>","Users":[{"name":"<ADD STRING VALUE>","surname":"<ADD STRING VALUE>","phone":"<ADD STRING VALUE>","job":"<ADD STRING VALUE>","activity":"<ADD STRING VALUE>","afm":"<ADD STRING VALUE>","doy":"<ADD STRING VALUE>","address":"<ADD STRING VALUE>","area":"<ADD STRING VALUE>","postal":"<ADD STRING VALUE>","state":"<ADD STRING VALUE>","phone_nomikou":"<ADD STRING VALUE>","email_nomikou":"<ADD STRING VALUE>","url":"<ADD STRING VALUE>","country":"<ADD STRING VALUE>","legal_status":"<ADD STRING VALUE>","userRole":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>","userId":"<ADD STRING VALUE>","userName":"<ADD STRING VALUE>","email":"<ADD STRING VALUE>","providerId":"<ADD STRING VALUE>","provider":"<ADD STRING VALUE>"}],"Accounts":[{"availableBalance":0,"ledgerBalance":0,"transactions":[{"amount":0,"ledgerBalance":0,"transactionDatetime":"<ADD STRING VALUE>","timeStamp":"<ADD STRING VALUE>","reasonCode":0,"reasonDescription":"<ADD STRING VALUE>","origin":"<ADD STRING VALUE>","valeur":"<ADD STRING VALUE>","currencyISO":"<ADD STRING VALUE>","reference":"<ADD STRING VALUE>","branch":"<ADD STRING VALUE>","relatedAccount":"<ADD STRING VALUE>"}],"accountId":"<ADD STRING VALUE>","accountNumber":"<ADD STRING VALUE>","iban":"<ADD STRING VALUE>","currencyISO":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","status":"Active"}],"ActionData":[{"actionDataId":"<ADD STRING VALUE>","actionShortName":"<ADD STRING VALUE>","actionName":"<ADD STRING VALUE>","accountKey":"<ADD STRING VALUE>","cardsAccountKey":"<ADD STRING VALUE>","dateStart":"<ADD STRING VALUE>","dateEnd":"<ADD STRING VALUE>","offsetAmount":0,"targetAmount":0,"status":"<ADD STRING VALUE>","newsletterUsers":[{"userId":"<ADD STRING VALUE>","actionDataId":"<ADD STRING VALUE>","createdDate":"<ADD STRING VALUE>","active":false,"updatedDate":"<ADD STRING VALUE>"}],"merchantDataId":"<ADD STRING VALUE>","publicAmount":0}],"DonationPromises":[{"donationPromiseId":"<ADD STRING VALUE>","actionKey":"<ADD STRING VALUE>","categoryMoneyFound":"<ADD STRING VALUE>","donationTime":"<ADD STRING VALUE>","payType":"<ADD STRING VALUE>","publish":false,"theChallenge":"<ADD STRING VALUE>","transactionKey":"<ADD STRING VALUE>","transactionReceiptKey":"<ADD STRING VALUE>","userKey":"<ADD STRING VALUE>","xpAmount":0,"status":"<ADD STRING VALUE>","displayName":"<ADD STRING VALUE>"}],"ThematicAreas":[{"thematicAreaId":"<ADD STRING VALUE>","shortName":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","logoUrl":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>","actions":[{"actionDataId":"<ADD STRING VALUE>","shortName":"<ADD STRING VALUE>"}]}],"ContactUsEntries":[{"contactUsId":"<ADD STRING VALUE>","surname":"<ADD STRING VALUE>","firstname":"<ADD STRING VALUE>","email":"<ADD STRING VALUE>","message":"<ADD STRING VALUE>","createdDate":"<ADD STRING VALUE>"}],"Merchants":[{"merchantDataId":"<ADD STRING VALUE>","merchantId":"<ADD STRING VALUE>","merchantName":"<ADD STRING VALUE>","username":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>","merchantUrl":"<ADD STRING VALUE>","required3DSecure":false}],"Alerts":[{"alertId":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","type":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","tags":"<ADD STRING VALUE>","sourceType":"<ADD STRING VALUE>","sourceClient":"<ADD STRING VALUE>","sourceDescription":"<ADD STRING VALUE>","insertDate":"<ADD STRING VALUE>","insertedByUserId":"<ADD STRING VALUE>"}],"cmsData":{"tagsData":[{"tid":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>"}],"nodesData":[{"tag":"<ADD STRING VALUE>","nodes":[{"nid":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"}]}],"articlesData":[{"node":{"nid":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>"},"created":"<ADD STRING VALUE>","changed":"<ADD STRING VALUE>","article":{"body":{"value":"<ADD STRING VALUE>","format":"<ADD STRING VALUE>","summary":"<ADD STRING VALUE>","lang":"<ADD STRING VALUE>"},"tags":[{"target_id":0,"value":"<ADD STRING VALUE>"}],"metadata":[{"target_id":0}],"externalSensitiveData":[{"value":"<ADD STRING VALUE>"}],"fieldImage":[{"target_id":"<ADD STRING VALUE>","alt":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>","width":"<ADD STRING VALUE>","height":"<ADD STRING VALUE>","target_type":"<ADD STRING VALUE>","url":"<ADD STRING VALUE>"}]}}]}}'
    delete:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox ID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Sandbox_DeleteSandbox
      summary: Delete Sandbox
      description: Delete Sandbox specified by sandbox id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D")
              .delete(null)
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("DELETE",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request DELETE \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
  '/sandbox/{sandbox_id}/account/transfer':
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: request
          description: "- amount: The amount of the transfer (Decimal)\r\n- WithCompleteDepositDonation : Place a donationid that you want to change from pending to paid \r\n- WithAction : Place the actionid of the donation  \r\n- fromAccountIBAN: The IBAN of the debitor account (String)\r\n- toAccountIBAN: The IBAN of the creditor account (String)\r\n- description: Transfer description which is free text (String)"
          schema:
            $ref: '#/definitions/TransferRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox ID
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[TransactionResponse]'
        '400':
          description: Invalid Balance Amount.
      operationId: Sandbox_CreateTransfer
      summary: Create transfer
      description: "This call is used in order to make a transfer from one account to another and complete a deposit promise.\r\n\r\n\r\nSample request:\r\n            \r\n    POST /sandbox/{sandbox_id}/account/transfer\r\n    {\r\n        \"amount\": 200,\r\n        \"WithCompleteDepositDonation\": \"7aa8afb2-fe45-42dc-9eb2-f26c9dd06795\"\r\n        \"WithAction\": \"d4467221-b801-44db-97e7-04f3e95147fe\"\r\n        \"fromAccountIBAN\": \"GR4201101230000012345678952\",\r\n        \"toAccountIBAN\": \"GR6001109420000094200122540\",\r\n        \"description\": \"ΠΛΗΡΩΜΗ\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"amount\":0,\"withCompleteDepositDonation\":\"<ADD STRING
            VALUE>\",\"withAction\":\"<ADD STRING
            VALUE>\",\"fromAccountIBAN\":\"<ADD STRING
            VALUE>\",\"toAccountIBAN\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json",
            "{\"amount\":0,\"withCompleteDepositDonation\":\"<ADD STRING
            VALUE>\",\"withAction\":\"<ADD STRING
            VALUE>\",\"fromAccountIBAN\":\"<ADD STRING
            VALUE>\",\"toAccountIBAN\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer\"\n\n\tpayload := strings.NewReader(\"{\\\"amount\\\":0,\\\"withCompleteDepositDonation\\\":\\\"<ADD STRING VALUE>\\\",\\\"withAction\\\":\\\"<ADD STRING VALUE>\\\",\\\"fromAccountIBAN\\\":\\\"<ADD STRING VALUE>\\\",\\\"toAccountIBAN\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"amount\":0,\"withCompleteDepositDonation\":\"<ADD STRING
            VALUE>\",\"withAction\":\"<ADD STRING
            VALUE>\",\"fromAccountIBAN\":\"<ADD STRING
            VALUE>\",\"toAccountIBAN\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { amount: 0,
                 withCompleteDepositDonation: '<ADD STRING VALUE>',
                 withAction: '<ADD STRING VALUE>',
                 fromAccountIBAN: '<ADD STRING VALUE>',
                 toAccountIBAN: '<ADD STRING VALUE>',
                 description: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"amount\":0,\"withCompleteDepositDonation\":\"<ADD STRING VALUE>\",\"withAction\":\"<ADD STRING VALUE>\",\"fromAccountIBAN\":\"<ADD STRING VALUE>\",\"toAccountIBAN\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"amount\":0,\"withCompleteDepositDonation\":\"<ADD
            STRING VALUE>\",\"withAction\":\"<ADD STRING
            VALUE>\",\"fromAccountIBAN\":\"<ADD STRING
            VALUE>\",\"toAccountIBAN\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"amount\":0,\"withCompleteDepositDonation\":\"<ADD
            STRING VALUE>\",\"withAction\":\"<ADD STRING
            VALUE>\",\"fromAccountIBAN\":\"<ADD STRING
            VALUE>\",\"toAccountIBAN\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/account/transfer \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"amount":0,"withCompleteDepositDonation":"<ADD STRING VALUE>","withAction":"<ADD STRING VALUE>","fromAccountIBAN":"<ADD STRING VALUE>","toAccountIBAN":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>"}'
  '/sandbox/{sandbox_id}/cmscontent/content':
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: request
          description: "- tag: The tag name that the content belongs\r\n- title: content title.\r\n- body: The content\r\n- summary: A short description of the content"
          schema:
            $ref: '#/definitions/CmsArticleRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Sandbox_CreateArticle
      summary: Create content
      description: "This call is used to create content(Article) in CMS.\r\n\r\n\r\nSample request:\r\n            \r\n    POST /sandbox/{sandbox_id}/cmscontent/content\r\n    {\r\n        \"tag\": \"Action_therapydogs\",\r\n        \"title\": \"My new great article\",\r\n        \"body\": \"This is test body text for my article.\",\r\n        \"summary\": \"A short description of my article\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"tag\":\"<ADD STRING
            VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD STRING
            VALUE>\",\"summary\":\"<ADD STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"tag\":\"<ADD STRING
            VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD STRING
            VALUE>\",\"summary\":\"<ADD STRING VALUE>\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content\"\n\n\tpayload := strings.NewReader(\"{\\\"tag\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\",\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"summary\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"tag\":\"<ADD
            STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD
            STRING VALUE>\",\"summary\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { tag: '<ADD STRING VALUE>',
                 title: '<ADD STRING VALUE>',
                 body: '<ADD STRING VALUE>',
                 summary: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"tag\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"tag\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING
            VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"tag\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD
            STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"tag":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>","body":"<ADD STRING VALUE>","summary":"<ADD STRING VALUE>"}'
  '/sandbox/{sandbox_id}/cmscontent/content/{contentId}':
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: request
          description: "- title: content title.\r\n- body: The content\r\n- summary: A short description of the content\r\n- image: (optional)"
          schema:
            $ref: '#/definitions/CmsArticleRequestUpdate'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox id
          in: path
          required: true
          type: string
        - name: contentId
          description: Content id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Sandbox_UpdateArticle
      summary: Update content
      description: "This call is used to update an existing content specified by the <b>contentId</b>.\r\n\r\n\r\nSample request:\r\n            \r\n    PUT /sandbox/{sandbox_id}/cmscontent/content/{contentId}\r\n    {\r\n        \"title\": \"My new great article\",\r\n        \"body\": \"This is test body text for my article.\",\r\n        \"summary\": \"A short description of my article\",\r\n        \"image\" : {\r\n                    \"alt\": \"Article image\",\r\n                    \"title\": \"Image title\",\r\n                    \"url\" : \"https://www.nbg.gr/Style%20Library/images/logo.png\"\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"title\":\"<ADD STRING
            VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"image\":{\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\"}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"title\":\"<ADD STRING
            VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"image\":{\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\"}}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"title\\\":\\\"<ADD STRING VALUE>\\\",\\\"body\\\":\\\"<ADD STRING VALUE>\\\",\\\"summary\\\":\\\"<ADD STRING VALUE>\\\",\\\"image\\\":{\\\"alt\\\":\\\"<ADD STRING VALUE>\\\",\\\"title\\\":\\\"<ADD STRING VALUE>\\\",\\\"url\\\":\\\"<ADD STRING VALUE>\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"title\":\"<ADD
            STRING VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD
            STRING VALUE>\",\"image\":{\"alt\":\"<ADD STRING
            VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"url\":\"<ADD STRING
            VALUE>\"}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { title: '<ADD STRING VALUE>',
                 body: '<ADD STRING VALUE>',
                 summary: '<ADD STRING VALUE>',
                 image:
                  { alt: '<ADD STRING VALUE>',
                    title: '<ADD STRING VALUE>',
                    url: '<ADD STRING VALUE>' } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD STRING VALUE>\",\"summary\":\"<ADD STRING VALUE>\",\"image\":{\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\"}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD STRING
            VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"image\":{\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\"}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"title\":\"<ADD STRING VALUE>\",\"body\":\"<ADD
            STRING VALUE>\",\"summary\":\"<ADD STRING
            VALUE>\",\"image\":{\"alt\":\"<ADD STRING VALUE>\",\"title\":\"<ADD
            STRING VALUE>\",\"url\":\"<ADD STRING VALUE>\"}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --data '{"title":"<ADD STRING VALUE>","body":"<ADD STRING VALUE>","summary":"<ADD STRING VALUE>","image":{"alt":"<ADD STRING VALUE>","title":"<ADD STRING VALUE>","url":"<ADD STRING VALUE>"}}'
    delete:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Sandbox
      parameters:
        - name: sandbox_id
          description: Sandbox id
          in: path
          required: true
          type: string
        - name: contentId
          description: Content id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Sandbox_DeleteArticle
      summary: Delete content
      description: "This call is used to delete a content specified by <b>contentId</b>.\r\n\r\nReturns true when deletion is successful."
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D")
              .delete(null)
              .addHeader("content-type", "application/json")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'DELETE',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("DELETE",
            "/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Delete.new(url)

            request["content-type"] = 'application/json'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request DELETE \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/sandbox/%7Bsandbox_id%7D/cmscontent/content/%7BcontentId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json'
  '/accounts/{accountId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Account
      parameters:
        - name: accountId
          description: Account ID (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[AccountInfoResponse]'
      operationId: Account_GetAccount
      summary: Get Account details
      description: >-
        Returns public information data of the account specified by the
        <b>accountId</b>.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/accounts/%7BaccountId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /action/actions:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ActionsDataResponse]'
      operationId: Action_GetAllActionsSensitiveData
      summary: Get all actions
      description: This call is used to retrieve all actions.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/actions",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/action/actions/{actionId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ActionDataResponse]'
      operationId: Action_GetActionData
      summary: Get action
      description: >-
        This call is used to get details of an action specified by <b>action
        id</b>.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/action/actions/{actionId}/account':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[AccountInfoResponse]'
      operationId: Action_GetActionAccountData
      summary: Get account details for an action
      description: >-
        This call is used to get account information of an action specified by
        action id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/account \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/action/actions/{actionId}/donations':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromisesResponseWall]'
      operationId: Action_GetDonationPromises
      summary: Get donation promises for an action
      description: >-
        This call is used to get all the donation promises for a specific
        action.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: request
          description: Donation promise data
          schema:
            $ref: '#/definitions/DonationPromisesRequest'
          in: body
          required: true
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromiseResponse]'
      operationId: Action_PostDonationPromise
      summary: Post donation promise
      description: "This call is used to create a donation promise for a specific action. \r\nPaytype must be either \"Card\" or \"Deposit\"\r\n\r\n\r\nSample request:\r\n            \r\n    POST /action/actions/{actionId}/donations\r\n    {\r\n        \"payType\": \"Card\",\r\n        \"publish\": true,\r\n        \"xpAmount\": 100,\r\n        \"displayName\": \"First name, last name\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"payType\":\"<ADD
            STRING
            VALUE>\",\"publish\":false,\"xpAmount\":0,\"displayName\":\"<ADD
            STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"payType\":\"<ADD STRING
            VALUE>\",\"publish\":false,\"xpAmount\":0,\"displayName\":\"<ADD
            STRING VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations\"\n\n\tpayload := strings.NewReader(\"{\\\"payType\\\":\\\"<ADD STRING VALUE>\\\",\\\"publish\\\":false,\\\"xpAmount\\\":0,\\\"displayName\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"payType\":\"<ADD STRING
            VALUE>\",\"publish\":false,\"xpAmount\":0,\"displayName\":\"<ADD
            STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { payType: '<ADD STRING VALUE>',
                 publish: false,
                 xpAmount: 0,
                 displayName: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"payType\":\"<ADD STRING VALUE>\",\"publish\":false,\"xpAmount\":0,\"displayName\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"payType\":\"<ADD STRING
            VALUE>\",\"publish\":false,\"xpAmount\":0,\"displayName\":\"<ADD
            STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"payType\":\"<ADD STRING
            VALUE>\",\"publish\":false,\"xpAmount\":0,\"displayName\":\"<ADD
            STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"payType":"<ADD STRING VALUE>","publish":false,"xpAmount":0,"displayName":"<ADD STRING VALUE>"}'
  '/action/actions/{actionId}/donations/{donationPromiseId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: donationPromiseId
          description: Donation promise id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromiseResponse]'
      operationId: Action_GetDonationPromise
      summary: Get donation promise
      description: "This call is used to get details for the donation promise specified by <b>donation promise id</b> and\r\n<b>Action id</b>."
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/action/actions/{actionId}/donations/{donationPromiseId}/datacash':
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: request
          description: card data
          schema:
            $ref: '#/definitions/DatacashRequest'
          in: body
          required: true
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: donationPromiseId
          description: Donation promise id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DatacashReferenceResponse]'
      operationId: Action_PostDatacash
      summary: Datacash payment for an action
      description: "Returns datacash referense number...\r\n\r\n\r\nSample request:\r\n            \r\n    POST /Datacash payment\r\n    {\r\n        \"amount\": 100,\r\n        \"cardProduct\": {\r\n            \"type\": \"card\",\r\n            \"number\": \"5278900020308586\",\r\n            \"details\": {\r\n                \"cvv\": \"000\",\r\n                \"cardHolder\": \"Επωνυμία Επιχ.\",\r\n                \"expiryDate\": \"05/20\"\r\n            }\r\n        }\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"amount\":0,\"cardProduct\":{\"type\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"details\":{\"cvv\":\"<ADD STRING
            VALUE>\",\"cardHolder\":\"<ADD STRING VALUE>\",\"expiryDate\":\"<ADD
            STRING VALUE>\"}}}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json",
            "{\"amount\":0,\"cardProduct\":{\"type\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"details\":{\"cvv\":\"<ADD STRING
            VALUE>\",\"cardHolder\":\"<ADD STRING VALUE>\",\"expiryDate\":\"<ADD
            STRING VALUE>\"}}}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash\"\n\n\tpayload := strings.NewReader(\"{\\\"amount\\\":0,\\\"cardProduct\\\":{\\\"type\\\":\\\"<ADD STRING VALUE>\\\",\\\"number\\\":\\\"<ADD STRING VALUE>\\\",\\\"details\\\":{\\\"cvv\\\":\\\"<ADD STRING VALUE>\\\",\\\"cardHolder\\\":\\\"<ADD STRING VALUE>\\\",\\\"expiryDate\\\":\\\"<ADD STRING VALUE>\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"amount\":0,\"cardProduct\":{\"type\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"details\":{\"cvv\":\"<ADD STRING
            VALUE>\",\"cardHolder\":\"<ADD STRING VALUE>\",\"expiryDate\":\"<ADD
            STRING VALUE>\"}}}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { amount: 0,
                 cardProduct:
                  { type: '<ADD STRING VALUE>',
                    number: '<ADD STRING VALUE>',
                    details:
                     { cvv: '<ADD STRING VALUE>',
                       cardHolder: '<ADD STRING VALUE>',
                       expiryDate: '<ADD STRING VALUE>' } } },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"amount\":0,\"cardProduct\":{\"type\":\"<ADD STRING VALUE>\",\"number\":\"<ADD STRING VALUE>\",\"details\":{\"cvv\":\"<ADD STRING VALUE>\",\"cardHolder\":\"<ADD STRING VALUE>\",\"expiryDate\":\"<ADD STRING VALUE>\"}}}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"amount\":0,\"cardProduct\":{\"type\":\"<ADD STRING
            VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"details\":{\"cvv\":\"<ADD STRING
            VALUE>\",\"cardHolder\":\"<ADD STRING VALUE>\",\"expiryDate\":\"<ADD
            STRING VALUE>\"}}}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"amount\":0,\"cardProduct\":{\"type\":\"<ADD
            STRING VALUE>\",\"number\":\"<ADD STRING
            VALUE>\",\"details\":{\"cvv\":\"<ADD STRING
            VALUE>\",\"cardHolder\":\"<ADD STRING VALUE>\",\"expiryDate\":\"<ADD
            STRING VALUE>\"}}}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/datacash \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"amount":0,"cardProduct":{"type":"<ADD STRING VALUE>","number":"<ADD STRING VALUE>","details":{"cvv":"<ADD STRING VALUE>","cardHolder":"<ADD STRING VALUE>","expiryDate":"<ADD STRING VALUE>"}}}'
  '/action/actions/{actionId}/donations/{donationPromiseId}/receipt/{langId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: donationPromiseId
          description: Donation promise id (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: langId
          description: 'Language id (''el'' for Greek, ''en'' for English)'
          in: path
          required: true
          type: string
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            type: object
      operationId: Action_GetDonationPromiseForReceipt
      summary: Get receipt for donation promise
      description: This call is used to export receipt for a donation in PDF format.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/donations/%7BdonationPromiseId%7D/receipt/%7BlangId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/action/actions/{actionId}/newsletterusers':
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          description: "Update data: \r\n            - Active =&gt; Bool"
          schema:
            $ref: '#/definitions/NewsletterUserRequestUpdate'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Action_UpdateNewsletterUser
      summary: Update newsletter user access
      description: >-
        Sets the user as <b>inactive</b> or <b>active</b> for newsletter of the
        action specified by actionId.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"active\":false}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"active\":false}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers\"\n\n\tpayload := strings.NewReader(\"{\\\"active\\\":false}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"active\":false}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body: { active: false },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"active\":false}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"active\":false}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"active\":false}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"active":false}'
    post:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[NewsletterUser]'
      operationId: Action_PostNewsletterUser
      summary: Register newsletter user
      description: >-
        Register a user to receive the newsletter of the action specified by
        Action Id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers")
              .post(null)
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/actions/%7BactionId%7D/newsletterusers \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /action/contactus:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: request
          description: Contact us data
          schema:
            $ref: '#/definitions/ContactUsRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ContactUsResponse]'
      operationId: Action_PostContactUs
      summary: Insert "contact us"
      description: "Create a \"contact us\" entry.\r\n\r\n\r\nSample request:\r\n            \r\n    POST /Insert contact us\r\n    {\r\n        \"surname\": \"Φωτεινός\",\r\n        \"firstname\": \"Φώτης\",\r\n        \"email\": \"user5@test.test\",\r\n        \"message\": \"Test message...\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"surname\":\"<ADD
            STRING VALUE>\",\"firstname\":\"<ADD STRING
            VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD STRING
            VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"surname\":\"<ADD STRING
            VALUE>\",\"firstname\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"message\":\"<ADD STRING VALUE>\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus\"\n\n\tpayload := strings.NewReader(\"{\\\"surname\\\":\\\"<ADD STRING VALUE>\\\",\\\"firstname\\\":\\\"<ADD STRING VALUE>\\\",\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"message\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD STRING
            VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD STRING
            VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { surname: '<ADD STRING VALUE>',
                 firstname: '<ADD STRING VALUE>',
                 email: '<ADD STRING VALUE>',
                 message: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"surname\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"email\":\"<ADD STRING VALUE>\",\"message\":\"<ADD
            STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/action/contactus", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"surname\":\"<ADD STRING
            VALUE>\",\"firstname\":\"<ADD STRING VALUE>\",\"email\":\"<ADD
            STRING VALUE>\",\"message\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/contactus \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"surname":"<ADD STRING VALUE>","firstname":"<ADD STRING VALUE>","email":"<ADD STRING VALUE>","message":"<ADD STRING VALUE>"}'
  /action/donations:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromisesResponse]'
      operationId: Action_GetDonationPromisesForUser
      summary: Get donation promises for user
      description: >-
        This call is used to get all the donation promises for the logged in
        user.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/donations",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /action/donations/wall:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromisesResponseWall]'
      operationId: Action_GetDonationPromisesForWall
      summary: Get donation promises for wall
      description: "This call is used to get all published, completed(paid) donation promises for specific date range.\r\n            \r\nThe following http headers must be include in this call:\r\n- from_date (DD.MM.YYY)\r\n- to_date (DD.MM.YYYY)"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/donations/wall",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/donations/wall \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /action/thematicareas:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ThematicAreasResponse]'
      operationId: Action_GetAllThematicAreas
      summary: Get all thematic areas
      description: This call is used to get the details for all the thematic areas.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/thematicareas",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/action/thematicareas/{thematicAreaId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: thematicAreaId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ThematicAreaResponse]'
      operationId: Action_GetThematicArea
      summary: Get data for a thematic area
      description: >-
        This call is used to get the data for the thematic area specified by
        thematic area id.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/thematicareas/%7BthematicAreaId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /action/users/info:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Action
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[UserDataResponse]'
      operationId: Action_GetLoggedinUser
      summary: Get logged in user details
      description: Returns details for the logged in user.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/action/users/info",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/action/users/info \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /backoffice/accounts:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[AccountsResponse]'
      operationId: Backoffice_GetAccounts
      summary: Get Accounts
      description: This call is used to retrieve all accounts.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/accounts",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: "- accountNumber: The account number <br />\r\nThe length must be 11 digits.\r\n- accountDescription: Description of account <br />"
          schema:
            $ref: '#/definitions/AccountDbRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Backoffice_PostAccount
      summary: Create Account
      description: "This call is used to create a new account.\r\n\r\n\r\nSample request:\r\n            \r\n    POST /backoffice/accounts\r\n    {\r\n        \"accountNumber\": \"94200124322\",\r\n        \"description\": \"Περιγραφή λογαριασμού\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"accountNumber\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"accountNumber\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts\"\n\n\tpayload := strings.NewReader(\"{\\\"accountNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"accountNumber\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { accountNumber: '<ADD STRING VALUE>',
                 description: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"accountNumber\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"accountNumber\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/accounts", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"accountNumber\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"accountNumber":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>"}'
  '/backoffice/accounts/{accountId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: accountId
          description: Account ID (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[AccountResponse]'
      operationId: Backoffice_GetAccount
      summary: Get Account
      description: Get details of an account specified by <b>accountId</b>.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: " - accountNumber: The account number <br />\r\n The length must be 11 digits.\r\n- accountDescription: Description of account <br />"
          schema:
            $ref: '#/definitions/AccountUpdateRequest'
          in: body
          required: true
        - name: accountId
          description: Account id (Must be UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Backoffice_PutAccount
      summary: Update Account
      description: "This call is used to update the data of an existing account.\r\n\r\n\r\nSample request:\r\n            \r\n    PUT /backoffice/accounts/{accountId}\r\n    {\r\n        \"accountNumber\": \"94200122540\",\r\n        \"description\": \"Περιγραφή λογαριασμού 00000\",\r\n        \"iban\":\"GR6001109420000094200122540\",\r\n        \"status\":\"Active\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"accountNumber\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"accountNumber\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING
            VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"accountNumber\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"iban\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"accountNumber\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"status\":\"<ADD
            STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { accountNumber: '<ADD STRING VALUE>',
                 description: '<ADD STRING VALUE>',
                 iban: '<ADD STRING VALUE>',
                 status: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"accountNumber\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"accountNumber\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"accountNumber\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"iban\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"accountNumber":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","iban":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>"}'
  '/backoffice/accounts/{accountId}/transactions':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: accountId
          description: Account ID (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[TransactionResponse]'
      operationId: Backoffice_GetTransactions
      summary: Get account transactions
      description: "Retrieve list of transactions of the account with accountId and for a specific range date. <br />\r\nThe following header parameters are required:\r\n- from_date (dd.MM.yyyy)\r\n- to_date   (dd.MM.yyyy)"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/accounts/%7BaccountId%7D/transactions \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /backoffice/actions:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ActionsDataResponseFull]'
      operationId: Backoffice_GetAllActions
      summary: Get all actions (Backoffice)
      description: This call is used to get all actions.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/actions",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Action data
          schema:
            $ref: '#/definitions/ActionDataRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ActionDataResponseFull]'
      operationId: Backoffice_PostActionData
      summary: Create action
      description: "This call is used to create an action with sensitive data.\r\n            \r\nIn order to get account ids, call the endpoint 'Get accounts' (GET /backoffice/accounts )\r\n\r\n\r\nSample request:\r\n            \r\n    POST /backoffice/actions\r\n    {\r\n        \"actionName\": \"My action example 2\",\r\n        \"accountKey\": \"ece26104-ce1b-4c2d-829b-5d01dd921f48\",\r\n        \"cardsAccountKey\": \"e2554977-c1d1-47c0-8c9b-f493a2a88263\",\r\n        \"dateStart\": \"2018-02-15T16:10:09.042Z\",\r\n        \"dateEnd\": \"2019-02-15T16:10:09.042Z\",\r\n        \"offsetAmount\": 150,\r\n        \"targetAmount\": 20000,\r\n        \"merchantDataId\":\"\",\r\n        \"publicAmount\": 0\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"actionName\":\"<ADD
            STRING VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"actionName\":\"<ADD
            STRING VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions\"\n\n\tpayload := strings.NewReader(\"{\\\"actionName\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"cardsAccountKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"dateStart\\\":\\\"<ADD STRING VALUE>\\\",\\\"dateEnd\\\":\\\"<ADD STRING VALUE>\\\",\\\"offsetAmount\\\":0,\\\"targetAmount\\\":0,\\\"merchantDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"publicAmount\\\":0}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { actionName: '<ADD STRING VALUE>',
                 accountKey: '<ADD STRING VALUE>',
                 cardsAccountKey: '<ADD STRING VALUE>',
                 dateStart: '<ADD STRING VALUE>',
                 dateEnd: '<ADD STRING VALUE>',
                 offsetAmount: 0,
                 targetAmount: 0,
                 merchantDataId: '<ADD STRING VALUE>',
                 publicAmount: 0 },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD STRING VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD STRING VALUE>\",\"publicAmount\":0}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"actionName\":\"<ADD STRING
            VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/actions", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"actionName\":\"<ADD STRING
            VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"actionName":"<ADD STRING VALUE>","accountKey":"<ADD STRING VALUE>","cardsAccountKey":"<ADD STRING VALUE>","dateStart":"<ADD STRING VALUE>","dateEnd":"<ADD STRING VALUE>","offsetAmount":0,"targetAmount":0,"merchantDataId":"<ADD STRING VALUE>","publicAmount":0}'
  '/backoffice/actions/{actionId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ActionDataResponseFull]'
      operationId: Backoffice_GetAction
      summary: Get action (Backoffice)
      description: This call is used to get data of an action specified by <b>actionId</b>.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Action data
          schema:
            $ref: '#/definitions/ActionDataUpdateRequest'
          in: body
          required: true
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ActionDataResponseFull]'
      operationId: Backoffice_PutActionData
      summary: Update action
      description: "This call is used to update the data of an action.\r\n\r\n\r\nSample request:\r\n            \r\n    PUT /Update data for an action\r\n    {\r\n        \"actionName\": \"My action example 2\",\r\n        \"actionShortName\": \"Action_myactionexample2\",\r\n        \"accountKey\": \"ece26104-ce1b-4c2d-829b-5d01dd921f48\",\r\n        \"cardsAccountKey\": \"e2554977-c1d1-47c0-8c9b-f493a2a88263\",\r\n        \"dateStart\": \"2018-02-15T16:10:09.042Z\",\r\n        \"dateEnd\": \"2019-02-15T16:10:09.042Z\",\r\n        \"offsetAmount\": 0,\r\n        \"targetAmount\": 50000,\r\n        \"status\": \"Active\",\r\n        \"merchantDataId\":\"\",\r\n        \"publicAmount\": 5000\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"status\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"status\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionName\\\":\\\"<ADD STRING VALUE>\\\",\\\"accountKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"cardsAccountKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"dateStart\\\":\\\"<ADD STRING VALUE>\\\",\\\"dateEnd\\\":\\\"<ADD STRING VALUE>\\\",\\\"offsetAmount\\\":0,\\\"targetAmount\\\":0,\\\"merchantDataId\\\":\\\"<ADD STRING VALUE>\\\",\\\"publicAmount\\\":0}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"status\":\"<ADD
            STRING VALUE>\",\"actionName\":\"<ADD STRING
            VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { status: '<ADD STRING VALUE>',
                 actionName: '<ADD STRING VALUE>',
                 accountKey: '<ADD STRING VALUE>',
                 cardsAccountKey: '<ADD STRING VALUE>',
                 dateStart: '<ADD STRING VALUE>',
                 dateEnd: '<ADD STRING VALUE>',
                 offsetAmount: 0,
                 targetAmount: 0,
                 merchantDataId: '<ADD STRING VALUE>',
                 publicAmount: 0 },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"status\":\"<ADD STRING VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD STRING VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD STRING VALUE>\",\"publicAmount\":0}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"status\":\"<ADD STRING VALUE>\",\"actionName\":\"<ADD
            STRING VALUE>\",\"accountKey\":\"<ADD STRING
            VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"status\":\"<ADD STRING
            VALUE>\",\"actionName\":\"<ADD STRING VALUE>\",\"accountKey\":\"<ADD
            STRING VALUE>\",\"cardsAccountKey\":\"<ADD STRING
            VALUE>\",\"dateStart\":\"<ADD STRING VALUE>\",\"dateEnd\":\"<ADD
            STRING
            VALUE>\",\"offsetAmount\":0,\"targetAmount\":0,\"merchantDataId\":\"<ADD
            STRING VALUE>\",\"publicAmount\":0}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"status":"<ADD STRING VALUE>","actionName":"<ADD STRING VALUE>","accountKey":"<ADD STRING VALUE>","cardsAccountKey":"<ADD STRING VALUE>","dateStart":"<ADD STRING VALUE>","dateEnd":"<ADD STRING VALUE>","offsetAmount":0,"targetAmount":0,"merchantDataId":"<ADD STRING VALUE>","publicAmount":0}'
  '/backoffice/actions/{actionId}/newsletterusers':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[NewsletterUsersResponse]'
      operationId: Backoffice_GetNewsletterUsers
      summary: Get newsletter users
      description: >-
        Returns the registered newsletter users of the action specified by
        actionId.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/backoffice/actions/{actionId}/newsletterusers/{userId}':
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: userId
          description: User id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: actionId
          description: Action id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: request
          description: "Update data: \r\n            - Active =&gt; Bool"
          schema:
            $ref: '#/definitions/NewsletterUserRequestUpdate'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Backoffice_UpdateNewsletterUser
      summary: Update newsletter user
      description: >-
        Sets the user specified by userId as <b>inactive</b> or <b>active</b>
        from the newsletter list of the action specified by actionId.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"active\":false}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"active\":false}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"active\\\":false}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"active\":false}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body: { active: false },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"active\":false}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"active\":false}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"active\":false}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/actions/%7BactionId%7D/newsletterusers/%7BuserId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"active":false}'
  /backoffice/alerts:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[AlertsResponse]'
      operationId: Backoffice_GetAllAlerts
      summary: Get all alerts
      description: Returns all alerts.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/alerts",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Alert data
          schema:
            $ref: '#/definitions/AlertRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[BoolResponse]'
      operationId: Backoffice_PostAlert
      summary: Insert alert
      description: "Creates a new alert. <br />\r\nSource type values: \r\n- Batch \r\n- UI \r\n- Api\r\n<br />Type fields values:\r\n- Green\r\n- Yellow\r\n- Orange\r\n- Red\r\n\r\n\r\nSample request:\r\n            \r\n    POST /Create alert\r\n    {\r\n        \"name\": \"Alert name_875\",\r\n        \"type\": \"Red\",\r\n        \"description\": \"Alert description\",\r\n        \"tags\": \"tags\",\r\n        \"sourceType\": \"UI\",\r\n        \"sourceClient\": \"ef426224-3677-416f-afc3-7a9921de53d4\",\r\n        \"sourceDescription\": \"Source_ef426224-3677-416f-afc3-7a9921de53d4_1527079253\"\r\n   }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"name\":\"<ADD STRING
            VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"tags\":\"<ADD STRING
            VALUE>\",\"sourceType\":\"<ADD STRING
            VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"name\":\"<ADD STRING
            VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"tags\":\"<ADD STRING
            VALUE>\",\"sourceType\":\"<ADD STRING
            VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"type\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"tags\\\":\\\"<ADD STRING VALUE>\\\",\\\"sourceType\\\":\\\"<ADD STRING VALUE>\\\",\\\"sourceClient\\\":\\\"<ADD STRING VALUE>\\\",\\\"sourceDescription\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<ADD
            STRING VALUE>\",\"type\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"tags\":\"<ADD
            STRING VALUE>\",\"sourceType\":\"<ADD STRING
            VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { name: '<ADD STRING VALUE>',
                 type: '<ADD STRING VALUE>',
                 description: '<ADD STRING VALUE>',
                 tags: '<ADD STRING VALUE>',
                 sourceType: '<ADD STRING VALUE>',
                 sourceClient: '<ADD STRING VALUE>',
                 sourceDescription: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD STRING VALUE>\",\"sourceClient\":\"<ADD STRING VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"tags\":\"<ADD
            STRING VALUE>\",\"sourceType\":\"<ADD STRING
            VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/alerts", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"name\":\"<ADD STRING VALUE>\",\"type\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"tags\":\"<ADD STRING VALUE>\",\"sourceType\":\"<ADD
            STRING VALUE>\",\"sourceClient\":\"<ADD STRING
            VALUE>\",\"sourceDescription\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"name":"<ADD STRING VALUE>","type":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","tags":"<ADD STRING VALUE>","sourceType":"<ADD STRING VALUE>","sourceClient":"<ADD STRING VALUE>","sourceDescription":"<ADD STRING VALUE>"}'
  '/backoffice/alerts/{alertId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: alertId
          description: Alert id (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[AlertResponse]'
      operationId: Backoffice_GetAlert
      summary: Get alert
      description: Returns details for an alert specified by alert id (uuid).
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/alerts/%7BalertId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /backoffice/contactus:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ContactUsResponseEntries]'
      operationId: Backoffice_GetAllContactUsEntries
      summary: Get all "contact us" entries
      description: Returns all "contact us" entries.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/contactus",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/contactus \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /backoffice/donations:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromisesResponse]'
      operationId: Backoffice_GetDonationPromises
      summary: Get all donation promises
      description: "Returns all donation promises for specific date range.<br />\r\nThe following header parameters are required:\r\n- from_date (dd.MM.yyyy)\r\n- to_date   (dd.MM.yyyy)"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/donations",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/backoffice/donations/{donationPromiseId}':
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Donation promise data
          schema:
            $ref: '#/definitions/DonationPromise'
          in: body
          required: true
        - name: donationPromiseId
          description: Donation promise id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[DonationPromiseResponse]'
      operationId: Backoffice_PutDonationPromise
      summary: Update a donation promise
      description: "This call is used to update a donation promise. \r\n\r\n\r\nSample request:\r\n            \r\n    PUT /Update donation promise\r\n    {\r\n        \"categoryMoneyFound\": \"\",\r\n        \"actionKey\": \"211B6578-5B09-4E92-B7BD-0669140F546D\",\r\n        \"donationTime\": \"2018-02-15T16:10:09.081Z\",\r\n        \"payType\": \"Card\",\r\n        \"publish\": true,\r\n        \"theChallenge\": \"12345678\",\r\n        \"transactionKey\": \"bba11fe7-e460-4e74-b3da-c05655822609_2017-12-07T14:19:34\",\r\n        \"transactionReceiptKey\": \"bba11fe7-e460-4e74-b3da-c05655822609_2017\",\r\n        \"userKey\": \"sandboxuser1\",\r\n        \"xpAmount\": 100,\r\n        \"status\": \"Canceled_By_User\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS,
            "{\"donationPromiseId\":\"<ADD STRING VALUE>\",\"actionKey\":\"<ADD
            STRING VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json",
            "{\"donationPromiseId\":\"<ADD STRING VALUE>\",\"actionKey\":\"<ADD
            STRING VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"donationPromiseId\\\":\\\"<ADD STRING VALUE>\\\",\\\"actionKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"categoryMoneyFound\\\":\\\"<ADD STRING VALUE>\\\",\\\"donationTime\\\":\\\"<ADD STRING VALUE>\\\",\\\"payType\\\":\\\"<ADD STRING VALUE>\\\",\\\"publish\\\":false,\\\"theChallenge\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"transactionReceiptKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"userKey\\\":\\\"<ADD STRING VALUE>\\\",\\\"xpAmount\\\":0,\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"displayName\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"donationPromiseId\":\"<ADD STRING VALUE>\",\"actionKey\":\"<ADD
            STRING VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { donationPromiseId: '<ADD STRING VALUE>',
                 actionKey: '<ADD STRING VALUE>',
                 categoryMoneyFound: '<ADD STRING VALUE>',
                 donationTime: '<ADD STRING VALUE>',
                 payType: '<ADD STRING VALUE>',
                 publish: false,
                 theChallenge: '<ADD STRING VALUE>',
                 transactionKey: '<ADD STRING VALUE>',
                 transactionReceiptKey: '<ADD STRING VALUE>',
                 userKey: '<ADD STRING VALUE>',
                 xpAmount: 0,
                 status: '<ADD STRING VALUE>',
                 displayName: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"donationPromiseId\":\"<ADD STRING VALUE>\",\"actionKey\":\"<ADD STRING VALUE>\",\"categoryMoneyFound\":\"<ADD STRING VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING VALUE>\",\"transactionKey\":\"<ADD STRING VALUE>\",\"transactionReceiptKey\":\"<ADD STRING VALUE>\",\"userKey\":\"<ADD STRING VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"donationPromiseId\":\"<ADD STRING
            VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"donationPromiseId\":\"<ADD STRING
            VALUE>\",\"actionKey\":\"<ADD STRING
            VALUE>\",\"categoryMoneyFound\":\"<ADD STRING
            VALUE>\",\"donationTime\":\"<ADD STRING VALUE>\",\"payType\":\"<ADD
            STRING VALUE>\",\"publish\":false,\"theChallenge\":\"<ADD STRING
            VALUE>\",\"transactionKey\":\"<ADD STRING
            VALUE>\",\"transactionReceiptKey\":\"<ADD STRING
            VALUE>\",\"userKey\":\"<ADD STRING
            VALUE>\",\"xpAmount\":0,\"status\":\"<ADD STRING
            VALUE>\",\"displayName\":\"<ADD STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/donations/%7BdonationPromiseId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"donationPromiseId":"<ADD STRING VALUE>","actionKey":"<ADD STRING VALUE>","categoryMoneyFound":"<ADD STRING VALUE>","donationTime":"<ADD STRING VALUE>","payType":"<ADD STRING VALUE>","publish":false,"theChallenge":"<ADD STRING VALUE>","transactionKey":"<ADD STRING VALUE>","transactionReceiptKey":"<ADD STRING VALUE>","userKey":"<ADD STRING VALUE>","xpAmount":0,"status":"<ADD STRING VALUE>","displayName":"<ADD STRING VALUE>"}'
  /backoffice/merchants:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[MerchantsResponse]'
      operationId: Backoffice_GetAllMerchants
      summary: Get all merchants
      description: Returns details for all merchants.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/merchants",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Merchant data
          schema:
            $ref: '#/definitions/MerchantInsertRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[MerchantResponse]'
      operationId: Backoffice_PostMerchant
      summary: Insert merchant
      description: "Creates a new merchant. The default status is active.\r\n\r\n\r\nSample request:\r\n            \r\n    POST /Insert merchant\r\n    {\r\n        \"merchantId\": \"12345678910\",\r\n        \"merchantName\": \"Demo Merchant\",\r\n        \"username\": \"12345678\",\r\n        \"password\": \"87654321\",\r\n        \"merchantUrl\": \"www.demo.com\",\r\n        \"required3DSecure\": false\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"merchantId\":\"<ADD
            STRING VALUE>\",\"merchantName\":\"<ADD STRING
            VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"password\":\"<ADD
            STRING VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"merchantId\":\"<ADD
            STRING VALUE>\",\"merchantName\":\"<ADD STRING
            VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"password\":\"<ADD
            STRING VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants\"\n\n\tpayload := strings.NewReader(\"{\\\"merchantId\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantName\\\":\\\"<ADD STRING VALUE>\\\",\\\"username\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantUrl\\\":\\\"<ADD STRING VALUE>\\\",\\\"required3DSecure\\\":false}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType,
            "{\"merchantId\":\"<ADD STRING VALUE>\",\"merchantName\":\"<ADD
            STRING VALUE>\",\"username\":\"<ADD STRING
            VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD
            STRING VALUE>\",\"required3DSecure\":false}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { merchantId: '<ADD STRING VALUE>',
                 merchantName: '<ADD STRING VALUE>',
                 username: '<ADD STRING VALUE>',
                 password: '<ADD STRING VALUE>',
                 merchantUrl: '<ADD STRING VALUE>',
                 required3DSecure: false },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"merchantId\":\"<ADD STRING VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD STRING VALUE>\",\"required3DSecure\":false}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/merchants", payload,
            headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"merchantId":"<ADD STRING VALUE>","merchantName":"<ADD STRING VALUE>","username":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","merchantUrl":"<ADD STRING VALUE>","required3DSecure":false}'
  '/backoffice/merchants/{merchantId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: merchantId
          description: Merchant id (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[MerchantResponse]'
      operationId: Backoffice_GetMerchant
      summary: Get merchant
      description: Returns details for a merchant specified by merchant id (uuid).
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Merchant data
          schema:
            $ref: '#/definitions/MerchantUpdateRequest'
          in: body
          required: true
        - name: merchantId
          description: Merchant id (uuid)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[MerchantResponse]'
      operationId: Backoffice_PutMerchant
      summary: Update merchant
      description: "Updates a merchant specified by merchant id.\r\n\r\n\r\nSample request:\r\n            \r\n    PUT /Update merchant\r\n    {\r\n        \"merchantId\": \"7003749\",\r\n        \"merchantName\": \"ACT4GREECE Update!!!!\",\r\n        \"username\": \"423423423\",\r\n        \"password\": \"ffffgggg\",\r\n        \"status\": \"Inactive\",\r\n        \"merchantUrl\": \"www.demo.gr\",\r\n        \"required3DSecure\": false\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"status\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"status\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantId\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantName\\\":\\\"<ADD STRING VALUE>\\\",\\\"username\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\",\\\"merchantUrl\\\":\\\"<ADD STRING VALUE>\\\",\\\"required3DSecure\\\":false}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"status\":\"<ADD
            STRING VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { status: '<ADD STRING VALUE>',
                 merchantId: '<ADD STRING VALUE>',
                 merchantName: '<ADD STRING VALUE>',
                 username: '<ADD STRING VALUE>',
                 password: '<ADD STRING VALUE>',
                 merchantUrl: '<ADD STRING VALUE>',
                 required3DSecure: false },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"status\":\"<ADD STRING VALUE>\",\"merchantId\":\"<ADD STRING VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\",\"merchantUrl\":\"<ADD STRING VALUE>\",\"required3DSecure\":false}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"status\":\"<ADD STRING VALUE>\",\"merchantId\":\"<ADD
            STRING VALUE>\",\"merchantName\":\"<ADD STRING
            VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"password\":\"<ADD
            STRING VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"status\":\"<ADD STRING
            VALUE>\",\"merchantId\":\"<ADD STRING
            VALUE>\",\"merchantName\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"password\":\"<ADD STRING
            VALUE>\",\"merchantUrl\":\"<ADD STRING
            VALUE>\",\"required3DSecure\":false}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/merchants/%7BmerchantId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"status":"<ADD STRING VALUE>","merchantId":"<ADD STRING VALUE>","merchantName":"<ADD STRING VALUE>","username":"<ADD STRING VALUE>","password":"<ADD STRING VALUE>","merchantUrl":"<ADD STRING VALUE>","required3DSecure":false}'
  /backoffice/thematicareas:
    post:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Thematic area data
          schema:
            $ref: '#/definitions/ThematicAreaRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ThematicAreaResponse]'
      operationId: Backoffice_PostThematicArea
      summary: Create thematic area
      description: "This call is used to create a thematic area.\r\n\r\n\r\nSample request:\r\n            \r\n    POST /Create thematic area\r\n    {\r\n        \"name\": \"Thematic area name1\",\r\n        \"description\": \"Some description...\",\r\n        \"logoUrl\": \"https://www.act4greece.gr/wp-content/uploads/2016/08/research4.png\",\r\n        \"actions\": [\r\n            \"211B6578-5B09-4E92-B7BD-0669140F546D\"\r\n        ]\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas");

            var request = new RestRequest(Method.POST);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"logoUrl\\\":\\\"<ADD STRING VALUE>\\\",\\\"actions\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"name\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"logoUrl\":\"<ADD STRING VALUE>\",\"actions\":[\"<ADD
            STRING VALUE>\"]}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas")
              .post(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'POST',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { name: '<ADD STRING VALUE>',
                 description: '<ADD STRING VALUE>',
                 logoUrl: '<ADD STRING VALUE>',
                 actions: [ '<ADD STRING VALUE>' ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"logoUrl\":\"<ADD STRING
            VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("POST",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request POST \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"name":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","logoUrl":"<ADD STRING VALUE>","actions":["<ADD STRING VALUE>"]}'
  '/backoffice/thematicareas/{thematicAreaId}':
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: request
          description: Thematic area data
          schema:
            $ref: '#/definitions/ThematicAreaUpdateRequest'
          in: body
          required: true
        - name: thematicAreaId
          description: Thematic area id (UUID)
          in: path
          required: true
          type: string
          format: uuid
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[ThematicAreaResponse]'
      operationId: Backoffice_PutThematicArea
      summary: Update thematic area
      description: "This call is used to update a thematic area specified by thematic area id.\r\n\r\n\r\nSample request:\r\n            \r\n    PUT /Update thematic area\r\n    {\r\n        \"name\": \"Thematic area name 5\",\r\n        \"description\": \"Some updated description...\",\r\n        \"logoUrl\": \"https://www.act4greece.gr/wp-content/uploads/2016/08/research4.png\",\r\n        \"status\": \"Archived\"\r\n        \"actions\": [\r\n            \"211B6578-5B09-4E92-B7BD-0669140F546D\"\r\n        ]\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"status\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"logoUrl\":\"<ADD STRING
            VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"status\":\"<ADD STRING
            VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD
            STRING VALUE>\",\"logoUrl\":\"<ADD STRING
            VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"status\\\":\\\"<ADD STRING VALUE>\\\",\\\"name\\\":\\\"<ADD STRING VALUE>\\\",\\\"description\\\":\\\"<ADD STRING VALUE>\\\",\\\"logoUrl\\\":\\\"<ADD STRING VALUE>\\\",\\\"actions\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"status\":\"<ADD
            STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { status: '<ADD STRING VALUE>',
                 name: '<ADD STRING VALUE>',
                 description: '<ADD STRING VALUE>',
                 logoUrl: '<ADD STRING VALUE>',
                 actions: [ '<ADD STRING VALUE>' ] },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"status\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"status\":\"<ADD STRING VALUE>\",\"name\":\"<ADD STRING
            VALUE>\",\"description\":\"<ADD STRING VALUE>\",\"logoUrl\":\"<ADD
            STRING VALUE>\",\"actions\":[\"<ADD STRING VALUE>\"]}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"status\":\"<ADD STRING VALUE>\",\"name\":\"<ADD
            STRING VALUE>\",\"description\":\"<ADD STRING
            VALUE>\",\"logoUrl\":\"<ADD STRING VALUE>\",\"actions\":[\"<ADD
            STRING VALUE>\"]}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/thematicareas/%7BthematicAreaId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"status":"<ADD STRING VALUE>","name":"<ADD STRING VALUE>","description":"<ADD STRING VALUE>","logoUrl":"<ADD STRING VALUE>","actions":["<ADD STRING VALUE>"]}'
  /backoffice/users:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[UserDataListResponse]'
      operationId: Backoffice_GetRegisteredUsers
      summary: Get registered users
      description: Returns the registered users.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/users",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/backoffice/users/{userId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: userId
          description: User id (UUID)
          in: path
          required: true
          type: string
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[UserDataResponse]'
      operationId: Backoffice_GetRegisteredUser
      summary: Get data for registered user
      description: Returns the registered user specified by userId.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
    put:
      consumes:
        - application/json
        - text/json
        - application/xml
        - text/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - Backoffice
      parameters:
        - name: userId
          description: User id (UUID)
          in: path
          required: true
          type: string
        - name: request
          description: User data
          schema:
            $ref: '#/definitions/UserDataUpdateRequest'
          in: body
          required: true
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[UserDataResponse]'
      operationId: Backoffice_PutRegisteredUser
      summary: Update registered user
      description: "This call is used to update a registered user specified by user id .\r\n\r\n\r\nSample request:\r\n            \r\n    PUT /Update registered user\r\n    {\r\n        \"status\": \"Blocked\",\r\n        \"email\": \"voutsas.vasilios@nbg.gr\",\r\n        \"username\": \"MigrationUser\",\r\n        \"firstname\": \"Vassilis\",\r\n        \"lastname\": \"Voutsas\",\r\n        \"userRole\": \"Backoffice\"\r\n    }"
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            headers = curl_slist_append(headers, "accept: application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"email\":\"<ADD STRING
            VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"lastname\":\"<ADD STRING
            VALUE>\",\"userRole\":\"<ADD STRING VALUE>\",\"status\":\"<ADD
            STRING VALUE>\"}");


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D");

            var request = new RestRequest(Method.PUT);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            request.AddHeader("accept", "application/json");

            request.AddParameter("application/json", "{\"email\":\"<ADD STRING
            VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"lastname\":\"<ADD STRING
            VALUE>\",\"userRole\":\"<ADD STRING VALUE>\",\"status\":\"<ADD
            STRING VALUE>\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"username\\\":\\\"<ADD STRING VALUE>\\\",\\\"firstname\\\":\\\"<ADD STRING VALUE>\\\",\\\"lastname\\\":\\\"<ADD STRING VALUE>\\\",\\\"userRole\\\":\\\"<ADD STRING VALUE>\\\",\\\"status\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"accept\", \"application/json\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: >-
            OkHttpClient client = new OkHttpClient();


            MediaType mediaType = MediaType.parse("application/json");

            RequestBody body = RequestBody.create(mediaType, "{\"email\":\"<ADD
            STRING VALUE>\",\"username\":\"<ADD STRING
            VALUE>\",\"firstname\":\"<ADD STRING VALUE>\",\"lastname\":\"<ADD
            STRING VALUE>\",\"userRole\":\"<ADD STRING
            VALUE>\",\"status\":\"<ADD STRING VALUE>\"}");

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D")
              .put(body)
              .addHeader("accept", "application/json")
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'PUT',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json',
                 accept: 'application/json' },
              body:
               { email: '<ADD STRING VALUE>',
                 username: '<ADD STRING VALUE>',
                 firstname: '<ADD STRING VALUE>',
                 lastname: '<ADD STRING VALUE>',
                 userRole: '<ADD STRING VALUE>',
                 status: '<ADD STRING VALUE>' },
              json: true };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PUT",
              CURLOPT_POSTFIELDS => "{\"email\":\"<ADD STRING VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD STRING VALUE>\",\"lastname\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\"}",
              CURLOPT_HTTPHEADER => array(
                "accept: application/json",
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            payload = "{\"email\":\"<ADD STRING VALUE>\",\"username\":\"<ADD
            STRING VALUE>\",\"firstname\":\"<ADD STRING
            VALUE>\",\"lastname\":\"<ADD STRING VALUE>\",\"userRole\":\"<ADD
            STRING VALUE>\",\"status\":\"<ADD STRING VALUE>\"}"


            headers = {
                'accept': "application/json",
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("PUT",
            "/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D",
            payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Put.new(url)

            request["accept"] = 'application/json'

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'

            request.body = "{\"email\":\"<ADD STRING
            VALUE>\",\"username\":\"<ADD STRING VALUE>\",\"firstname\":\"<ADD
            STRING VALUE>\",\"lastname\":\"<ADD STRING
            VALUE>\",\"userRole\":\"<ADD STRING VALUE>\",\"status\":\"<ADD
            STRING VALUE>\"}"


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request PUT \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/backoffice/users/%7BuserId%7D \
              --header 'accept: application/json' \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE' \
              --data '{"email":"<ADD STRING VALUE>","username":"<ADD STRING VALUE>","firstname":"<ADD STRING VALUE>","lastname":"<ADD STRING VALUE>","userRole":"<ADD STRING VALUE>","status":"<ADD STRING VALUE>"}'
  '/cmscontent/content/{langId}/{nodeId}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - CmsContent
      parameters:
        - name: nodeId
          description: Node ID (Int)
          in: path
          required: true
          type: string
        - name: langId
          description: "Language ID \r\n            - 'en' for English, \r\n            - 'el' for Greek"
          in: path
          required: true
          type: string
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[CmsNodeResponse]'
      operationId: CmsContent_GetNodeDataFromCmsWithLang
      summary: Get content from CMS by node ID and language ID
      description: "This call is used to get content from the CMS based on node ID and language ID.\r\n- Language ID is mandatory (eg: For English use 'en', for Greek use 'el')."
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/content/%7BlangId%7D/%7BnodeId%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/cmscontent/TaggedContent/{langId}/{tag}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - CmsContent
      parameters:
        - name: tag
          description: Tag (URL Encoded)
          in: path
          required: true
          type: string
        - name: langId
          description: "Language ID \r\n            - 'en' for English, \r\n            - 'el' for Greek"
          in: path
          required: true
          type: string
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[CmsNodeResponse]]'
      operationId: CmsContent_GetNodesForTaggedContentFromCms
      summary: Get nodes for tags with content
      description: "This call returns all the associated nodes with specific tag(s) per language with content <br /><b>Examples </b><br />\r\nFor single tag: .../cmscontent/TaggedContent/en/tagName <br />\r\nFor multiple an off tags: .../cmscontent/TaggedContent/en/tagName1,tagName2,tagName3 <br />\r\n- MUST be URL encoded.\r\n- Language ID is mandatory (eg: For English use 'en', for Greek use 'el')."
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/TaggedContent/%7BlangId%7D/%7Btag%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  /cmscontent/tags:
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - CmsContent
      parameters:
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[CmsTag]]'
      operationId: CmsContent_GetTagsFromCms
      summary: Get Tags
      description: Returns all the tags from the CMS.
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/cmscontent/tags",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
  '/cmscontent/tags/{langId}/{tag}':
    get:
      consumes: []
      produces:
        - application/json
        - text/json
        - application/xml
        - text/xml
      tags:
        - CmsContent
      parameters:
        - name: tag
          description: Tag (URL Encoded)
          in: path
          required: true
          type: string
        - name: langId
          description: "Language ID \r\n            - 'en' for English, \r\n            - 'el' for Greek"
          in: path
          required: true
          type: string
        - name: sandbox_id
          description: Sandbox Identifier
          in: header
          required: true
          type: string
          default: ''
        - name: username
          description: User Name
          in: header
          required: true
          type: string
          default: user1
        - name: user_id
          description: User id
          in: header
          required: true
          type: string
          default: 4735c448-bf3c-4d54-a81b-f5a95f116165
        - name: provider_id
          description: Provider Identifier
          in: header
          required: false
          type: string
          default: NBG.gr
        - name: provider
          description: Provider Name
          in: header
          required: false
          type: string
          default: NBG
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response[List[CmsNodes]]'
      operationId: CmsContent_GetNodesForTagFromCms
      summary: Get nodes for tags
      description: "This call returns all the associated nodes with specific tag(s) per language. <br /><b>Examples </b><br />\r\nFor single tag: .../cmscontent/tag/en/tagName <br />\r\nFor multiple joined tags: .../cmscontent/tag/en/tagName1,tagName2,tagName3 <br />\r\n- MUST be URL encoded.\r\n- Language ID is mandatory (eg: For English use 'en', for Greek use 'el')."
      x-code-samples:
        - lang: C
          source: >-
            CURL *hnd = curl_easy_init();


            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");

            curl_easy_setopt(hnd, CURLOPT_URL,
            "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D");


            struct curl_slist *headers = NULL;

            headers = curl_slist_append(headers, "client-id:
            SOME_APIKEY_VALUE");

            headers = curl_slist_append(headers, "provider: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "provider_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "user_id: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "username: SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "sandbox_id:
            SOME_STRING_VALUE");

            headers = curl_slist_append(headers, "content-type:
            application/json");

            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);


            CURLcode ret = curl_easy_perform(hnd);
        - lang: 'C#'
          source: >-
            var client = new
            RestClient("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D");

            var request = new RestRequest(Method.GET);

            request.AddHeader("client-id", "SOME_APIKEY_VALUE");

            request.AddHeader("provider", "SOME_STRING_VALUE");

            request.AddHeader("provider_id", "SOME_STRING_VALUE");

            request.AddHeader("user_id", "SOME_STRING_VALUE");

            request.AddHeader("username", "SOME_STRING_VALUE");

            request.AddHeader("sandbox_id", "SOME_STRING_VALUE");

            request.AddHeader("content-type", "application/json");

            IRestResponse response = client.Execute(request);
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"sandbox_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"username\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"user_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider_id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"provider\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"client-id\", \"SOME_APIKEY_VALUE\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D")
              .get()
              .addHeader("content-type", "application/json")
              .addHeader("sandbox_id", "SOME_STRING_VALUE")
              .addHeader("username", "SOME_STRING_VALUE")
              .addHeader("user_id", "SOME_STRING_VALUE")
              .addHeader("provider_id", "SOME_STRING_VALUE")
              .addHeader("provider", "SOME_STRING_VALUE")
              .addHeader("client-id", "SOME_APIKEY_VALUE")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Node
          source: |
            var request = require("request");

            var options = { method: 'GET',
              url:
               'https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D',
              headers:
               { 'client-id': 'SOME_APIKEY_VALUE',
                 provider: 'SOME_STRING_VALUE',
                 provider_id: 'SOME_STRING_VALUE',
                 user_id: 'SOME_STRING_VALUE',
                 username: 'SOME_STRING_VALUE',
                 sandbox_id: 'SOME_STRING_VALUE',
                 'content-type': 'application/json' } };

            request(options, function (error, response, body) {
              if (error) throw new Error(error);

              console.log(body);
            });
        - lang: PHP
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, array(
              CURLOPT_URL => "https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => array(
                "client-id: SOME_APIKEY_VALUE",
                "content-type: application/json",
                "provider: SOME_STRING_VALUE",
                "provider_id: SOME_STRING_VALUE",
                "sandbox_id: SOME_STRING_VALUE",
                "user_id: SOME_STRING_VALUE",
                "username: SOME_STRING_VALUE"
              ),
            ));

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Python
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("apis.nbg.gr")


            headers = {
                'content-type': "application/json",
                'sandbox_id': "SOME_STRING_VALUE",
                'username': "SOME_STRING_VALUE",
                'user_id': "SOME_STRING_VALUE",
                'provider_id': "SOME_STRING_VALUE",
                'provider': "SOME_STRING_VALUE",
                'client-id': "SOME_APIKEY_VALUE"
                }

            conn.request("GET",
            "/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'


            url =
            URI("https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Get.new(url)

            request["content-type"] = 'application/json'

            request["sandbox_id"] = 'SOME_STRING_VALUE'

            request["username"] = 'SOME_STRING_VALUE'

            request["user_id"] = 'SOME_STRING_VALUE'

            request["provider_id"] = 'SOME_STRING_VALUE'

            request["provider"] = 'SOME_STRING_VALUE'

            request["client-id"] = 'SOME_APIKEY_VALUE'


            response = http.request(request)

            puts response.read_body
        - lang: cUrl
          source: |-
            curl --request GET \
              --url https://apis.nbg.gr/sandbox/crowdfunding/headers/v1.2/cmscontent/tags/%7BlangId%7D/%7Btag%7D \
              --header 'client-id: SOME_APIKEY_VALUE' \
              --header 'content-type: application/json' \
              --header 'provider: SOME_STRING_VALUE' \
              --header 'provider_id: SOME_STRING_VALUE' \
              --header 'sandbox_id: SOME_STRING_VALUE' \
              --header 'user_id: SOME_STRING_VALUE' \
              --header 'username: SOME_STRING_VALUE'
definitions:
  'Response[AccountInfoResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/AccountInfoResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  AccountInfoResponse:
    description: Account short data response
    required:
      - account
    type: object
    properties:
      account:
        $ref: '#/definitions/AccountShortInfo'
        description: Account data
  ResponseMessage:
    type: object
    properties:
      id:
        type: string
      code:
        type: string
      desc:
        type: string
      sev:
        enum:
          - Warning
          - Error
          - Info
        type: string
      cat:
        enum:
          - Business
          - Communication
          - Technical
          - Security
        type: string
  AccountShortInfo:
    description: Account short data information
    required:
      - accountId
      - accountNumber
      - iban
      - currencyISO
      - status
    type: object
    properties:
      accountId:
        format: uuid
        description: The account id (UUID)
        type: string
        example: 00000000-0000-0000-0000-000000000000
      accountNumber:
        description: The account number
        type: string
      iban:
        description: IBAN of account
        type: string
      currencyISO:
        description: Currency of the account (EUR/USD...)
        type: string
      description:
        description: Description of the account
        type: string
      status:
        description: Status of the account (Active/Inactive)
        enum:
          - Active
          - Inactive
        type: string
  'Response[ThematicAreasResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ThematicAreasResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ThematicAreasResponse:
    description: Response list of a thematic areas
    required:
      - thematicAreas
    type: object
    properties:
      thematicAreas:
        description: List of thematic areas data
        type: array
        items:
          $ref: '#/definitions/ThematicArea'
  ThematicArea:
    description: Thematic area data model
    required:
      - thematicAreaId
      - shortName
      - name
      - description
      - logoUrl
      - status
      - actions
    type: object
    properties:
      thematicAreaId:
        format: uuid
        description: Thematic area unique identifier.
        type: string
        example: 00000000-0000-0000-0000-000000000000
      shortName:
        description: Short name of thematic area. Used for Content Tag
        type: string
      name:
        description: "Thematic area name / title. \r\neg: Welfare, Health and Solidarity"
        type: string
      description:
        description: Short description of thematic area
        type: string
      logoUrl:
        description: URL of a logo image
        type: string
      status:
        description: "Current status of thematic area\r\n- Draft\r\n- Active\r\n- Archived"
        type: string
      actions:
        description: List of actions that belongs to the thematic area
        type: array
        items:
          description: "Action short info. \r\n- Action data id\r\n- Action short name"
          required:
            - actionDataId
            - shortName
          type: object
          properties:
            actionDataId:
              format: uuid
              description: Action data ID
              type: string
              example: 00000000-0000-0000-0000-000000000000
            shortName:
              description: Action data short name
              type: string
  ActionDataShortInfoResponse:
    description: "Action short info. \r\n- Action data id\r\n- Action short name"
    required:
      - actionDataId
      - shortName
    type: object
    properties:
      actionDataId:
        format: uuid
        description: Action data ID
        type: string
        example: 00000000-0000-0000-0000-000000000000
      shortName:
        description: Action data short name
        type: string
  'Response[ThematicAreaResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ThematicAreaResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ThematicAreaResponse:
    description: Response of a thematic area
    required:
      - thematicArea
    type: object
    properties:
      thematicArea:
        $ref: '#/definitions/ThematicArea'
        description: Thematic area data
  'Response[ActionsDataResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ActionsDataResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ActionsDataResponse:
    description: List of actions sensitive data
    type: object
    properties:
      actionsData:
        description: List of actions sensitive data
        type: array
        items:
          $ref: '#/definitions/ActionDataResponseDetails'
  ActionDataResponseDetails:
    description: Action sensitive data
    required:
      - actionDataId
      - actionShortName
      - actionName
      - status
    type: object
    properties:
      actionDataId:
        format: uuid
        description: Action sensitive data Id
        type: string
        example: 00000000-0000-0000-0000-000000000000
      actionShortName:
        description: >-
          Short name or an action. The value of this property is autogenerated
          by the API.
        type: string
      actionName:
        description: Name or title of an action
        type: string
      dateStart:
        format: date-time
        description: Start date of an action
        type: string
      dateEnd:
        format: date-time
        description: End date of an action
        type: string
      targetAmount:
        format: double
        description: Target Amount
        type: number
      status:
        description: "Status of the action\r\n- Draft\r\n- Active\r\n- Expired\r\n- Archived"
        type: string
      publicAmount:
        format: double
        description: Public amount.
        type: number
  'Response[ActionDataResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ActionDataResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ActionDataResponse:
    description: Response of an action sensitive data
    required:
      - actionData
    type: object
    properties:
      actionData:
        $ref: '#/definitions/ActionDataResponseDetails'
        description: Action sensitive data
  'Response[DonationPromisesResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/DonationPromisesResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  DonationPromisesResponse:
    description: List of Donation Promises
    type: object
    properties:
      donationPromises:
        description: List of donations promises
        type: array
        items:
          $ref: '#/definitions/DonationPromise'
  DonationPromise:
    description: Donation Promise data
    required:
      - actionKey
    type: object
    properties:
      donationPromiseId:
        format: uuid
        description: Donation promise ID
        type: string
        example: 00000000-0000-0000-0000-000000000000
      actionKey:
        format: uuid
        description: key to match donation to an action
        type: string
        example: 00000000-0000-0000-0000-000000000000
      categoryMoneyFound:
        description: Any category bank want to store to trace back the transaction
        type: string
      donationTime:
        format: date-time
        description: Donation timestamp
        type: string
      payType:
        description: From where the pay must be  card/deposit
        type: string
      publish:
        description: is this published
        type: boolean
      theChallenge:
        description: challenge key
        type: string
      transactionKey:
        description: transaction key
        type: string
      transactionReceiptKey:
        description: transaction receipt key
        type: string
      userKey:
        description: User key is the UserID
        type: string
      xpAmount:
        format: double
        description: Amount of money that is promised for the donation
        type: number
      status:
        description: "Status of the donation promise\r\n- Pending\r\n- Paid_Matched\r\n- Paid_Not_Matched\r\n- Pending_3dSecure\r\n- Fail_Cancelled_By_User\r\n- ..."
        type: string
      displayName:
        description: Public display name
        type: string
  'Response[DonationPromisesResponseWall]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/DonationPromisesResponseWall'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  DonationPromisesResponseWall:
    description: Donation Promise Response Wall
    type: object
    properties:
      donationPromises:
        description: Donation promises response
        type: array
        items:
          $ref: '#/definitions/DonationPromiseWall'
  DonationPromiseWall:
    description: Donation Promise Wall
    type: object
    properties:
      actionKey:
        format: uuid
        description: key to match donation to an action
        type: string
        example: 00000000-0000-0000-0000-000000000000
      donationTime:
        format: date-time
        description: Donation timestamp
        type: string
      xpAmount:
        format: double
        description: Amount of money that is promised for the donation
        type: number
      displayName:
        description: Public display name
        type: string
  DonationPromisesRequest:
    description: Donation promise request
    required:
      - publish
      - xpAmount
    type: object
    properties:
      payType:
        description: 'From where the pay must be: Card, Deposit'
        type: string
      publish:
        description: is this published
        type: boolean
      xpAmount:
        format: double
        description: Amount of the money that is promised for the donation
        type: number
      displayName:
        description: Public display name
        type: string
  'Response[DonationPromiseResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/DonationPromiseResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  DonationPromiseResponse:
    description: Donation Promise Response
    type: object
    properties:
      donationPromise:
        $ref: '#/definitions/DonationPromise'
        description: Donations promises
  'Response[NewsletterUser]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/NewsletterUser'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  NewsletterUser:
    description: Registered users for newsletters per action
    required:
      - userId
      - actionDataId
      - createdDate
      - active
      - updatedDate
    type: object
    properties:
      userId:
        description: User Id
        type: string
      actionDataId:
        format: uuid
        description: Action data ID
        type: string
        example: 00000000-0000-0000-0000-000000000000
      createdDate:
        format: date-time
        description: Inserted Date
        type: string
      active:
        description: Active
        type: boolean
      updatedDate:
        format: date-time
        description: Updated Date. This property has value when a user becomes inactive
        type: string
  NewsletterUserRequestUpdate:
    description: Newsletter User Request for Update
    required:
      - active
    type: object
    properties:
      active:
        description: Set activation (true/false)
        type: boolean
  'Response[BoolResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/BoolResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  BoolResponse:
    type: object
    properties:
      result:
        type: boolean
  ContactUsRequest:
    description: Contact us request data model
    required:
      - surname
      - firstname
      - email
      - message
    type: object
    properties:
      surname:
        description: Surname
        type: string
      firstname:
        description: Firstname
        type: string
      email:
        description: Email
        type: string
      message:
        description: Message
        type: string
  'Response[ContactUsResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ContactUsResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ContactUsResponse:
    description: Contact us response data model
    required:
      - ContactUs
    type: object
    properties:
      ContactUs:
        $ref: '#/definitions/ContactUs'
        description: Contact us data
  ContactUs:
    description: Contact us data model
    required:
      - contactUsId
      - surname
      - firstname
      - email
      - message
      - createdDate
    type: object
    properties:
      contactUsId:
        format: uuid
        description: Contact us ID (UUID)
        type: string
        example: 00000000-0000-0000-0000-000000000000
      surname:
        description: Surname
        type: string
      firstname:
        description: Firstname
        type: string
      email:
        description: Email
        type: string
      message:
        description: Message
        type: string
      createdDate:
        format: date-time
        description: Created Date
        type: string
  'Response[UserDataResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/UserDataResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  UserDataResponse:
    description: User data response
    type: object
    properties:
      user:
        $ref: '#/definitions/UserDataModel'
        description: User data
  UserDataModel:
    description: User data model
    type: object
    properties:
      userId:
        description: User id (UUID)
        type: string
      email:
        description: Email
        type: string
      username:
        description: user name
        type: string
      firstname:
        description: First name
        type: string
      lastname:
        description: Last name
        type: string
      userRole:
        description: "User role \r\n- User\r\n- Backoffice"
        type: string
      status:
        description: "User status\r\n- Active\r\n- Blocked"
        type: string
      newsletterActions:
        description: List of actions that user has subscribed for newsletter.
        type: array
        items:
          $ref: '#/definitions/ActionDataShortInfoResponse'
  DatacashRequest:
    description: Datacash Request
    type: object
    properties:
      amount:
        format: double
        description: Payment amount
        type: number
      cardProduct:
        description: Card product model
        type: object
        properties:
          type:
            description: product type (type=&gt; 'card')
            type: string
          number:
            description: Card number
            type: string
          details:
            description: Card Details Model
            type: object
            properties:
              cvv:
                description: Card CVV
                type: string
              cardHolder:
                description: Card holder name
                type: string
              expiryDate:
                description: Card expiration date
                type: string
  CardProductModel:
    description: Card product model
    type: object
    properties:
      type:
        description: product type (type=&gt; 'card')
        type: string
      number:
        description: Card number
        type: string
      details:
        description: Card Details Model
        type: object
        properties:
          cvv:
            description: Card CVV
            type: string
          cardHolder:
            description: Card holder name
            type: string
          expiryDate:
            description: Card expiration date
            type: string
  CardDetailsModel:
    description: Card Details Model
    type: object
    properties:
      cvv:
        description: Card CVV
        type: string
      cardHolder:
        description: Card holder name
        type: string
      expiryDate:
        description: Card expiration date
        type: string
  'Response[DatacashReferenceResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/DatacashReferenceResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  DatacashReferenceResponse:
    description: Datacash reference response
    type: object
    properties:
      datacashReference:
        description: Datacash reference
        type: string
      status:
        format: int32
        description: Transaction response status
        type: integer
      reason:
        description: Transaction response reason description
        type: string
      threeDSecure:
        $ref: '#/definitions/ThreeDSecureModel'
        description: 3D Secure data
  ThreeDSecureModel:
    description: 3D Secure Model
    type: object
    properties:
      merchantUrl:
        description: MerchantUrl
        type: string
      requiredThreeDSecure:
        description: If merchant is 3d secure then value must be true else false (Bool)
        type: boolean
      description:
        description: Description
        type: string
      ascUrl:
        description: AscUrl
        type: string
      pareq_message:
        description: PareqMessage
        type: string
  'Response[NewsletterUsersResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/NewsletterUsersResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  NewsletterUsersResponse:
    description: List of users that are registered to newsletter
    required:
      - newslettersUsers
    type: object
    properties:
      newslettersUsers:
        description: List of users that are registered to newsletter
        type: array
        items:
          $ref: '#/definitions/NewsletterUser'
  'Response[ContactUsResponseEntries]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ContactUsResponseEntries'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ContactUsResponseEntries:
    description: Contact us entries response data model
    required:
      - ContactUsEntries
    type: object
    properties:
      ContactUsEntries:
        description: List of contact us entries
        type: array
        items:
          $ref: '#/definitions/ContactUs'
  'Response[AccountsResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/AccountsResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  AccountsResponse:
    description: Accounts Response
    required:
      - accounts
    type: object
    properties:
      accounts:
        description: List of accounts
        type: array
        items:
          $ref: '#/definitions/AccountModel'
  AccountModel:
    description: Account Model
    required:
      - transactions
      - accountId
      - accountNumber
      - iban
      - currencyISO
      - status
    type: object
    properties:
      availableBalance:
        format: double
        description: Available balance of the account
        type: number
      ledgerBalance:
        format: double
        description: Ledger balance of the account
        type: number
      transactions:
        description: List of transactions
        type: array
        items:
          description: Transaction data model
          required:
            - amount
            - ledgerBalance
            - transactionDatetime
            - timeStamp
            - reasonCode
            - reasonDescription
            - origin
            - valeur
            - currencyISO
            - reference
            - branch
          type: object
          properties:
            amount:
              format: double
              description: Transaction Amount
              type: number
            ledgerBalance:
              format: double
              description: Account ledger balance
              type: number
            transactionDatetime:
              format: date-time
              description: Transaction date
              type: string
            timeStamp:
              description: Transaction datetime (timestamp)
              type: string
            reasonCode:
              format: double
              description: Transaction reason code
              type: number
            reasonDescription:
              description: Reason description
              type: string
            origin:
              description: Transaction origin
              type: string
            valeur:
              format: date-time
              description: Transaction valeur
              type: string
            currencyISO:
              description: Transaction currency
              type: string
            reference:
              description: Transaction reference
              type: string
            branch:
              description: Transaction branch
              type: string
            relatedAccount:
              description: Transaction related account
              type: string
      accountId:
        format: uuid
        description: The account id (UUID)
        type: string
        example: 00000000-0000-0000-0000-000000000000
      accountNumber:
        description: The account number
        type: string
      iban:
        description: IBAN of account
        type: string
      currencyISO:
        description: Currency of the account (EUR/USD...)
        type: string
      description:
        description: Description of the account
        type: string
      status:
        description: Status of the account (Active/Inactive)
        enum:
          - Active
          - Inactive
        type: string
  Transaction:
    description: Transaction data model
    required:
      - amount
      - ledgerBalance
      - transactionDatetime
      - timeStamp
      - reasonCode
      - reasonDescription
      - origin
      - valeur
      - currencyISO
      - reference
      - branch
    type: object
    properties:
      amount:
        format: double
        description: Transaction Amount
        type: number
      ledgerBalance:
        format: double
        description: Account ledger balance
        type: number
      transactionDatetime:
        format: date-time
        description: Transaction date
        type: string
      timeStamp:
        description: Transaction datetime (timestamp)
        type: string
      reasonCode:
        format: double
        description: Transaction reason code
        type: number
      reasonDescription:
        description: Reason description
        type: string
      origin:
        description: Transaction origin
        type: string
      valeur:
        format: date-time
        description: Transaction valeur
        type: string
      currencyISO:
        description: Transaction currency
        type: string
      reference:
        description: Transaction reference
        type: string
      branch:
        description: Transaction branch
        type: string
      relatedAccount:
        description: Transaction related account
        type: string
  AccountDbRequest:
    description: Account request data model
    required:
      - accountNumber
    type: object
    properties:
      accountNumber:
        description: Account number
        type: string
      description:
        description: Account description
        type: string
  'Response[AccountResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/AccountResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  AccountResponse:
    description: Account Response
    required:
      - account
    type: object
    properties:
      account:
        $ref: '#/definitions/AccountModel'
        description: Account data
  AccountUpdateRequest:
    description: Account update request data model
    required:
      - accountNumber
      - description
      - iban
      - status
    type: object
    properties:
      accountNumber:
        description: Account number
        type: string
      description:
        description: Account description
        type: string
      iban:
        description: IBAN
        type: string
      status:
        description: 'Account status (Active, Inactive)'
        type: string
  'Response[TransactionResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/TransactionResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  TransactionResponse:
    description: Transaction Response
    required:
      - transactions
    type: object
    properties:
      transactions:
        description: List of transactions
        type: array
        items:
          $ref: '#/definitions/Transaction'
  ActionDataRequest:
    description: Request of a new action
    required:
      - actionName
    type: object
    properties:
      actionName:
        description: Name or title of an action
        type: string
      accountKey:
        description: Account key is a key to find the account on the nbg account api
        type: string
      cardsAccountKey:
        description: Key to find the cards account on ete account api
        type: string
      dateStart:
        format: date-time
        description: Start date of an action
        type: string
      dateEnd:
        format: date-time
        description: End date of an action
        type: string
      offsetAmount:
        format: double
        description: >-
          An offset for the amount. Is used for business proposed like money
          withdraws before an action is closed
        type: number
      targetAmount:
        format: double
        description: Target Amount
        type: number
      merchantDataId:
        description: Merchant id (uuid). Used for datacash payment.
        type: string
      publicAmount:
        format: double
        description: Public amount.
        type: number
  'Response[ActionDataResponseFull]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ActionDataResponseFull'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ActionDataResponseFull:
    description: Action data response full (for backoffice)
    required:
      - actionData
    type: object
    properties:
      actionData:
        $ref: '#/definitions/ActionDataResponseFullDetails'
        description: Action data
  ActionDataResponseFullDetails:
    description: Action Data Response Full Details
    required:
      - actionDataId
      - actionShortName
      - actionName
      - status
    type: object
    properties:
      accountKey:
        description: Account key is a key to find the account on the nbg account api
        type: string
      cardsAccountKey:
        description: Key to find the cards account on ete account api
        type: string
      offsetAmount:
        format: double
        description: >-
          An offset for the amount . Is used for business proposed like money
          withdraws before an action is closed
        type: number
      merchantDataId:
        description: Merchant Id for datacash.
        type: string
      actionDataId:
        format: uuid
        description: Action sensitive data Id
        type: string
        example: 00000000-0000-0000-0000-000000000000
      actionShortName:
        description: >-
          Short name or an action. The value of this property is autogenerated
          by the API.
        type: string
      actionName:
        description: Name or title of an action
        type: string
      dateStart:
        format: date-time
        description: Start date of an action
        type: string
      dateEnd:
        format: date-time
        description: End date of an action
        type: string
      targetAmount:
        format: double
        description: Target Amount
        type: number
      status:
        description: "Status of the action\r\n- Draft\r\n- Active\r\n- Expired\r\n- Archived"
        type: string
      publicAmount:
        format: double
        description: Public amount.
        type: number
  'Response[ActionsDataResponseFull]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/ActionsDataResponseFull'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  ActionsDataResponseFull:
    description: List of actions data response full (for backoffice)
    required:
      - actionsData
    type: object
    properties:
      actionsData:
        description: Action data
        type: array
        items:
          $ref: '#/definitions/ActionDataResponseFullDetails'
  ActionDataUpdateRequest:
    description: Update request of an action
    required:
      - actionName
    type: object
    properties:
      status:
        description: Status of the action
        type: string
      actionName:
        description: Name or title of an action
        type: string
      accountKey:
        description: Account key is a key to find the account on the nbg account api
        type: string
      cardsAccountKey:
        description: Key to find the cards account on ete account api
        type: string
      dateStart:
        format: date-time
        description: Start date of an action
        type: string
      dateEnd:
        format: date-time
        description: End date of an action
        type: string
      offsetAmount:
        format: double
        description: >-
          An offset for the amount. Is used for business proposed like money
          withdraws before an action is closed
        type: number
      targetAmount:
        format: double
        description: Target Amount
        type: number
      merchantDataId:
        description: Merchant id (uuid). Used for datacash payment.
        type: string
      publicAmount:
        format: double
        description: Public amount.
        type: number
  ThematicAreaRequest:
    description: Thematic area request data model for insert
    required:
      - name
      - actions
    type: object
    properties:
      name:
        description: "Thematic area name / title. \r\neg: Welfare, Health and Solidarity"
        type: string
      description:
        description: Short description of thematic area
        type: string
      logoUrl:
        description: URL of a logo image
        type: string
      actions:
        description: List of actions ids
        type: array
        items:
          type: string
  ThematicAreaUpdateRequest:
    description: Thematic area request data model for update
    required:
      - status
      - name
      - actions
    type: object
    properties:
      status:
        description: "Status of thematic area\r\n- Draft\r\n- Active\r\n- Archived"
        type: string
      name:
        description: "Thematic area name / title. \r\neg: Welfare, Health and Solidarity"
        type: string
      description:
        description: Short description of thematic area
        type: string
      logoUrl:
        description: URL of a logo image
        type: string
      actions:
        description: List of actions ids
        type: array
        items:
          type: string
  'Response[UserDataListResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/UserDataListResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  UserDataListResponse:
    description: User data list response
    type: object
    properties:
      users:
        description: Users list
        type: array
        items:
          $ref: '#/definitions/UserDataModel'
  UserDataUpdateRequest:
    description: User data update request data model
    required:
      - email
      - username
      - userRole
    type: object
    properties:
      email:
        description: Email
        type: string
      username:
        description: user name
        type: string
      firstname:
        description: First name
        type: string
      lastname:
        description: Last name
        type: string
      userRole:
        description: "User role \r\n- User\r\n- Backoffice"
        type: string
      status:
        description: "User status\r\n- Active\r\n- Blocked"
        type: string
  'Response[MerchantsResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/MerchantsResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  MerchantsResponse:
    description: Merchants response
    type: object
    properties:
      merchants:
        description: List of merchants
        type: array
        items:
          $ref: '#/definitions/MerchantDetails'
  MerchantDetails:
    description: Merchant details
    type: object
    properties:
      merchantDataId:
        format: uuid
        description: Merchant data id (UUID)
        type: string
        example: 00000000-0000-0000-0000-000000000000
      merchantId:
        description: Merchant Id
        type: string
      merchantName:
        description: Merchant name
        type: string
      username:
        description: Username for datacash
        type: string
      password:
        description: Password for datacash
        type: string
      status:
        description: Merchant status (Active/Inactive)
        type: string
      merchantUrl:
        description: Merchant Url
        type: string
      required3DSecure:
        description: Required3DSecure
        type: boolean
  MerchantInsertRequest:
    description: Merchant insert request
    required:
      - merchantId
      - merchantName
      - username
      - password
    type: object
    properties:
      merchantId:
        description: Merchant id
        type: string
      merchantName:
        description: Merchant name
        type: string
      username:
        description: Username of merchant
        type: string
      password:
        description: Password of merchant
        type: string
      merchantUrl:
        description: Merchant Url
        type: string
      required3DSecure:
        description: Required3DSecure
        type: boolean
  'Response[MerchantResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/MerchantResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  MerchantResponse:
    description: Merchant response
    type: object
    properties:
      merchant:
        $ref: '#/definitions/MerchantDetails'
        description: Merchant data
  MerchantUpdateRequest:
    description: Merchant update request
    required:
      - status
      - merchantId
      - merchantName
      - username
      - password
    type: object
    properties:
      status:
        description: Merchant status (Active/Inactive)
        type: string
      merchantId:
        description: Merchant id
        type: string
      merchantName:
        description: Merchant name
        type: string
      username:
        description: Username of merchant
        type: string
      password:
        description: Password of merchant
        type: string
      merchantUrl:
        description: Merchant Url
        type: string
      required3DSecure:
        description: Required3DSecure
        type: boolean
  'Response[AlertsResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/AlertsResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  AlertsResponse:
    description: Alerts response
    type: object
    properties:
      alerts:
        description: List of alerts
        type: array
        items:
          $ref: '#/definitions/AlertModel'
  AlertModel:
    description: Alert model
    type: object
    properties:
      alertId:
        format: uuid
        description: Alert Id (UUID)
        type: string
        example: 00000000-0000-0000-0000-000000000000
      name:
        description: Name of alert
        type: string
      type:
        description: Alert type (Green | Yellow | Orange | Red)
        type: string
      description:
        description: Alert description
        type: string
      tags:
        description: Search helping text(s)
        type: string
      sourceType:
        description: Source of the alert (Batch | API | UI)
        type: string
      sourceClient:
        description: 'Application id (ex: uuid)'
        type: string
      sourceDescription:
        description: Source id
        type: string
      insertDate:
        format: date-time
        description: Insert date
        type: string
      insertedByUserId:
        description: User Id
        type: string
  AlertRequest:
    description: Alert request
    type: object
    properties:
      name:
        description: Name of alert
        type: string
      type:
        description: Alert type (Green | Yellow | Orange | Red)
        type: string
      description:
        description: Alert description
        type: string
      tags:
        description: Search helping text(s)
        type: string
      sourceType:
        description: Source of the alert (Batch | API | UI)
        type: string
      sourceClient:
        description: 'Application id (ex: uuid)'
        type: string
      sourceDescription:
        description: Source id
        type: string
  'Response[AlertResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/AlertResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  AlertResponse:
    description: Alert response
    type: object
    properties:
      alert:
        $ref: '#/definitions/AlertModel'
        description: Alert data
  'Response[CmsNodeResponse]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/CmsNodeResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  CmsNodeResponse:
    description: CMS Node Request
    required:
      - article
      - link
      - action_additional_data
      - nid
      - title
      - type
      - status
      - created
      - changed
    type: object
    properties:
      article:
        $ref: '#/definitions/CmsArticle'
        description: Article
      link:
        $ref: '#/definitions/CmsLink'
        description: Link
      action_additional_data:
        $ref: '#/definitions/CmsActionAdditionalData'
        description: Action additional data
      nid:
        $ref: '#/definitions/NodeNodeId'
        description: Node ID
      title:
        $ref: '#/definitions/NodeTitle'
        description: Content Title
      type:
        $ref: '#/definitions/NodeType'
        description: Content Type
      status:
        $ref: '#/definitions/NodeStatus'
        description: Content Status
      created:
        $ref: '#/definitions/NodeCreated'
        description: Content created date
      changed:
        $ref: '#/definitions/NodeChanged'
        description: Content changed date
  CmsArticle:
    description: CMS Article
    required:
      - body
      - tags
      - metadata
    type: object
    properties:
      body:
        description: NodeBody
        required:
          - value
          - format
          - summary
        type: object
        properties:
          value:
            description: Value
            type: string
          format:
            description: Format
            type: string
          summary:
            description: Summary
            type: string
          lang:
            description: Language
            type: string
      tags:
        description: Article tags
        type: array
        items:
          description: NodeFieldTags
          required:
            - target_id
            - value
          type: object
          properties:
            target_id:
              format: int32
              description: TargetId
              type: integer
            value:
              description: Value
              type: string
      metadata:
        description: Article metadata
        type: array
        items:
          description: NodeFieldMetadata
          required:
            - target_id
          type: object
          properties:
            target_id:
              format: int32
              description: TargetId
              type: integer
      externalSensitiveData:
        description: External sensitive data
        type: array
        items:
          description: NodeExternalSensitiveData
          required:
            - value
          type: object
          properties:
            value:
              description: Value
              type: string
      fieldImage:
        description: Image data
        type: array
        items:
          description: NodeFieldImage
          type: object
          properties:
            target_id:
              description: TargetId
              type: string
            alt:
              description: Alt
              type: string
            title:
              description: Title
              type: string
            width:
              description: Width
              type: string
            height:
              description: Height
              type: string
            target_type:
              description: Target Type
              type: string
            url:
              description: URL
              type: string
  CmsLink:
    description: CMS Link
    required:
      - body
      - tags
    type: object
    properties:
      body:
        $ref: '#/definitions/NodeBody'
        description: Supporter body
      imageUrl:
        $ref: '#/definitions/NodeFieldImageUrl'
        description: Supporter image URL
      url:
        $ref: '#/definitions/NodeFieldLinkUrl'
        description: Link URL
      videoUrl:
        $ref: '#/definitions/NodeFieldVideoUrl'
        description: Link video URL
      order:
        $ref: '#/definitions/NodeFieldLinkOrder'
        description: Link order
      tags:
        description: Supporter tags
        type: array
        items:
          $ref: '#/definitions/NodeFieldTags'
  CmsActionAdditionalData:
    description: CMS Action additional data
    type: object
    properties:
      field_action_video:
        $ref: '#/definitions/NodeFieldActionVideo'
        description: Action video
      field_base_color:
        $ref: '#/definitions/NodeFieldBaseColor'
        description: Action base color
      field_big_image_url:
        $ref: '#/definitions/NodeFieldBigImageUrl'
        description: Action big image URL
      field_images_extra_images_url:
        description: List of extra images URL
        type: array
        items:
          $ref: '#/definitions/NodeFieldImagesExtraImagesUrl'
      field_page_template:
        $ref: '#/definitions/NodeFieldPageTemplate'
        description: Action page template
      field_small_logo_colorful_url:
        $ref: '#/definitions/NodeFieldSmallLogoColorfulUrl'
        description: Action small logo colorful URL
      field_small_logo_negative_url:
        $ref: '#/definitions/NodeFieldSmallLogoNegativeUrl'
        description: Action small logo negative URL
      field_supporters_keys:
        $ref: '#/definitions/NodeFieldSupportersKeys'
        description: Supporter keys
      field_synoptic_text:
        $ref: '#/definitions/NodeFieldSynopticText'
        description: Action synoptic text
      field_videos:
        description: List of action videos URL
        type: array
        items:
          $ref: '#/definitions/NodeFieldVideos'
      field_tags:
        description: Content Tags
        type: array
        items:
          $ref: '#/definitions/NodeFieldTags'
  NodeNodeId:
    description: NodeNodeId
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
  NodeTitle:
    description: NodeTitle
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeType:
    description: NodeType
    required:
      - target_id
    type: object
    properties:
      target_id:
        description: TargetId
        type: string
  NodeStatus:
    description: NodeStatus
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
  NodeCreated:
    description: NodeCreated
    required:
      - value
      - format
    type: object
    properties:
      value:
        description: Value
        type: string
      format:
        description: Format
        type: string
  NodeChanged:
    description: NodeChanged
    required:
      - value
      - format
    type: object
    properties:
      value:
        description: Value
        type: string
      format:
        description: Format
        type: string
  NodeBody:
    description: NodeBody
    required:
      - value
      - format
      - summary
    type: object
    properties:
      value:
        description: Value
        type: string
      format:
        description: Format
        type: string
      summary:
        description: Summary
        type: string
      lang:
        description: Language
        type: string
  NodeFieldTags:
    description: NodeFieldTags
    required:
      - target_id
      - value
    type: object
    properties:
      target_id:
        format: int32
        description: TargetId
        type: integer
      value:
        description: Value
        type: string
  NodeFieldMetadata:
    description: NodeFieldMetadata
    required:
      - target_id
    type: object
    properties:
      target_id:
        format: int32
        description: TargetId
        type: integer
  NodeExternalSensitiveData:
    description: NodeExternalSensitiveData
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
  NodeFieldImage:
    description: NodeFieldImage
    type: object
    properties:
      target_id:
        description: TargetId
        type: string
      alt:
        description: Alt
        type: string
      title:
        description: Title
        type: string
      width:
        description: Width
        type: string
      height:
        description: Height
        type: string
      target_type:
        description: Target Type
        type: string
      url:
        description: URL
        type: string
  NodeFieldImageUrl:
    description: NodeFieldImageUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldLinkUrl:
    description: NodeFieldLinkUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldVideoUrl:
    description: NodeFieldVideoUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldLinkOrder:
    description: NodeFieldLinkOrder
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldActionVideo:
    description: NodeFieldActionVideo
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldBaseColor:
    description: NodeFieldBaseColor
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldBigImageUrl:
    description: NodeFieldBigImageUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldImagesExtraImagesUrl:
    description: NodeFieldImagesExtraImagesUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldPageTemplate:
    description: NodeFieldPageTemplate
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldSmallLogoColorfulUrl:
    description: NodeFieldSmallLogoColorfulUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldSmallLogoNegativeUrl:
    description: NodeFieldSmallLogoNegativeUrl
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldSupportersKeys:
    description: NodeFieldSupportersKeys
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  NodeFieldSynopticText:
    description: NodeFieldSynopticText
    required:
      - value
      - format
    type: object
    properties:
      value:
        description: Value
        type: string
      format:
        description: Format
        type: string
      lang:
        description: Language
        type: string
  NodeFieldVideos:
    description: NodeFieldVideos
    required:
      - value
    type: object
    properties:
      value:
        description: Value
        type: string
      lang:
        description: Language
        type: string
  'Response[List[CmsTag]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/CmsTag'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  CmsTag:
    description: CMS Tag
    required:
      - tid
      - name
    type: object
    properties:
      tid:
        description: Tag ID
        type: string
      name:
        description: Tag name
        type: string
  'Response[List[CmsNodes]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/CmsNodes'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  CmsNodes:
    description: CMS Nodes
    required:
      - nid
      - title
    type: object
    properties:
      nid:
        description: Node ID
        type: string
      title:
        description: Node title
        type: string
  'Response[List[CmsNodeResponse]]':
    type: object
    properties:
      payload:
        type: array
        items:
          $ref: '#/definitions/CmsNodeResponse'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  SandboxRequest:
    description: ''
    type: object
    properties:
      sandboxId:
        description: Sandbox ID
        type: string
  'Response[SandboxDataModel]':
    type: object
    properties:
      payload:
        $ref: '#/definitions/SandboxDataModel'
      exception:
        $ref: '#/definitions/ResponseMessage'
      messages:
        type: array
        items:
          $ref: '#/definitions/ResponseMessage'
      executionTime:
        format: double
        type: number
  SandboxDataModel:
    description: ''
    type: object
    properties:
      SandboxID:
        description: Sandbox ID
        type: string
      Users:
        description: List of users inside sandbox data model
        type: array
        items:
          description: Sandbox user extended properties
          type: object
          properties:
            name:
              description: User's first name
              type: string
            surname:
              description: User's surname
              type: string
            phone:
              description: User's phone
              type: string
            job:
              description: User's profession
              type: string
            activity:
              description: Activity
              type: string
            afm:
              description: Tax Identification Number
              type: string
            doy:
              description: User's tax office
              type: string
            address:
              description: User's address
              type: string
            area:
              description: User's address area
              type: string
            postal:
              description: User's address postal code
              type: string
            state:
              description: User's address state
              type: string
            phone_nomikou:
              description: Business phone
              type: string
            email_nomikou:
              description: Business email
              type: string
            url:
              description: User's web site
              type: string
            country:
              description: User's address country
              type: string
            legal_status:
              description: 'User''s legal type (Individual, Legal Entity, Organisations/NGOs)'
              type: string
            userRole:
              description: "User role \r\n- User\r\n- Backoffice"
              type: string
            status:
              description: "User status\r\n- Active\r\n- Blocked"
              type: string
            userId:
              description: The user id
              type: string
            userName:
              description: The user name
              type: string
            email:
              description: The user's email
              type: string
            providerId:
              description: Provider id
              type: string
            provider:
              description: Provider name
              type: string
      Accounts:
        description: List of accounts
        type: array
        items:
          description: Account Model
          required:
            - transactions
            - accountId
            - accountNumber
            - iban
            - currencyISO
            - status
          type: object
          properties:
            availableBalance:
              format: double
              description: Available balance of the account
              type: number
            ledgerBalance:
              format: double
              description: Ledger balance of the account
              type: number
            transactions:
              description: List of transactions
              type: array
              items:
                description: Transaction data model
                required:
                  - amount
                  - ledgerBalance
                  - transactionDatetime
                  - timeStamp
                  - reasonCode
                  - reasonDescription
                  - origin
                  - valeur
                  - currencyISO
                  - reference
                  - branch
                type: object
                properties:
                  amount:
                    format: double
                    description: Transaction Amount
                    type: number
                  ledgerBalance:
                    format: double
                    description: Account ledger balance
                    type: number
                  transactionDatetime:
                    format: date-time
                    description: Transaction date
                    type: string
                  timeStamp:
                    description: Transaction datetime (timestamp)
                    type: string
                  reasonCode:
                    format: double
                    description: Transaction reason code
                    type: number
                  reasonDescription:
                    description: Reason description
                    type: string
                  origin:
                    description: Transaction origin
                    type: string
                  valeur:
                    format: date-time
                    description: Transaction valeur
                    type: string
                  currencyISO:
                    description: Transaction currency
                    type: string
                  reference:
                    description: Transaction reference
                    type: string
                  branch:
                    description: Transaction branch
                    type: string
                  relatedAccount:
                    description: Transaction related account
                    type: string
            accountId:
              format: uuid
              description: The account id (UUID)
              type: string
              example: 00000000-0000-0000-0000-000000000000
            accountNumber:
              description: The account number
              type: string
            iban:
              description: IBAN of account
              type: string
            currencyISO:
              description: Currency of the account (EUR/USD...)
              type: string
            description:
              description: Description of the account
              type: string
            status:
              description: Status of the account (Active/Inactive)
              enum:
                - Active
                - Inactive
              type: string
      ActionData:
        description: List of actions with data
        type: array
        items:
          description: Properties of an action
          required:
            - actionDataId
            - actionShortName
            - actionName
            - accountKey
            - cardsAccountKey
            - dateStart
            - dateEnd
            - offsetAmount
            - targetAmount
            - status
            - newsletterUsers
          type: object
          properties:
            actionDataId:
              format: uuid
              description: Action sensitive data Id
              type: string
              example: 00000000-0000-0000-0000-000000000000
            actionShortName:
              description: >-
                Short name or an action. The value of this property is
                autogenerated by the API.
              type: string
            actionName:
              description: Name or title of an action
              type: string
            accountKey:
              description: Account key is a key to find the account on the nbg account api
              type: string
            cardsAccountKey:
              description: Key to find the cards account on ete account api
              type: string
            dateStart:
              format: date-time
              description: Start date of an action
              type: string
            dateEnd:
              format: date-time
              description: End date of an action
              type: string
            offsetAmount:
              format: double
              description: >-
                An offset for the amount . Is used for business proposed like
                money withdraws before an action is closed
              type: number
            targetAmount:
              format: double
              description: Target Amount
              type: number
            status:
              description: "Status of the action\r\n- Draft\r\n- Active\r\n- Expired\r\n- Archived"
              type: string
            newsletterUsers:
              description: Registered users for newsletter
              type: array
              items:
                description: Registered users for newsletters per action
                required:
                  - userId
                  - actionDataId
                  - createdDate
                  - active
                  - updatedDate
                type: object
                properties:
                  userId:
                    description: User Id
                    type: string
                  actionDataId:
                    format: uuid
                    description: Action data ID
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
                  createdDate:
                    format: date-time
                    description: Inserted Date
                    type: string
                  active:
                    description: Active
                    type: boolean
                  updatedDate:
                    format: date-time
                    description: >-
                      Updated Date. This property has value when a user becomes
                      inactive
                    type: string
            merchantDataId:
              description: Merchant id (uuid). Used for datacash payment.
              type: string
            publicAmount:
              format: double
              description: Public amount.
              type: number
      DonationPromises:
        description: List of donation promises
        type: array
        items:
          description: Donation Promise data
          required:
            - actionKey
          type: object
          properties:
            donationPromiseId:
              format: uuid
              description: Donation promise ID
              type: string
              example: 00000000-0000-0000-0000-000000000000
            actionKey:
              format: uuid
              description: key to match donation to an action
              type: string
              example: 00000000-0000-0000-0000-000000000000
            categoryMoneyFound:
              description: Any category bank want to store to trace back the transaction
              type: string
            donationTime:
              format: date-time
              description: Donation timestamp
              type: string
            payType:
              description: From where the pay must be  card/deposit
              type: string
            publish:
              description: is this published
              type: boolean
            theChallenge:
              description: challenge key
              type: string
            transactionKey:
              description: transaction key
              type: string
            transactionReceiptKey:
              description: transaction receipt key
              type: string
            userKey:
              description: User key is the UserID
              type: string
            xpAmount:
              format: double
              description: Amount of money that is promised for the donation
              type: number
            status:
              description: "Status of the donation promise\r\n- Pending\r\n- Paid_Matched\r\n- Paid_Not_Matched\r\n- Pending_3dSecure\r\n- Fail_Cancelled_By_User\r\n- ..."
              type: string
            displayName:
              description: Public display name
              type: string
      ThematicAreas:
        description: List of thematic areas
        type: array
        items:
          description: Thematic area data model
          required:
            - thematicAreaId
            - shortName
            - name
            - description
            - logoUrl
            - status
            - actions
          type: object
          properties:
            thematicAreaId:
              format: uuid
              description: Thematic area unique identifier.
              type: string
              example: 00000000-0000-0000-0000-000000000000
            shortName:
              description: Short name of thematic area. Used for Content Tag
              type: string
            name:
              description: "Thematic area name / title. \r\neg: Welfare, Health and Solidarity"
              type: string
            description:
              description: Short description of thematic area
              type: string
            logoUrl:
              description: URL of a logo image
              type: string
            status:
              description: "Current status of thematic area\r\n- Draft\r\n- Active\r\n- Archived"
              type: string
            actions:
              description: List of actions that belongs to the thematic area
              type: array
              items:
                description: "Action short info. \r\n- Action data id\r\n- Action short name"
                required:
                  - actionDataId
                  - shortName
                type: object
                properties:
                  actionDataId:
                    format: uuid
                    description: Action data ID
                    type: string
                    example: 00000000-0000-0000-0000-000000000000
                  shortName:
                    description: Action data short name
                    type: string
      ContactUsEntries:
        description: List of contact us entries
        type: array
        items:
          description: Contact us data model
          required:
            - contactUsId
            - surname
            - firstname
            - email
            - message
            - createdDate
          type: object
          properties:
            contactUsId:
              format: uuid
              description: Contact us ID (UUID)
              type: string
              example: 00000000-0000-0000-0000-000000000000
            surname:
              description: Surname
              type: string
            firstname:
              description: Firstname
              type: string
            email:
              description: Email
              type: string
            message:
              description: Message
              type: string
            createdDate:
              format: date-time
              description: Created Date
              type: string
      Merchants:
        description: List of merchants
        type: array
        items:
          description: Merchant details
          type: object
          properties:
            merchantDataId:
              format: uuid
              description: Merchant data id (UUID)
              type: string
              example: 00000000-0000-0000-0000-000000000000
            merchantId:
              description: Merchant Id
              type: string
            merchantName:
              description: Merchant name
              type: string
            username:
              description: Username for datacash
              type: string
            password:
              description: Password for datacash
              type: string
            status:
              description: Merchant status (Active/Inactive)
              type: string
            merchantUrl:
              description: Merchant Url
              type: string
            required3DSecure:
              description: Required3DSecure
              type: boolean
      Alerts:
        description: List of alerts
        type: array
        items:
          description: Alert model
          type: object
          properties:
            alertId:
              format: uuid
              description: Alert Id (UUID)
              type: string
              example: 00000000-0000-0000-0000-000000000000
            name:
              description: Name of alert
              type: string
            type:
              description: Alert type (Green | Yellow | Orange | Red)
              type: string
            description:
              description: Alert description
              type: string
            tags:
              description: Search helping text(s)
              type: string
            sourceType:
              description: Source of the alert (Batch | API | UI)
              type: string
            sourceClient:
              description: 'Application id (ex: uuid)'
              type: string
            sourceDescription:
              description: Source id
              type: string
            insertDate:
              format: date-time
              description: Insert date
              type: string
            insertedByUserId:
              description: User Id
              type: string
      cmsData:
        description: Cms related data
        type: object
        properties:
          tagsData:
            description: Tags
            type: array
            items:
              description: CMS Tag
              required:
                - tid
                - name
              type: object
              properties:
                tid:
                  description: Tag ID
                  type: string
                name:
                  description: Tag name
                  type: string
          nodesData:
            description: Nodes
            type: array
            items:
              description: Nodes data
              type: object
              properties:
                tag:
                  description: tag Id
                  type: string
                nodes:
                  description: CMS Tags
                  type: array
                  items:
                    description: CMS Nodes
                    required:
                      - nid
                      - title
                    type: object
                    properties:
                      nid:
                        description: Node ID
                        type: string
                      title:
                        description: Node title
                        type: string
          articlesData:
            description: Articles
            type: array
            items:
              description: Article data
              type: object
              properties:
                node:
                  description: CMS Nodes
                  required:
                    - nid
                    - title
                  type: object
                  properties:
                    nid:
                      description: Node ID
                      type: string
                    title:
                      description: Node title
                      type: string
                created:
                  description: CreatedDate
                  type: string
                changed:
                  description: ChangedDate
                  type: string
                article:
                  description: CMS Article
                  required:
                    - body
                    - tags
                    - metadata
                  type: object
                  properties:
                    body:
                      description: NodeBody
                      required:
                        - value
                        - format
                        - summary
                      type: object
                      properties:
                        value:
                          description: Value
                          type: string
                        format:
                          description: Format
                          type: string
                        summary:
                          description: Summary
                          type: string
                        lang:
                          description: Language
                          type: string
                    tags:
                      description: Article tags
                      type: array
                      items:
                        description: NodeFieldTags
                        required:
                          - target_id
                          - value
                        type: object
                        properties:
                          target_id:
                            format: int32
                            description: TargetId
                            type: integer
                          value:
                            description: Value
                            type: string
                    metadata:
                      description: Article metadata
                      type: array
                      items:
                        description: NodeFieldMetadata
                        required:
                          - target_id
                        type: object
                        properties:
                          target_id:
                            format: int32
                            description: TargetId
                            type: integer
                    externalSensitiveData:
                      description: External sensitive data
                      type: array
                      items:
                        description: NodeExternalSensitiveData
                        required:
                          - value
                        type: object
                        properties:
                          value:
                            description: Value
                            type: string
                    fieldImage:
                      description: Image data
                      type: array
                      items:
                        description: NodeFieldImage
                        type: object
                        properties:
                          target_id:
                            description: TargetId
                            type: string
                          alt:
                            description: Alt
                            type: string
                          title:
                            description: Title
                            type: string
                          width:
                            description: Width
                            type: string
                          height:
                            description: Height
                            type: string
                          target_type:
                            description: Target Type
                            type: string
                          url:
                            description: URL
                            type: string
  SandboxUserExtended:
    description: Sandbox user extended properties
    type: object
    properties:
      name:
        description: User's first name
        type: string
      surname:
        description: User's surname
        type: string
      phone:
        description: User's phone
        type: string
      job:
        description: User's profession
        type: string
      activity:
        description: Activity
        type: string
      afm:
        description: Tax Identification Number
        type: string
      doy:
        description: User's tax office
        type: string
      address:
        description: User's address
        type: string
      area:
        description: User's address area
        type: string
      postal:
        description: User's address postal code
        type: string
      state:
        description: User's address state
        type: string
      phone_nomikou:
        description: Business phone
        type: string
      email_nomikou:
        description: Business email
        type: string
      url:
        description: User's web site
        type: string
      country:
        description: User's address country
        type: string
      legal_status:
        description: 'User''s legal type (Individual, Legal Entity, Organisations/NGOs)'
        type: string
      userRole:
        description: "User role \r\n- User\r\n- Backoffice"
        type: string
      status:
        description: "User status\r\n- Active\r\n- Blocked"
        type: string
      userId:
        description: The user id
        type: string
      userName:
        description: The user name
        type: string
      email:
        description: The user's email
        type: string
      providerId:
        description: Provider id
        type: string
      provider:
        description: Provider name
        type: string
  ActionData:
    description: Properties of an action
    required:
      - actionDataId
      - actionShortName
      - actionName
      - accountKey
      - cardsAccountKey
      - dateStart
      - dateEnd
      - offsetAmount
      - targetAmount
      - status
      - newsletterUsers
    type: object
    properties:
      actionDataId:
        format: uuid
        description: Action sensitive data Id
        type: string
        example: 00000000-0000-0000-0000-000000000000
      actionShortName:
        description: >-
          Short name or an action. The value of this property is autogenerated
          by the API.
        type: string
      actionName:
        description: Name or title of an action
        type: string
      accountKey:
        description: Account key is a key to find the account on the nbg account api
        type: string
      cardsAccountKey:
        description: Key to find the cards account on ete account api
        type: string
      dateStart:
        format: date-time
        description: Start date of an action
        type: string
      dateEnd:
        format: date-time
        description: End date of an action
        type: string
      offsetAmount:
        format: double
        description: >-
          An offset for the amount . Is used for business proposed like money
          withdraws before an action is closed
        type: number
      targetAmount:
        format: double
        description: Target Amount
        type: number
      status:
        description: "Status of the action\r\n- Draft\r\n- Active\r\n- Expired\r\n- Archived"
        type: string
      newsletterUsers:
        description: Registered users for newsletter
        type: array
        items:
          description: Registered users for newsletters per action
          required:
            - userId
            - actionDataId
            - createdDate
            - active
            - updatedDate
          type: object
          properties:
            userId:
              description: User Id
              type: string
            actionDataId:
              format: uuid
              description: Action data ID
              type: string
              example: 00000000-0000-0000-0000-000000000000
            createdDate:
              format: date-time
              description: Inserted Date
              type: string
            active:
              description: Active
              type: boolean
            updatedDate:
              format: date-time
              description: >-
                Updated Date. This property has value when a user becomes
                inactive
              type: string
      merchantDataId:
        description: Merchant id (uuid). Used for datacash payment.
        type: string
      publicAmount:
        format: double
        description: Public amount.
        type: number
  SandboxCms:
    description: Cms related data
    type: object
    properties:
      tagsData:
        description: Tags
        type: array
        items:
          description: CMS Tag
          required:
            - tid
            - name
          type: object
          properties:
            tid:
              description: Tag ID
              type: string
            name:
              description: Tag name
              type: string
      nodesData:
        description: Nodes
        type: array
        items:
          description: Nodes data
          type: object
          properties:
            tag:
              description: tag Id
              type: string
            nodes:
              description: CMS Tags
              type: array
              items:
                description: CMS Nodes
                required:
                  - nid
                  - title
                type: object
                properties:
                  nid:
                    description: Node ID
                    type: string
                  title:
                    description: Node title
                    type: string
      articlesData:
        description: Articles
        type: array
        items:
          description: Article data
          type: object
          properties:
            node:
              description: CMS Nodes
              required:
                - nid
                - title
              type: object
              properties:
                nid:
                  description: Node ID
                  type: string
                title:
                  description: Node title
                  type: string
            created:
              description: CreatedDate
              type: string
            changed:
              description: ChangedDate
              type: string
            article:
              description: CMS Article
              required:
                - body
                - tags
                - metadata
              type: object
              properties:
                body:
                  description: NodeBody
                  required:
                    - value
                    - format
                    - summary
                  type: object
                  properties:
                    value:
                      description: Value
                      type: string
                    format:
                      description: Format
                      type: string
                    summary:
                      description: Summary
                      type: string
                    lang:
                      description: Language
                      type: string
                tags:
                  description: Article tags
                  type: array
                  items:
                    description: NodeFieldTags
                    required:
                      - target_id
                      - value
                    type: object
                    properties:
                      target_id:
                        format: int32
                        description: TargetId
                        type: integer
                      value:
                        description: Value
                        type: string
                metadata:
                  description: Article metadata
                  type: array
                  items:
                    description: NodeFieldMetadata
                    required:
                      - target_id
                    type: object
                    properties:
                      target_id:
                        format: int32
                        description: TargetId
                        type: integer
                externalSensitiveData:
                  description: External sensitive data
                  type: array
                  items:
                    description: NodeExternalSensitiveData
                    required:
                      - value
                    type: object
                    properties:
                      value:
                        description: Value
                        type: string
                fieldImage:
                  description: Image data
                  type: array
                  items:
                    description: NodeFieldImage
                    type: object
                    properties:
                      target_id:
                        description: TargetId
                        type: string
                      alt:
                        description: Alt
                        type: string
                      title:
                        description: Title
                        type: string
                      width:
                        description: Width
                        type: string
                      height:
                        description: Height
                        type: string
                      target_type:
                        description: Target Type
                        type: string
                      url:
                        description: URL
                        type: string
  NodeData:
    description: Nodes data
    type: object
    properties:
      tag:
        description: tag Id
        type: string
      nodes:
        description: CMS Tags
        type: array
        items:
          description: CMS Nodes
          required:
            - nid
            - title
          type: object
          properties:
            nid:
              description: Node ID
              type: string
            title:
              description: Node title
              type: string
  ArticleData:
    description: Article data
    type: object
    properties:
      node:
        description: CMS Nodes
        required:
          - nid
          - title
        type: object
        properties:
          nid:
            description: Node ID
            type: string
          title:
            description: Node title
            type: string
      created:
        description: CreatedDate
        type: string
      changed:
        description: ChangedDate
        type: string
      article:
        description: CMS Article
        required:
          - body
          - tags
          - metadata
        type: object
        properties:
          body:
            description: NodeBody
            required:
              - value
              - format
              - summary
            type: object
            properties:
              value:
                description: Value
                type: string
              format:
                description: Format
                type: string
              summary:
                description: Summary
                type: string
              lang:
                description: Language
                type: string
          tags:
            description: Article tags
            type: array
            items:
              description: NodeFieldTags
              required:
                - target_id
                - value
              type: object
              properties:
                target_id:
                  format: int32
                  description: TargetId
                  type: integer
                value:
                  description: Value
                  type: string
          metadata:
            description: Article metadata
            type: array
            items:
              description: NodeFieldMetadata
              required:
                - target_id
              type: object
              properties:
                target_id:
                  format: int32
                  description: TargetId
                  type: integer
          externalSensitiveData:
            description: External sensitive data
            type: array
            items:
              description: NodeExternalSensitiveData
              required:
                - value
              type: object
              properties:
                value:
                  description: Value
                  type: string
          fieldImage:
            description: Image data
            type: array
            items:
              description: NodeFieldImage
              type: object
              properties:
                target_id:
                  description: TargetId
                  type: string
                alt:
                  description: Alt
                  type: string
                title:
                  description: Title
                  type: string
                width:
                  description: Width
                  type: string
                height:
                  description: Height
                  type: string
                target_type:
                  description: Target Type
                  type: string
                url:
                  description: URL
                  type: string
  TransferRequest:
    description: Transfer Request model
    required:
      - amount
      - withCompleteDepositDonation
      - withAction
      - fromAccountIBAN
      - toAccountIBAN
    type: object
    properties:
      amount:
        format: double
        description: Amount of transfer
        type: number
      withCompleteDepositDonation:
        description: Donation Promise id
        type: string
      withAction:
        description: Action ID
        type: string
      fromAccountIBAN:
        description: Source account IBAN
        type: string
      toAccountIBAN:
        description: Destination account IBAN
        type: string
      description:
        description: Description of transfer
        type: string
  CmsArticleRequest:
    description: Article Request type
    type: object
    properties:
      tag:
        description: Tag name
        type: string
      title:
        description: Title of the article
        type: string
      body:
        description: Body of the article
        type: string
      summary:
        description: Summary of the article
        type: string
  CmsArticleRequestUpdate:
    description: Article Request for update type
    type: object
    properties:
      title:
        description: Title of the article
        type: string
      body:
        description: Body of the article
        type: string
      summary:
        description: Summary of the article
        type: string
      image:
        description: Cms Article Image Request
        type: object
        properties:
          alt:
            description: Alt image text
            type: string
          title:
            description: Title of the image
            type: string
          url:
            description: Image url
            type: string
  CmsArticleImageRequest:
    description: Cms Article Image Request
    type: object
    properties:
      alt:
        description: Alt image text
        type: string
      title:
        description: Title of the image
        type: string
      url:
        description: Image url
        type: string
securityDefinitions:
  Client-Id:
    type: apiKey
    description: Application's Id
    name: Client-Id
    in: header
security:
  - Client-Id: []
